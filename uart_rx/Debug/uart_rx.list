
uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800041c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800041c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eda  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000337  00000000  00000000  00011326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00011660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000116f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cd08  00000000  00000000  00011758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c71  00000000  00000000  0001e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045775  00000000  00000000  0001f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00064846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000134  00000000  00000000  0006489c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003fc 	.word	0x080003fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003fc 	.word	0x080003fc

08000208 <main>:

char key;


int main(void)
             {UART_RX_TX_init();
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
 800020c:	f000 f82e 	bl	800026c <UART_RX_TX_init>
	          while(1)
	               {
	      key = readdata();
 8000210:	f000 f892 	bl	8000338 <readdata>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	4b01      	ldr	r3, [pc, #4]	; (8000220 <main+0x18>)
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	e7f8      	b.n	8000210 <main+0x8>
 800021e:	bf00      	nop
 8000220:	2000001c 	.word	0x2000001c

08000224 <set_baudrate_usart2>:
	                   return(ch);
                           }


   static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	f043 0201 	orr.w	r2, r3, #1
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f043 0202 	orr.w	r2, r3, #2
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	f043 0208 	orr.w	r2, r3, #8
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	609a      	str	r2, [r3, #8]
          }
 8000260:	bf00      	nop
 8000262:	3714      	adds	r7, #20
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr

0800026c <UART_RX_TX_init>:

   void UART_RX_TX_init(void)
           {/*************enable clock access to gpioA *******************/
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
      	   RCC->AHB1ENR|=GPIOAEN;
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <UART_RX_TX_init+0xbc>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <UART_RX_TX_init+0xbc>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6313      	str	r3, [r2, #48]	; 0x30


      	   /*************Set PA2 mode to alternate func***************/
       	     GPIOA->MODER|=(1U<<5);
 800027c:	4b2b      	ldr	r3, [pc, #172]	; (800032c <UART_RX_TX_init+0xc0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a2a      	ldr	r2, [pc, #168]	; (800032c <UART_RX_TX_init+0xc0>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6013      	str	r3, [r2, #0]
             GPIOA->MODER&=~(1U<<4);
 8000288:	4b28      	ldr	r3, [pc, #160]	; (800032c <UART_RX_TX_init+0xc0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a27      	ldr	r2, [pc, #156]	; (800032c <UART_RX_TX_init+0xc0>)
 800028e:	f023 0310 	bic.w	r3, r3, #16
 8000292:	6013      	str	r3, [r2, #0]
             /*****Configure PA2 to AF7 As indicated in the alternate function mapping */
             GPIOA->AFR[0]|=(1U<<8);
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <UART_RX_TX_init+0xc0>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a24      	ldr	r2, [pc, #144]	; (800032c <UART_RX_TX_init+0xc0>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<9);
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <UART_RX_TX_init+0xc0>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <UART_RX_TX_init+0xc0>)
 80002a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002aa:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<10);
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <UART_RX_TX_init+0xc0>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a1e      	ldr	r2, [pc, #120]	; (800032c <UART_RX_TX_init+0xc0>)
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	6213      	str	r3, [r2, #32]
             /**********Set PA3 mode to alternate func**************/
             GPIOA->MODER|=(1U<<7);
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <UART_RX_TX_init+0xc0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <UART_RX_TX_init+0xc0>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6013      	str	r3, [r2, #0]
             GPIOA->MODER&=~(1U<<6);
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <UART_RX_TX_init+0xc0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a18      	ldr	r2, [pc, #96]	; (800032c <UART_RX_TX_init+0xc0>)
 80002ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ce:	6013      	str	r3, [r2, #0]

             /***********Configure PA3 TO AF7***********/
             GPIOA->AFR[0]|=(1U<<12);
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <UART_RX_TX_init+0xc0>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a15      	ldr	r2, [pc, #84]	; (800032c <UART_RX_TX_init+0xc0>)
 80002d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002da:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<13);
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <UART_RX_TX_init+0xc0>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <UART_RX_TX_init+0xc0>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e6:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<14);
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <UART_RX_TX_init+0xc0>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a0f      	ldr	r2, [pc, #60]	; (800032c <UART_RX_TX_init+0xc0>)
 80002ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f2:	6213      	str	r3, [r2, #32]

             /**************enable clock access to usart2******************/
             RCC->APB1ENR|=(1U<<17);
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <UART_RX_TX_init+0xbc>)
 80002f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <UART_RX_TX_init+0xbc>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fe:	6413      	str	r3, [r2, #64]	; 0x40

             /****************CONFIGURE BAUDRATE***********/
             set_baudrate_usart2(USART2,periph_freq,baudrate);
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	490a      	ldr	r1, [pc, #40]	; (8000330 <UART_RX_TX_init+0xc4>)
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <UART_RX_TX_init+0xc8>)
 8000308:	f7ff ff8c 	bl	8000224 <set_baudrate_usart2>
             /*********configure transfert direction */
             USART2->CR1|=((1U<<3)|(1U<<2));
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <UART_RX_TX_init+0xc8>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <UART_RX_TX_init+0xc8>)
 8000312:	f043 030c 	orr.w	r3, r3, #12
 8000316:	60d3      	str	r3, [r2, #12]
             /***********enable uart module **************/
             USART2->CR1|=(1U<<13);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <UART_RX_TX_init+0xc8>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <UART_RX_TX_init+0xc8>)
 800031e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000322:	60d3      	str	r3, [r2, #12]

             }
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	00f42400 	.word	0x00f42400
 8000334:	40004400 	.word	0x40004400

08000338 <readdata>:
          USART2->CR1|=(1U<<13);
            }


  char readdata(void)
  {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	while (!(USART2->SR & (1U<<5))){}
 800033c:	bf00      	nop
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <readdata+0x24>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <readdata+0x6>
	return USART2->DR;
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <readdata+0x24>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	b2db      	uxtb	r3, r3
  }
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40004400 	.word	0x40004400

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff39 	bl	8000208 <main>

08000396 <LoopForever>:

LoopForever:
    b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	20000020 	.word	0x20000020

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	; (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	; (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	; (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	; (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
