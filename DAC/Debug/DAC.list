
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08001790  08001790  00011790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001928  08001928  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001928  08001928  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001928  08001928  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001994  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001994  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034e3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bb6  00000000  00000000  00023577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00024130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00024310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dcfc  00000000  00000000  00024468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a8a  00000000  00000000  00032164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047724  00000000  00000000  00034bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007c312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cec  00000000  00000000  0007c368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001778 	.word	0x08001778

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001778 	.word	0x08001778

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ADC_init>:
#define EOC 				(1U<<1)
#define CONT				(1U<<1)


void ADC_init(void)
   {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*I will use channel 1 == PA1*/
	/*enable clock access to GPIOA*/
	RCC->AHB1ENR|=GPIOA_Clock;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <ADC_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <ADC_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA1 to analog*/
	GPIOA->MODER|=PA1_analog;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <ADC_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <ADC_init+0x5c>)
 80002c6:	f043 030c 	orr.w	r3, r3, #12
 80002ca:	6013      	str	r3, [r2, #0]

	/*******************************Configure ADC*********************/
	/*enable clock access to ADC APB2*/
	RCC->APB2ENR|=ADC_Clock;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <ADC_init+0x58>)
 80002ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <ADC_init+0x58>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6453      	str	r3, [r2, #68]	; 0x44
	/************Conversion sequence start ===  what is the first channel********/
	// I will use channel 1 first so SEQ 1 is channel 1
	// If i wanted to use for example channel 4 as SEQ2 i should configure SEQ2 as channel 4
	ADC1->SQR3|=SEQ1_Ch1;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <ADC_init+0x60>)
 80002da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <ADC_init+0x60>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6353      	str	r3, [r2, #52]	; 0x34
	/*Conversion sequence length     ===  How many channels*/
	ADC1->SQR1&=~length;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <ADC_init+0x60>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <ADC_init+0x60>)
 80002ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002ee:	62d3      	str	r3, [r2, #44]	; 0x2c


	/*Enable ADC module*/
	ADC1->CR2|=ADC_EN;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <ADC_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <ADC_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

   }
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <Start_Conversion>:


void Start_Conversion(void)
	{/*Set Continuous mode*/
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	 ADC1->CR2|=CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <Start_Conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <Start_Conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start the conversion*/
	ADC1->CR2|=Start_bit;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <Start_Conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <Start_Conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032e:	6093      	str	r3, [r2, #8]

	}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <read_ADC>:

uint32_t read_ADC(void)
	{/*wait for conversion to be complete*/
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	while(!(ADC1->SR)&EOC){}
 8000344:	bf00      	nop
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <read_ADC+0x18>)
 8000348:	681b      	ldr	r3, [r3, #0]
	/*return the result*/
	return (ADC1->DR);
 800034a:	4b03      	ldr	r3, [pc, #12]	; (8000358 <read_ADC+0x18>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40012000 	.word	0x40012000

0800035c <DAC_init>:




	void DAC_init(void)
					{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
			/***************GPIO CONFIG    PA5      ****************/

			/*allow clock access to GPIOA*/
			RCC->AHB1ENR|=GPIOA_EN;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <DAC_init+0x7c>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <DAC_init+0x7c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6313      	str	r3, [r2, #48]	; 0x30

			/*set PA5 to analog*/
			GPIOA->MODER|=analog;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <DAC_init+0x80>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <DAC_init+0x80>)
 8000372:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000376:	6013      	str	r3, [r2, #0]

			/*enable clock access to DAC */
			RCC->APB1ENR|=DAC_Clock;
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <DAC_init+0x7c>)
 800037a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037c:	4a16      	ldr	r2, [pc, #88]	; (80003d8 <DAC_init+0x7c>)
 800037e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000382:	6413      	str	r3, [r2, #64]	; 0x40

			/*maximum amplitude value in the MAMPx[3:0] bits*/
			DAC1->CR|=AMP;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <DAC_init+0x84>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <DAC_init+0x84>)
 800038a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800038e:	6013      	str	r3, [r2, #0]
			/*select timer 5 as TRGO*/
			DAC1->CR|=(1U<<4);
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <DAC_init+0x84>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <DAC_init+0x84>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6013      	str	r3, [r2, #0]
			DAC1->CR|=(1U<<3);
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <DAC_init+0x84>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <DAC_init+0x84>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6013      	str	r3, [r2, #0]
			/*enable DMA request*/
			DAC1->CR|=(1U<<12);
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <DAC_init+0x84>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <DAC_init+0x84>)
 80003ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003b2:	6013      	str	r3, [r2, #0]

			/*trigger enable*/
			DAC1->CR|=Trig_EN;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <DAC_init+0x84>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <DAC_init+0x84>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6013      	str	r3, [r2, #0]


			/*enable buffer and channel CR1*/
			//DAC1->CR|=buff_EN;
			DAC1->CR|=DAC_EN;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <DAC_init+0x84>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <DAC_init+0x84>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6013      	str	r3, [r2, #0]
					}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020000 	.word	0x40020000
 80003e0:	40007400 	.word	0x40007400

080003e4 <DAC1_DMA1_init>:
#define USART2EN           (1U<<17)
#define DAC1_DMA		   (1U<<12)
#define CIRC			   (1U<<8)


void DAC1_DMA1_init(uint32_t dest,uint32_t source, uint32_t len){
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
    /*Enable clock access to DMA1 */
	RCC->AHB1ENR|=DMA1EN;
 80003f0:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <DAC1_DMA1_init+0xd4>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <DAC1_DMA1_init+0xd4>)
 80003f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
	/*Disable DMA1 Stream 5   channel 7    */
	DMA1_Stream5->CR&=~DMA1_S5_EN;
 80003fc:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <DAC1_DMA1_init+0xd8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
	/*wait for it*/
	while(DMA1_Stream5->CR & DMA1_S5_EN){}
 8000408:	bf00      	nop
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f9      	bne.n	800040a <DAC1_DMA1_init+0x26>
	/*Set transfert Direction*/
	DMA1_Stream5->CR|=M2P;
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a28      	ldr	r2, [pc, #160]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800041c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000420:	6013      	str	r3, [r2, #0]
	/*Set the source buffer*/
	DMA1_Stream5->M0AR=source;
 8000422:	4a26      	ldr	r2, [pc, #152]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	60d3      	str	r3, [r2, #12]
	/*Set the destination buffer*/
	DMA1_Stream5->PAR=dest;
 8000428:	4a24      	ldr	r2, [pc, #144]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6093      	str	r3, [r2, #8]
	/*Set the total number of data to be transferred*/
	DMA1_Stream5->NDTR=len;
 800042e:	4a23      	ldr	r2, [pc, #140]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6053      	str	r3, [r2, #4]
	/*Choose the channel*/
	DMA1_Stream5->CR|=CH7;
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a20      	ldr	r2, [pc, #128]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800043a:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800043e:	6013      	str	r3, [r2, #0]
	/*Enable memory increment*/
	DMA1_Stream5->CR|=Memory_Increment;
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6013      	str	r3, [r2, #0]
	/*memory size*/
	DMA1_Stream5->CR|=MSIZE;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000456:	6013      	str	r3, [r2, #0]
	/*periph data size*/
	DMA1_Stream5->CR|=PSIZE;
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a17      	ldr	r2, [pc, #92]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800045e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000462:	6013      	str	r3, [r2, #0]
	/*Set circular mode*/
	DMA1_Stream5->CR|=CIRC;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800046a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800046e:	6013      	str	r3, [r2, #0]
	/*Configure FIFO (enable/disable)*/
	DMA1_Stream5->CR|=DMDIS;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a11      	ldr	r2, [pc, #68]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR|=(1U<<1);
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR|=(1U<<0);
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
	/*Transfer complete interrupt enable*/
	DMA1_Stream5->CR|=Trans_complete;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <DAC1_DMA1_init+0xd8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a08      	ldr	r2, [pc, #32]	; (80004bc <DAC1_DMA1_init+0xd8>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
	/*Activate the stream*/
	DMA1_Stream5->CR|=Stream5_EN;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <DAC1_DMA1_init+0xd8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <DAC1_DMA1_init+0xd8>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]

	}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40026088 	.word	0x40026088

080004c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	db0b      	blt.n	80004ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 021f 	and.w	r2, r3, #31
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <__NVIC_EnableIRQ+0x38>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	095b      	lsrs	r3, r3, #5
 80004e0:	2001      	movs	r0, #1
 80004e2:	fa00 f202 	lsl.w	r2, r0, r2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000e100 	.word	0xe000e100

080004fc <Executionperiodique__XHZ>:
#include "stm32f410rx.h"
#include "Execution_Periodique.h"


    void Executionperiodique__XHZ(int X){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	/***********************enable clock access to timer5	**************/
	RCC->APB1ENR|=(1U<<3);
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <Executionperiodique__XHZ+0x60>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <Executionperiodique__XHZ+0x60>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6413      	str	r3, [r2, #64]	; 0x40

	/* System controller and external interrupt clock enable*/
	RCC->APB2ENR|=(1U<<15);
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <Executionperiodique__XHZ+0x60>)
 8000512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <Executionperiodique__XHZ+0x60>)
 8000516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800051a:	6453      	str	r3, [r2, #68]	; 0x44

	/***********************Set prescaler*****************************/
	TIM5->PSC=0; // 16000 -1
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <Executionperiodique__XHZ+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	; 0x28

	/***********************SET ARR***********************************/
	TIM5->ARR=1; //1000-1  BECAUSE 16,000,000=16000*1000
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <Executionperiodique__XHZ+0x64>)
 8000524:	2201      	movs	r2, #1
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
	/*****select UE as trigger output */
	TIM5->CR2|=(1U<<5);
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <Executionperiodique__XHZ+0x64>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <Executionperiodique__XHZ+0x64>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6053      	str	r3, [r2, #4]
	/*enable timer interruption*/
    TIM5->DIER|=(1U<<0);
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <Executionperiodique__XHZ+0x64>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <Executionperiodique__XHZ+0x64>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	60d3      	str	r3, [r2, #12]

    /*enable nvic interruption*/
    __NVIC_EnableIRQ(50);
 8000540:	2032      	movs	r0, #50	; 0x32
 8000542:	f7ff ffbd 	bl	80004c0 <__NVIC_EnableIRQ>

    /***********************ENABLE TIMER *****************************/
    TIM5->CR1|=(1U<<0);
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <Executionperiodique__XHZ+0x64>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <Executionperiodique__XHZ+0x64>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]

    }
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800
 8000560:	40000c00 	.word	0x40000c00

08000564 <main>:


int CNT=0;
int value=0;
int main(void)
{//Set_TRI_VALS();
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
 ADC_init();
 8000568:	f7ff fea2 	bl	80002b0 <ADC_init>
 Start_Conversion();
 800056c:	f7ff fed2 	bl	8000314 <Start_Conversion>
 UART_TX_init();
 8000570:	f000 f8f4 	bl	800075c <UART_TX_init>
 DAC_init();
 8000574:	f7ff fef2 	bl	800035c <DAC_init>
 Executionperiodique__XHZ(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f7ff ffbe 	bl	80004fc <Executionperiodique__XHZ>
 DAC1_DMA1_init((uint32_t)&(DAC1->DHR12R1),(uint32_t) function,128);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <main+0x40>)
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <main+0x44>)
 8000588:	f7ff ff2c 	bl	80003e4 <DAC1_DMA1_init>

	while(1)
	{

     value=read_ADC();
 800058c:	f7ff fed8 	bl	8000340 <read_ADC>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <main+0x48>)
 8000596:	601a      	str	r2, [r3, #0]
     printf(value);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x48>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f995 	bl	80008cc <iprintf>
	{
 80005a2:	e7f3      	b.n	800058c <main+0x28>
 80005a4:	08001790 	.word	0x08001790
 80005a8:	40007408 	.word	0x40007408
 80005ac:	20000080 	.word	0x20000080

080005b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00a      	b.n	80005d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c2:	f3af 8000 	nop.w
 80005c6:	4601      	mov	r1, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf0      	blt.n	80005c2 <_read+0x12>
	}

return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e009      	b.n	8000610 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f877 	bl	80006f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf1      	blt.n	80005fc <_write+0x12>
	}
	return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_close>:

int _close(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064a:	605a      	str	r2, [r3, #4]
	return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_isatty>:

int _isatty(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	return 1;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f000 f8d4 	bl	8000868 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20008000 	.word	0x20008000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	20000084 	.word	0x20000084
 80006f4:	200000a0 	.word	0x200000a0

080006f8 <__io_putchar>:




void senddata(int a);
       char __io_putchar(char ch){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	                  senddata(ch);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f871 	bl	80007ec <senddata>
	                   return(ch);
 800070a:	79fb      	ldrb	r3, [r7, #7]
                           }
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <set_baudrate_usart2>:


   static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f043 0201 	orr.w	r2, r3, #1
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f043 0202 	orr.w	r2, r3, #2
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	f043 0208 	orr.w	r2, r3, #8
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	609a      	str	r2, [r3, #8]
          }
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <UART_TX_init>:

   void UART_TX_init(void)
        {/*************enable clock access to gpioA *******************/
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
   	   RCC->AHB1ENR|=GPIOAEN;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <UART_TX_init+0x80>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <UART_TX_init+0x80>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30


   	   /*************Set mode to alternate func***************/
   	   GPIOA->MODER|=(1U<<5);
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <UART_TX_init+0x84>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <UART_TX_init+0x84>)
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	6013      	str	r3, [r2, #0]
          GPIOA->MODER&=~(1U<<4);
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <UART_TX_init+0x84>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <UART_TX_init+0x84>)
 800077e:	f023 0310 	bic.w	r3, r3, #16
 8000782:	6013      	str	r3, [r2, #0]
          /*****Configure to AF7 As indicated in the alternate function mapping */
          GPIOA->AFR[0]|=(1U<<8);
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <UART_TX_init+0x84>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <UART_TX_init+0x84>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<9);
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <UART_TX_init+0x84>)
 8000792:	6a1b      	ldr	r3, [r3, #32]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <UART_TX_init+0x84>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079a:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<10);
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <UART_TX_init+0x84>)
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <UART_TX_init+0x84>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6213      	str	r3, [r2, #32]

          /**************enable clock access to usart2******************/
          RCC->APB1ENR|=(1U<<17);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <UART_TX_init+0x80>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <UART_TX_init+0x80>)
 80007ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40

          /****************CONFIGURE BAUDRATE***********/
          set_baudrate_usart2(USART2,periph_freq,baudrate);
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	490a      	ldr	r1, [pc, #40]	; (80007e4 <UART_TX_init+0x88>)
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <UART_TX_init+0x8c>)
 80007bc:	f7ff ffaa 	bl	8000714 <set_baudrate_usart2>
          /*********configure transfert direction */
          USART2->CR1|=(1U<<3);
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <UART_TX_init+0x8c>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <UART_TX_init+0x8c>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	60d3      	str	r3, [r2, #12]
          /***********enable uart module **************/
          USART2->CR1|=(1U<<13);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <UART_TX_init+0x8c>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <UART_TX_init+0x8c>)
 80007d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d6:	60d3      	str	r3, [r2, #12]
            }
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	00f42400 	.word	0x00f42400
 80007e8:	40004400 	.word	0x40004400

080007ec <senddata>:




   void senddata(int a)
        {/*make sure the Transmit data register is empty : check the STATUS REG */
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]


           	   USART2->DR=a;
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <senddata+0x28>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6053      	str	r3, [r2, #4]
           	   while(!(USART2->SR)&&(1U<<6)) {}
 80007fa:	bf00      	nop
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <senddata+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0fb      	beq.n	80007fc <senddata+0x10>

        }
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000818:	f8df d030 	ldr.w	sp, [pc, #48]	; 800084c <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
 // bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000842:	f000 f817 	bl	8000874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe8d 	bl	8000564 <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800084c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000858:	08001930 	.word	0x08001930
  ldr r2, =_sbss
 800085c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000860:	200000a0 	.word	0x200000a0

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <__errno>:
 8000868:	4b01      	ldr	r3, [pc, #4]	; (8000870 <__errno+0x8>)
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000000 	.word	0x20000000

08000874 <__libc_init_array>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4d0d      	ldr	r5, [pc, #52]	; (80008ac <__libc_init_array+0x38>)
 8000878:	4c0d      	ldr	r4, [pc, #52]	; (80008b0 <__libc_init_array+0x3c>)
 800087a:	1b64      	subs	r4, r4, r5
 800087c:	10a4      	asrs	r4, r4, #2
 800087e:	2600      	movs	r6, #0
 8000880:	42a6      	cmp	r6, r4
 8000882:	d109      	bne.n	8000898 <__libc_init_array+0x24>
 8000884:	4d0b      	ldr	r5, [pc, #44]	; (80008b4 <__libc_init_array+0x40>)
 8000886:	4c0c      	ldr	r4, [pc, #48]	; (80008b8 <__libc_init_array+0x44>)
 8000888:	f000 ff76 	bl	8001778 <_init>
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	10a4      	asrs	r4, r4, #2
 8000890:	2600      	movs	r6, #0
 8000892:	42a6      	cmp	r6, r4
 8000894:	d105      	bne.n	80008a2 <__libc_init_array+0x2e>
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f855 3b04 	ldr.w	r3, [r5], #4
 800089c:	4798      	blx	r3
 800089e:	3601      	adds	r6, #1
 80008a0:	e7ee      	b.n	8000880 <__libc_init_array+0xc>
 80008a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a6:	4798      	blx	r3
 80008a8:	3601      	adds	r6, #1
 80008aa:	e7f2      	b.n	8000892 <__libc_init_array+0x1e>
 80008ac:	08001928 	.word	0x08001928
 80008b0:	08001928 	.word	0x08001928
 80008b4:	08001928 	.word	0x08001928
 80008b8:	0800192c 	.word	0x0800192c

080008bc <memset>:
 80008bc:	4402      	add	r2, r0
 80008be:	4603      	mov	r3, r0
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d100      	bne.n	80008c6 <memset+0xa>
 80008c4:	4770      	bx	lr
 80008c6:	f803 1b01 	strb.w	r1, [r3], #1
 80008ca:	e7f9      	b.n	80008c0 <memset+0x4>

080008cc <iprintf>:
 80008cc:	b40f      	push	{r0, r1, r2, r3}
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <iprintf+0x2c>)
 80008d0:	b513      	push	{r0, r1, r4, lr}
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	b124      	cbz	r4, 80008e0 <iprintf+0x14>
 80008d6:	69a3      	ldr	r3, [r4, #24]
 80008d8:	b913      	cbnz	r3, 80008e0 <iprintf+0x14>
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f866 	bl	80009ac <__sinit>
 80008e0:	ab05      	add	r3, sp, #20
 80008e2:	9a04      	ldr	r2, [sp, #16]
 80008e4:	68a1      	ldr	r1, [r4, #8]
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	4620      	mov	r0, r4
 80008ea:	f000 f983 	bl	8000bf4 <_vfiprintf_r>
 80008ee:	b002      	add	sp, #8
 80008f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr
 80008f8:	20000000 	.word	0x20000000

080008fc <std>:
 80008fc:	2300      	movs	r3, #0
 80008fe:	b510      	push	{r4, lr}
 8000900:	4604      	mov	r4, r0
 8000902:	e9c0 3300 	strd	r3, r3, [r0]
 8000906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800090a:	6083      	str	r3, [r0, #8]
 800090c:	8181      	strh	r1, [r0, #12]
 800090e:	6643      	str	r3, [r0, #100]	; 0x64
 8000910:	81c2      	strh	r2, [r0, #14]
 8000912:	6183      	str	r3, [r0, #24]
 8000914:	4619      	mov	r1, r3
 8000916:	2208      	movs	r2, #8
 8000918:	305c      	adds	r0, #92	; 0x5c
 800091a:	f7ff ffcf 	bl	80008bc <memset>
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <std+0x38>)
 8000920:	6263      	str	r3, [r4, #36]	; 0x24
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <std+0x3c>)
 8000924:	62a3      	str	r3, [r4, #40]	; 0x28
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <std+0x40>)
 8000928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <std+0x44>)
 800092c:	6224      	str	r4, [r4, #32]
 800092e:	6323      	str	r3, [r4, #48]	; 0x30
 8000930:	bd10      	pop	{r4, pc}
 8000932:	bf00      	nop
 8000934:	0800119d 	.word	0x0800119d
 8000938:	080011bf 	.word	0x080011bf
 800093c:	080011f7 	.word	0x080011f7
 8000940:	0800121b 	.word	0x0800121b

08000944 <_cleanup_r>:
 8000944:	4901      	ldr	r1, [pc, #4]	; (800094c <_cleanup_r+0x8>)
 8000946:	f000 b8af 	b.w	8000aa8 <_fwalk_reent>
 800094a:	bf00      	nop
 800094c:	080014f5 	.word	0x080014f5

08000950 <__sfmoreglue>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	1e4a      	subs	r2, r1, #1
 8000954:	2568      	movs	r5, #104	; 0x68
 8000956:	4355      	muls	r5, r2
 8000958:	460e      	mov	r6, r1
 800095a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800095e:	f000 f8c5 	bl	8000aec <_malloc_r>
 8000962:	4604      	mov	r4, r0
 8000964:	b140      	cbz	r0, 8000978 <__sfmoreglue+0x28>
 8000966:	2100      	movs	r1, #0
 8000968:	e9c0 1600 	strd	r1, r6, [r0]
 800096c:	300c      	adds	r0, #12
 800096e:	60a0      	str	r0, [r4, #8]
 8000970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000974:	f7ff ffa2 	bl	80008bc <memset>
 8000978:	4620      	mov	r0, r4
 800097a:	bd70      	pop	{r4, r5, r6, pc}

0800097c <__sfp_lock_acquire>:
 800097c:	4801      	ldr	r0, [pc, #4]	; (8000984 <__sfp_lock_acquire+0x8>)
 800097e:	f000 b8b3 	b.w	8000ae8 <__retarget_lock_acquire_recursive>
 8000982:	bf00      	nop
 8000984:	20000098 	.word	0x20000098

08000988 <__sfp_lock_release>:
 8000988:	4801      	ldr	r0, [pc, #4]	; (8000990 <__sfp_lock_release+0x8>)
 800098a:	f000 b8ae 	b.w	8000aea <__retarget_lock_release_recursive>
 800098e:	bf00      	nop
 8000990:	20000098 	.word	0x20000098

08000994 <__sinit_lock_acquire>:
 8000994:	4801      	ldr	r0, [pc, #4]	; (800099c <__sinit_lock_acquire+0x8>)
 8000996:	f000 b8a7 	b.w	8000ae8 <__retarget_lock_acquire_recursive>
 800099a:	bf00      	nop
 800099c:	20000093 	.word	0x20000093

080009a0 <__sinit_lock_release>:
 80009a0:	4801      	ldr	r0, [pc, #4]	; (80009a8 <__sinit_lock_release+0x8>)
 80009a2:	f000 b8a2 	b.w	8000aea <__retarget_lock_release_recursive>
 80009a6:	bf00      	nop
 80009a8:	20000093 	.word	0x20000093

080009ac <__sinit>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4604      	mov	r4, r0
 80009b0:	f7ff fff0 	bl	8000994 <__sinit_lock_acquire>
 80009b4:	69a3      	ldr	r3, [r4, #24]
 80009b6:	b11b      	cbz	r3, 80009c0 <__sinit+0x14>
 80009b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009bc:	f7ff bff0 	b.w	80009a0 <__sinit_lock_release>
 80009c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80009c4:	6523      	str	r3, [r4, #80]	; 0x50
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <__sinit+0x68>)
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <__sinit+0x6c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	bf04      	itt	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	61a3      	streq	r3, [r4, #24]
 80009d6:	4620      	mov	r0, r4
 80009d8:	f000 f820 	bl	8000a1c <__sfp>
 80009dc:	6060      	str	r0, [r4, #4]
 80009de:	4620      	mov	r0, r4
 80009e0:	f000 f81c 	bl	8000a1c <__sfp>
 80009e4:	60a0      	str	r0, [r4, #8]
 80009e6:	4620      	mov	r0, r4
 80009e8:	f000 f818 	bl	8000a1c <__sfp>
 80009ec:	2200      	movs	r2, #0
 80009ee:	60e0      	str	r0, [r4, #12]
 80009f0:	2104      	movs	r1, #4
 80009f2:	6860      	ldr	r0, [r4, #4]
 80009f4:	f7ff ff82 	bl	80008fc <std>
 80009f8:	68a0      	ldr	r0, [r4, #8]
 80009fa:	2201      	movs	r2, #1
 80009fc:	2109      	movs	r1, #9
 80009fe:	f7ff ff7d 	bl	80008fc <std>
 8000a02:	68e0      	ldr	r0, [r4, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	2112      	movs	r1, #18
 8000a08:	f7ff ff78 	bl	80008fc <std>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61a3      	str	r3, [r4, #24]
 8000a10:	e7d2      	b.n	80009b8 <__sinit+0xc>
 8000a12:	bf00      	nop
 8000a14:	08001890 	.word	0x08001890
 8000a18:	08000945 	.word	0x08000945

08000a1c <__sfp>:
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	4607      	mov	r7, r0
 8000a20:	f7ff ffac 	bl	800097c <__sfp_lock_acquire>
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <__sfp+0x84>)
 8000a26:	681e      	ldr	r6, [r3, #0]
 8000a28:	69b3      	ldr	r3, [r6, #24]
 8000a2a:	b913      	cbnz	r3, 8000a32 <__sfp+0x16>
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	f7ff ffbd 	bl	80009ac <__sinit>
 8000a32:	3648      	adds	r6, #72	; 0x48
 8000a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	d503      	bpl.n	8000a44 <__sfp+0x28>
 8000a3c:	6833      	ldr	r3, [r6, #0]
 8000a3e:	b30b      	cbz	r3, 8000a84 <__sfp+0x68>
 8000a40:	6836      	ldr	r6, [r6, #0]
 8000a42:	e7f7      	b.n	8000a34 <__sfp+0x18>
 8000a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a48:	b9d5      	cbnz	r5, 8000a80 <__sfp+0x64>
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <__sfp+0x88>)
 8000a4c:	60e3      	str	r3, [r4, #12]
 8000a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a52:	6665      	str	r5, [r4, #100]	; 0x64
 8000a54:	f000 f847 	bl	8000ae6 <__retarget_lock_init_recursive>
 8000a58:	f7ff ff96 	bl	8000988 <__sfp_lock_release>
 8000a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a64:	6025      	str	r5, [r4, #0]
 8000a66:	61a5      	str	r5, [r4, #24]
 8000a68:	2208      	movs	r2, #8
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a70:	f7ff ff24 	bl	80008bc <memset>
 8000a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a80:	3468      	adds	r4, #104	; 0x68
 8000a82:	e7d9      	b.n	8000a38 <__sfp+0x1c>
 8000a84:	2104      	movs	r1, #4
 8000a86:	4638      	mov	r0, r7
 8000a88:	f7ff ff62 	bl	8000950 <__sfmoreglue>
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	6030      	str	r0, [r6, #0]
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1d5      	bne.n	8000a40 <__sfp+0x24>
 8000a94:	f7ff ff78 	bl	8000988 <__sfp_lock_release>
 8000a98:	230c      	movs	r3, #12
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	e7ee      	b.n	8000a7c <__sfp+0x60>
 8000a9e:	bf00      	nop
 8000aa0:	08001890 	.word	0x08001890
 8000aa4:	ffff0001 	.word	0xffff0001

08000aa8 <_fwalk_reent>:
 8000aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aac:	4606      	mov	r6, r0
 8000aae:	4688      	mov	r8, r1
 8000ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ab4:	2700      	movs	r7, #0
 8000ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000aba:	f1b9 0901 	subs.w	r9, r9, #1
 8000abe:	d505      	bpl.n	8000acc <_fwalk_reent+0x24>
 8000ac0:	6824      	ldr	r4, [r4, #0]
 8000ac2:	2c00      	cmp	r4, #0
 8000ac4:	d1f7      	bne.n	8000ab6 <_fwalk_reent+0xe>
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000acc:	89ab      	ldrh	r3, [r5, #12]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d907      	bls.n	8000ae2 <_fwalk_reent+0x3a>
 8000ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	d003      	beq.n	8000ae2 <_fwalk_reent+0x3a>
 8000ada:	4629      	mov	r1, r5
 8000adc:	4630      	mov	r0, r6
 8000ade:	47c0      	blx	r8
 8000ae0:	4307      	orrs	r7, r0
 8000ae2:	3568      	adds	r5, #104	; 0x68
 8000ae4:	e7e9      	b.n	8000aba <_fwalk_reent+0x12>

08000ae6 <__retarget_lock_init_recursive>:
 8000ae6:	4770      	bx	lr

08000ae8 <__retarget_lock_acquire_recursive>:
 8000ae8:	4770      	bx	lr

08000aea <__retarget_lock_release_recursive>:
 8000aea:	4770      	bx	lr

08000aec <_malloc_r>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	1ccd      	adds	r5, r1, #3
 8000af0:	f025 0503 	bic.w	r5, r5, #3
 8000af4:	3508      	adds	r5, #8
 8000af6:	2d0c      	cmp	r5, #12
 8000af8:	bf38      	it	cc
 8000afa:	250c      	movcc	r5, #12
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	4606      	mov	r6, r0
 8000b00:	db01      	blt.n	8000b06 <_malloc_r+0x1a>
 8000b02:	42a9      	cmp	r1, r5
 8000b04:	d903      	bls.n	8000b0e <_malloc_r+0x22>
 8000b06:	230c      	movs	r3, #12
 8000b08:	6033      	str	r3, [r6, #0]
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b0e:	f000 fda3 	bl	8001658 <__malloc_lock>
 8000b12:	4921      	ldr	r1, [pc, #132]	; (8000b98 <_malloc_r+0xac>)
 8000b14:	680a      	ldr	r2, [r1, #0]
 8000b16:	4614      	mov	r4, r2
 8000b18:	b99c      	cbnz	r4, 8000b42 <_malloc_r+0x56>
 8000b1a:	4f20      	ldr	r7, [pc, #128]	; (8000b9c <_malloc_r+0xb0>)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b923      	cbnz	r3, 8000b2a <_malloc_r+0x3e>
 8000b20:	4621      	mov	r1, r4
 8000b22:	4630      	mov	r0, r6
 8000b24:	f000 fb2a 	bl	800117c <_sbrk_r>
 8000b28:	6038      	str	r0, [r7, #0]
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	f000 fb25 	bl	800117c <_sbrk_r>
 8000b32:	1c43      	adds	r3, r0, #1
 8000b34:	d123      	bne.n	8000b7e <_malloc_r+0x92>
 8000b36:	230c      	movs	r3, #12
 8000b38:	6033      	str	r3, [r6, #0]
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f000 fd92 	bl	8001664 <__malloc_unlock>
 8000b40:	e7e3      	b.n	8000b0a <_malloc_r+0x1e>
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	1b5b      	subs	r3, r3, r5
 8000b46:	d417      	bmi.n	8000b78 <_malloc_r+0x8c>
 8000b48:	2b0b      	cmp	r3, #11
 8000b4a:	d903      	bls.n	8000b54 <_malloc_r+0x68>
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	441c      	add	r4, r3
 8000b50:	6025      	str	r5, [r4, #0]
 8000b52:	e004      	b.n	8000b5e <_malloc_r+0x72>
 8000b54:	6863      	ldr	r3, [r4, #4]
 8000b56:	42a2      	cmp	r2, r4
 8000b58:	bf0c      	ite	eq
 8000b5a:	600b      	streq	r3, [r1, #0]
 8000b5c:	6053      	strne	r3, [r2, #4]
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f000 fd80 	bl	8001664 <__malloc_unlock>
 8000b64:	f104 000b 	add.w	r0, r4, #11
 8000b68:	1d23      	adds	r3, r4, #4
 8000b6a:	f020 0007 	bic.w	r0, r0, #7
 8000b6e:	1ac2      	subs	r2, r0, r3
 8000b70:	d0cc      	beq.n	8000b0c <_malloc_r+0x20>
 8000b72:	1a1b      	subs	r3, r3, r0
 8000b74:	50a3      	str	r3, [r4, r2]
 8000b76:	e7c9      	b.n	8000b0c <_malloc_r+0x20>
 8000b78:	4622      	mov	r2, r4
 8000b7a:	6864      	ldr	r4, [r4, #4]
 8000b7c:	e7cc      	b.n	8000b18 <_malloc_r+0x2c>
 8000b7e:	1cc4      	adds	r4, r0, #3
 8000b80:	f024 0403 	bic.w	r4, r4, #3
 8000b84:	42a0      	cmp	r0, r4
 8000b86:	d0e3      	beq.n	8000b50 <_malloc_r+0x64>
 8000b88:	1a21      	subs	r1, r4, r0
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 faf6 	bl	800117c <_sbrk_r>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d1dd      	bne.n	8000b50 <_malloc_r+0x64>
 8000b94:	e7cf      	b.n	8000b36 <_malloc_r+0x4a>
 8000b96:	bf00      	nop
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	2000008c 	.word	0x2000008c

08000ba0 <__sfputc_r>:
 8000ba0:	6893      	ldr	r3, [r2, #8]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	b410      	push	{r4}
 8000ba8:	6093      	str	r3, [r2, #8]
 8000baa:	da08      	bge.n	8000bbe <__sfputc_r+0x1e>
 8000bac:	6994      	ldr	r4, [r2, #24]
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	db01      	blt.n	8000bb6 <__sfputc_r+0x16>
 8000bb2:	290a      	cmp	r1, #10
 8000bb4:	d103      	bne.n	8000bbe <__sfputc_r+0x1e>
 8000bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bba:	f000 bb33 	b.w	8001224 <__swbuf_r>
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	1c58      	adds	r0, r3, #1
 8000bc2:	6010      	str	r0, [r2, #0]
 8000bc4:	7019      	strb	r1, [r3, #0]
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <__sfputs_r>:
 8000bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd0:	4606      	mov	r6, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	4614      	mov	r4, r2
 8000bd6:	18d5      	adds	r5, r2, r3
 8000bd8:	42ac      	cmp	r4, r5
 8000bda:	d101      	bne.n	8000be0 <__sfputs_r+0x12>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e007      	b.n	8000bf0 <__sfputs_r+0x22>
 8000be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be4:	463a      	mov	r2, r7
 8000be6:	4630      	mov	r0, r6
 8000be8:	f7ff ffda 	bl	8000ba0 <__sfputc_r>
 8000bec:	1c43      	adds	r3, r0, #1
 8000bee:	d1f3      	bne.n	8000bd8 <__sfputs_r+0xa>
 8000bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bf4 <_vfiprintf_r>:
 8000bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf8:	460d      	mov	r5, r1
 8000bfa:	b09d      	sub	sp, #116	; 0x74
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	4698      	mov	r8, r3
 8000c00:	4606      	mov	r6, r0
 8000c02:	b118      	cbz	r0, 8000c0c <_vfiprintf_r+0x18>
 8000c04:	6983      	ldr	r3, [r0, #24]
 8000c06:	b90b      	cbnz	r3, 8000c0c <_vfiprintf_r+0x18>
 8000c08:	f7ff fed0 	bl	80009ac <__sinit>
 8000c0c:	4b89      	ldr	r3, [pc, #548]	; (8000e34 <_vfiprintf_r+0x240>)
 8000c0e:	429d      	cmp	r5, r3
 8000c10:	d11b      	bne.n	8000c4a <_vfiprintf_r+0x56>
 8000c12:	6875      	ldr	r5, [r6, #4]
 8000c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c16:	07d9      	lsls	r1, r3, #31
 8000c18:	d405      	bmi.n	8000c26 <_vfiprintf_r+0x32>
 8000c1a:	89ab      	ldrh	r3, [r5, #12]
 8000c1c:	059a      	lsls	r2, r3, #22
 8000c1e:	d402      	bmi.n	8000c26 <_vfiprintf_r+0x32>
 8000c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c22:	f7ff ff61 	bl	8000ae8 <__retarget_lock_acquire_recursive>
 8000c26:	89ab      	ldrh	r3, [r5, #12]
 8000c28:	071b      	lsls	r3, r3, #28
 8000c2a:	d501      	bpl.n	8000c30 <_vfiprintf_r+0x3c>
 8000c2c:	692b      	ldr	r3, [r5, #16]
 8000c2e:	b9eb      	cbnz	r3, 8000c6c <_vfiprintf_r+0x78>
 8000c30:	4629      	mov	r1, r5
 8000c32:	4630      	mov	r0, r6
 8000c34:	f000 fb5a 	bl	80012ec <__swsetup_r>
 8000c38:	b1c0      	cbz	r0, 8000c6c <_vfiprintf_r+0x78>
 8000c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c3c:	07dc      	lsls	r4, r3, #31
 8000c3e:	d50e      	bpl.n	8000c5e <_vfiprintf_r+0x6a>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	b01d      	add	sp, #116	; 0x74
 8000c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4a:	4b7b      	ldr	r3, [pc, #492]	; (8000e38 <_vfiprintf_r+0x244>)
 8000c4c:	429d      	cmp	r5, r3
 8000c4e:	d101      	bne.n	8000c54 <_vfiprintf_r+0x60>
 8000c50:	68b5      	ldr	r5, [r6, #8]
 8000c52:	e7df      	b.n	8000c14 <_vfiprintf_r+0x20>
 8000c54:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <_vfiprintf_r+0x248>)
 8000c56:	429d      	cmp	r5, r3
 8000c58:	bf08      	it	eq
 8000c5a:	68f5      	ldreq	r5, [r6, #12]
 8000c5c:	e7da      	b.n	8000c14 <_vfiprintf_r+0x20>
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	0598      	lsls	r0, r3, #22
 8000c62:	d4ed      	bmi.n	8000c40 <_vfiprintf_r+0x4c>
 8000c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c66:	f7ff ff40 	bl	8000aea <__retarget_lock_release_recursive>
 8000c6a:	e7e9      	b.n	8000c40 <_vfiprintf_r+0x4c>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c70:	2320      	movs	r3, #32
 8000c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c7a:	2330      	movs	r3, #48	; 0x30
 8000c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e40 <_vfiprintf_r+0x24c>
 8000c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c84:	f04f 0901 	mov.w	r9, #1
 8000c88:	4623      	mov	r3, r4
 8000c8a:	469a      	mov	sl, r3
 8000c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c90:	b10a      	cbz	r2, 8000c96 <_vfiprintf_r+0xa2>
 8000c92:	2a25      	cmp	r2, #37	; 0x25
 8000c94:	d1f9      	bne.n	8000c8a <_vfiprintf_r+0x96>
 8000c96:	ebba 0b04 	subs.w	fp, sl, r4
 8000c9a:	d00b      	beq.n	8000cb4 <_vfiprintf_r+0xc0>
 8000c9c:	465b      	mov	r3, fp
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f7ff ff93 	bl	8000bce <__sfputs_r>
 8000ca8:	3001      	adds	r0, #1
 8000caa:	f000 80aa 	beq.w	8000e02 <_vfiprintf_r+0x20e>
 8000cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cb0:	445a      	add	r2, fp
 8000cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8000cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 80a2 	beq.w	8000e02 <_vfiprintf_r+0x20e>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cc8:	f10a 0a01 	add.w	sl, sl, #1
 8000ccc:	9304      	str	r3, [sp, #16]
 8000cce:	9307      	str	r3, [sp, #28]
 8000cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8000cd6:	4654      	mov	r4, sl
 8000cd8:	2205      	movs	r2, #5
 8000cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cde:	4858      	ldr	r0, [pc, #352]	; (8000e40 <_vfiprintf_r+0x24c>)
 8000ce0:	f7ff fa96 	bl	8000210 <memchr>
 8000ce4:	9a04      	ldr	r2, [sp, #16]
 8000ce6:	b9d8      	cbnz	r0, 8000d20 <_vfiprintf_r+0x12c>
 8000ce8:	06d1      	lsls	r1, r2, #27
 8000cea:	bf44      	itt	mi
 8000cec:	2320      	movmi	r3, #32
 8000cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cf2:	0713      	lsls	r3, r2, #28
 8000cf4:	bf44      	itt	mi
 8000cf6:	232b      	movmi	r3, #43	; 0x2b
 8000cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8000d00:	2b2a      	cmp	r3, #42	; 0x2a
 8000d02:	d015      	beq.n	8000d30 <_vfiprintf_r+0x13c>
 8000d04:	9a07      	ldr	r2, [sp, #28]
 8000d06:	4654      	mov	r4, sl
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f04f 0c0a 	mov.w	ip, #10
 8000d0e:	4621      	mov	r1, r4
 8000d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d14:	3b30      	subs	r3, #48	; 0x30
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	d94e      	bls.n	8000db8 <_vfiprintf_r+0x1c4>
 8000d1a:	b1b0      	cbz	r0, 8000d4a <_vfiprintf_r+0x156>
 8000d1c:	9207      	str	r2, [sp, #28]
 8000d1e:	e014      	b.n	8000d4a <_vfiprintf_r+0x156>
 8000d20:	eba0 0308 	sub.w	r3, r0, r8
 8000d24:	fa09 f303 	lsl.w	r3, r9, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	9304      	str	r3, [sp, #16]
 8000d2c:	46a2      	mov	sl, r4
 8000d2e:	e7d2      	b.n	8000cd6 <_vfiprintf_r+0xe2>
 8000d30:	9b03      	ldr	r3, [sp, #12]
 8000d32:	1d19      	adds	r1, r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	9103      	str	r1, [sp, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bfbb      	ittet	lt
 8000d3c:	425b      	neglt	r3, r3
 8000d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d42:	9307      	strge	r3, [sp, #28]
 8000d44:	9307      	strlt	r3, [sp, #28]
 8000d46:	bfb8      	it	lt
 8000d48:	9204      	strlt	r2, [sp, #16]
 8000d4a:	7823      	ldrb	r3, [r4, #0]
 8000d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d4e:	d10c      	bne.n	8000d6a <_vfiprintf_r+0x176>
 8000d50:	7863      	ldrb	r3, [r4, #1]
 8000d52:	2b2a      	cmp	r3, #42	; 0x2a
 8000d54:	d135      	bne.n	8000dc2 <_vfiprintf_r+0x1ce>
 8000d56:	9b03      	ldr	r3, [sp, #12]
 8000d58:	1d1a      	adds	r2, r3, #4
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	9203      	str	r2, [sp, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bfb8      	it	lt
 8000d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d66:	3402      	adds	r4, #2
 8000d68:	9305      	str	r3, [sp, #20]
 8000d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e50 <_vfiprintf_r+0x25c>
 8000d6e:	7821      	ldrb	r1, [r4, #0]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4650      	mov	r0, sl
 8000d74:	f7ff fa4c 	bl	8000210 <memchr>
 8000d78:	b140      	cbz	r0, 8000d8c <_vfiprintf_r+0x198>
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	eba0 000a 	sub.w	r0, r0, sl
 8000d80:	fa03 f000 	lsl.w	r0, r3, r0
 8000d84:	9b04      	ldr	r3, [sp, #16]
 8000d86:	4303      	orrs	r3, r0
 8000d88:	3401      	adds	r4, #1
 8000d8a:	9304      	str	r3, [sp, #16]
 8000d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d90:	482c      	ldr	r0, [pc, #176]	; (8000e44 <_vfiprintf_r+0x250>)
 8000d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d96:	2206      	movs	r2, #6
 8000d98:	f7ff fa3a 	bl	8000210 <memchr>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d03f      	beq.n	8000e20 <_vfiprintf_r+0x22c>
 8000da0:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <_vfiprintf_r+0x254>)
 8000da2:	bb1b      	cbnz	r3, 8000dec <_vfiprintf_r+0x1f8>
 8000da4:	9b03      	ldr	r3, [sp, #12]
 8000da6:	3307      	adds	r3, #7
 8000da8:	f023 0307 	bic.w	r3, r3, #7
 8000dac:	3308      	adds	r3, #8
 8000dae:	9303      	str	r3, [sp, #12]
 8000db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000db2:	443b      	add	r3, r7
 8000db4:	9309      	str	r3, [sp, #36]	; 0x24
 8000db6:	e767      	b.n	8000c88 <_vfiprintf_r+0x94>
 8000db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	e7a5      	b.n	8000d0e <_vfiprintf_r+0x11a>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	3401      	adds	r4, #1
 8000dc6:	9305      	str	r3, [sp, #20]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0c0a 	mov.w	ip, #10
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dd4:	3a30      	subs	r2, #48	; 0x30
 8000dd6:	2a09      	cmp	r2, #9
 8000dd8:	d903      	bls.n	8000de2 <_vfiprintf_r+0x1ee>
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0c5      	beq.n	8000d6a <_vfiprintf_r+0x176>
 8000dde:	9105      	str	r1, [sp, #20]
 8000de0:	e7c3      	b.n	8000d6a <_vfiprintf_r+0x176>
 8000de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000de6:	4604      	mov	r4, r0
 8000de8:	2301      	movs	r3, #1
 8000dea:	e7f0      	b.n	8000dce <_vfiprintf_r+0x1da>
 8000dec:	ab03      	add	r3, sp, #12
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	462a      	mov	r2, r5
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <_vfiprintf_r+0x258>)
 8000df4:	a904      	add	r1, sp, #16
 8000df6:	4630      	mov	r0, r6
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	1c78      	adds	r0, r7, #1
 8000e00:	d1d6      	bne.n	8000db0 <_vfiprintf_r+0x1bc>
 8000e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e04:	07d9      	lsls	r1, r3, #31
 8000e06:	d405      	bmi.n	8000e14 <_vfiprintf_r+0x220>
 8000e08:	89ab      	ldrh	r3, [r5, #12]
 8000e0a:	059a      	lsls	r2, r3, #22
 8000e0c:	d402      	bmi.n	8000e14 <_vfiprintf_r+0x220>
 8000e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e10:	f7ff fe6b 	bl	8000aea <__retarget_lock_release_recursive>
 8000e14:	89ab      	ldrh	r3, [r5, #12]
 8000e16:	065b      	lsls	r3, r3, #25
 8000e18:	f53f af12 	bmi.w	8000c40 <_vfiprintf_r+0x4c>
 8000e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e1e:	e711      	b.n	8000c44 <_vfiprintf_r+0x50>
 8000e20:	ab03      	add	r3, sp, #12
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	462a      	mov	r2, r5
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <_vfiprintf_r+0x258>)
 8000e28:	a904      	add	r1, sp, #16
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f000 f880 	bl	8000f30 <_printf_i>
 8000e30:	e7e4      	b.n	8000dfc <_vfiprintf_r+0x208>
 8000e32:	bf00      	nop
 8000e34:	080018b4 	.word	0x080018b4
 8000e38:	080018d4 	.word	0x080018d4
 8000e3c:	08001894 	.word	0x08001894
 8000e40:	080018f4 	.word	0x080018f4
 8000e44:	080018fe 	.word	0x080018fe
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	08000bcf 	.word	0x08000bcf
 8000e50:	080018fa 	.word	0x080018fa

08000e54 <_printf_common>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	4616      	mov	r6, r2
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	688a      	ldr	r2, [r1, #8]
 8000e5e:	690b      	ldr	r3, [r1, #16]
 8000e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e64:	4293      	cmp	r3, r2
 8000e66:	bfb8      	it	lt
 8000e68:	4613      	movlt	r3, r2
 8000e6a:	6033      	str	r3, [r6, #0]
 8000e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e70:	4607      	mov	r7, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	b10a      	cbz	r2, 8000e7a <_printf_common+0x26>
 8000e76:	3301      	adds	r3, #1
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	0699      	lsls	r1, r3, #26
 8000e7e:	bf42      	ittt	mi
 8000e80:	6833      	ldrmi	r3, [r6, #0]
 8000e82:	3302      	addmi	r3, #2
 8000e84:	6033      	strmi	r3, [r6, #0]
 8000e86:	6825      	ldr	r5, [r4, #0]
 8000e88:	f015 0506 	ands.w	r5, r5, #6
 8000e8c:	d106      	bne.n	8000e9c <_printf_common+0x48>
 8000e8e:	f104 0a19 	add.w	sl, r4, #25
 8000e92:	68e3      	ldr	r3, [r4, #12]
 8000e94:	6832      	ldr	r2, [r6, #0]
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	dc26      	bgt.n	8000eea <_printf_common+0x96>
 8000e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ea0:	1e13      	subs	r3, r2, #0
 8000ea2:	6822      	ldr	r2, [r4, #0]
 8000ea4:	bf18      	it	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	0692      	lsls	r2, r2, #26
 8000eaa:	d42b      	bmi.n	8000f04 <_printf_common+0xb0>
 8000eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	47c0      	blx	r8
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d01e      	beq.n	8000ef8 <_printf_common+0xa4>
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	68e5      	ldr	r5, [r4, #12]
 8000ebe:	6832      	ldr	r2, [r6, #0]
 8000ec0:	f003 0306 	and.w	r3, r3, #6
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	bf08      	it	eq
 8000ec8:	1aad      	subeq	r5, r5, r2
 8000eca:	68a3      	ldr	r3, [r4, #8]
 8000ecc:	6922      	ldr	r2, [r4, #16]
 8000ece:	bf0c      	ite	eq
 8000ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ed4:	2500      	movne	r5, #0
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bfc4      	itt	gt
 8000eda:	1a9b      	subgt	r3, r3, r2
 8000edc:	18ed      	addgt	r5, r5, r3
 8000ede:	2600      	movs	r6, #0
 8000ee0:	341a      	adds	r4, #26
 8000ee2:	42b5      	cmp	r5, r6
 8000ee4:	d11a      	bne.n	8000f1c <_printf_common+0xc8>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e008      	b.n	8000efc <_printf_common+0xa8>
 8000eea:	2301      	movs	r3, #1
 8000eec:	4652      	mov	r2, sl
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	47c0      	blx	r8
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d103      	bne.n	8000f00 <_printf_common+0xac>
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f00:	3501      	adds	r5, #1
 8000f02:	e7c6      	b.n	8000e92 <_printf_common+0x3e>
 8000f04:	18e1      	adds	r1, r4, r3
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	2030      	movs	r0, #48	; 0x30
 8000f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f0e:	4422      	add	r2, r4
 8000f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f18:	3302      	adds	r3, #2
 8000f1a:	e7c7      	b.n	8000eac <_printf_common+0x58>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	4622      	mov	r2, r4
 8000f20:	4649      	mov	r1, r9
 8000f22:	4638      	mov	r0, r7
 8000f24:	47c0      	blx	r8
 8000f26:	3001      	adds	r0, #1
 8000f28:	d0e6      	beq.n	8000ef8 <_printf_common+0xa4>
 8000f2a:	3601      	adds	r6, #1
 8000f2c:	e7d9      	b.n	8000ee2 <_printf_common+0x8e>
	...

08000f30 <_printf_i>:
 8000f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	460c      	mov	r4, r1
 8000f36:	4691      	mov	r9, r2
 8000f38:	7e27      	ldrb	r7, [r4, #24]
 8000f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000f3c:	2f78      	cmp	r7, #120	; 0x78
 8000f3e:	4680      	mov	r8, r0
 8000f40:	469a      	mov	sl, r3
 8000f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f46:	d807      	bhi.n	8000f58 <_printf_i+0x28>
 8000f48:	2f62      	cmp	r7, #98	; 0x62
 8000f4a:	d80a      	bhi.n	8000f62 <_printf_i+0x32>
 8000f4c:	2f00      	cmp	r7, #0
 8000f4e:	f000 80d8 	beq.w	8001102 <_printf_i+0x1d2>
 8000f52:	2f58      	cmp	r7, #88	; 0x58
 8000f54:	f000 80a3 	beq.w	800109e <_printf_i+0x16e>
 8000f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f60:	e03a      	b.n	8000fd8 <_printf_i+0xa8>
 8000f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f66:	2b15      	cmp	r3, #21
 8000f68:	d8f6      	bhi.n	8000f58 <_printf_i+0x28>
 8000f6a:	a001      	add	r0, pc, #4	; (adr r0, 8000f70 <_printf_i+0x40>)
 8000f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000f70:	08000fc9 	.word	0x08000fc9
 8000f74:	08000fdd 	.word	0x08000fdd
 8000f78:	08000f59 	.word	0x08000f59
 8000f7c:	08000f59 	.word	0x08000f59
 8000f80:	08000f59 	.word	0x08000f59
 8000f84:	08000f59 	.word	0x08000f59
 8000f88:	08000fdd 	.word	0x08000fdd
 8000f8c:	08000f59 	.word	0x08000f59
 8000f90:	08000f59 	.word	0x08000f59
 8000f94:	08000f59 	.word	0x08000f59
 8000f98:	08000f59 	.word	0x08000f59
 8000f9c:	080010e9 	.word	0x080010e9
 8000fa0:	0800100d 	.word	0x0800100d
 8000fa4:	080010cb 	.word	0x080010cb
 8000fa8:	08000f59 	.word	0x08000f59
 8000fac:	08000f59 	.word	0x08000f59
 8000fb0:	0800110b 	.word	0x0800110b
 8000fb4:	08000f59 	.word	0x08000f59
 8000fb8:	0800100d 	.word	0x0800100d
 8000fbc:	08000f59 	.word	0x08000f59
 8000fc0:	08000f59 	.word	0x08000f59
 8000fc4:	080010d3 	.word	0x080010d3
 8000fc8:	680b      	ldr	r3, [r1, #0]
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	600a      	str	r2, [r1, #0]
 8000fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0a3      	b.n	8001124 <_printf_i+0x1f4>
 8000fdc:	6825      	ldr	r5, [r4, #0]
 8000fde:	6808      	ldr	r0, [r1, #0]
 8000fe0:	062e      	lsls	r6, r5, #24
 8000fe2:	f100 0304 	add.w	r3, r0, #4
 8000fe6:	d50a      	bpl.n	8000ffe <_printf_i+0xce>
 8000fe8:	6805      	ldr	r5, [r0, #0]
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	2d00      	cmp	r5, #0
 8000fee:	da03      	bge.n	8000ff8 <_printf_i+0xc8>
 8000ff0:	232d      	movs	r3, #45	; 0x2d
 8000ff2:	426d      	negs	r5, r5
 8000ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ff8:	485e      	ldr	r0, [pc, #376]	; (8001174 <_printf_i+0x244>)
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	e019      	b.n	8001032 <_printf_i+0x102>
 8000ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001002:	6805      	ldr	r5, [r0, #0]
 8001004:	600b      	str	r3, [r1, #0]
 8001006:	bf18      	it	ne
 8001008:	b22d      	sxthne	r5, r5
 800100a:	e7ef      	b.n	8000fec <_printf_i+0xbc>
 800100c:	680b      	ldr	r3, [r1, #0]
 800100e:	6825      	ldr	r5, [r4, #0]
 8001010:	1d18      	adds	r0, r3, #4
 8001012:	6008      	str	r0, [r1, #0]
 8001014:	0628      	lsls	r0, r5, #24
 8001016:	d501      	bpl.n	800101c <_printf_i+0xec>
 8001018:	681d      	ldr	r5, [r3, #0]
 800101a:	e002      	b.n	8001022 <_printf_i+0xf2>
 800101c:	0669      	lsls	r1, r5, #25
 800101e:	d5fb      	bpl.n	8001018 <_printf_i+0xe8>
 8001020:	881d      	ldrh	r5, [r3, #0]
 8001022:	4854      	ldr	r0, [pc, #336]	; (8001174 <_printf_i+0x244>)
 8001024:	2f6f      	cmp	r7, #111	; 0x6f
 8001026:	bf0c      	ite	eq
 8001028:	2308      	moveq	r3, #8
 800102a:	230a      	movne	r3, #10
 800102c:	2100      	movs	r1, #0
 800102e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001032:	6866      	ldr	r6, [r4, #4]
 8001034:	60a6      	str	r6, [r4, #8]
 8001036:	2e00      	cmp	r6, #0
 8001038:	bfa2      	ittt	ge
 800103a:	6821      	ldrge	r1, [r4, #0]
 800103c:	f021 0104 	bicge.w	r1, r1, #4
 8001040:	6021      	strge	r1, [r4, #0]
 8001042:	b90d      	cbnz	r5, 8001048 <_printf_i+0x118>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d04d      	beq.n	80010e4 <_printf_i+0x1b4>
 8001048:	4616      	mov	r6, r2
 800104a:	fbb5 f1f3 	udiv	r1, r5, r3
 800104e:	fb03 5711 	mls	r7, r3, r1, r5
 8001052:	5dc7      	ldrb	r7, [r0, r7]
 8001054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001058:	462f      	mov	r7, r5
 800105a:	42bb      	cmp	r3, r7
 800105c:	460d      	mov	r5, r1
 800105e:	d9f4      	bls.n	800104a <_printf_i+0x11a>
 8001060:	2b08      	cmp	r3, #8
 8001062:	d10b      	bne.n	800107c <_printf_i+0x14c>
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	07df      	lsls	r7, r3, #31
 8001068:	d508      	bpl.n	800107c <_printf_i+0x14c>
 800106a:	6923      	ldr	r3, [r4, #16]
 800106c:	6861      	ldr	r1, [r4, #4]
 800106e:	4299      	cmp	r1, r3
 8001070:	bfde      	ittt	le
 8001072:	2330      	movle	r3, #48	; 0x30
 8001074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800107c:	1b92      	subs	r2, r2, r6
 800107e:	6122      	str	r2, [r4, #16]
 8001080:	f8cd a000 	str.w	sl, [sp]
 8001084:	464b      	mov	r3, r9
 8001086:	aa03      	add	r2, sp, #12
 8001088:	4621      	mov	r1, r4
 800108a:	4640      	mov	r0, r8
 800108c:	f7ff fee2 	bl	8000e54 <_printf_common>
 8001090:	3001      	adds	r0, #1
 8001092:	d14c      	bne.n	800112e <_printf_i+0x1fe>
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	b004      	add	sp, #16
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	4835      	ldr	r0, [pc, #212]	; (8001174 <_printf_i+0x244>)
 80010a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	680e      	ldr	r6, [r1, #0]
 80010a8:	061f      	lsls	r7, r3, #24
 80010aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80010ae:	600e      	str	r6, [r1, #0]
 80010b0:	d514      	bpl.n	80010dc <_printf_i+0x1ac>
 80010b2:	07d9      	lsls	r1, r3, #31
 80010b4:	bf44      	itt	mi
 80010b6:	f043 0320 	orrmi.w	r3, r3, #32
 80010ba:	6023      	strmi	r3, [r4, #0]
 80010bc:	b91d      	cbnz	r5, 80010c6 <_printf_i+0x196>
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f023 0320 	bic.w	r3, r3, #32
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	2310      	movs	r3, #16
 80010c8:	e7b0      	b.n	800102c <_printf_i+0xfc>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f043 0320 	orr.w	r3, r3, #32
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	2378      	movs	r3, #120	; 0x78
 80010d4:	4828      	ldr	r0, [pc, #160]	; (8001178 <_printf_i+0x248>)
 80010d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010da:	e7e3      	b.n	80010a4 <_printf_i+0x174>
 80010dc:	065e      	lsls	r6, r3, #25
 80010de:	bf48      	it	mi
 80010e0:	b2ad      	uxthmi	r5, r5
 80010e2:	e7e6      	b.n	80010b2 <_printf_i+0x182>
 80010e4:	4616      	mov	r6, r2
 80010e6:	e7bb      	b.n	8001060 <_printf_i+0x130>
 80010e8:	680b      	ldr	r3, [r1, #0]
 80010ea:	6826      	ldr	r6, [r4, #0]
 80010ec:	6960      	ldr	r0, [r4, #20]
 80010ee:	1d1d      	adds	r5, r3, #4
 80010f0:	600d      	str	r5, [r1, #0]
 80010f2:	0635      	lsls	r5, r6, #24
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	d501      	bpl.n	80010fc <_printf_i+0x1cc>
 80010f8:	6018      	str	r0, [r3, #0]
 80010fa:	e002      	b.n	8001102 <_printf_i+0x1d2>
 80010fc:	0671      	lsls	r1, r6, #25
 80010fe:	d5fb      	bpl.n	80010f8 <_printf_i+0x1c8>
 8001100:	8018      	strh	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	6123      	str	r3, [r4, #16]
 8001106:	4616      	mov	r6, r2
 8001108:	e7ba      	b.n	8001080 <_printf_i+0x150>
 800110a:	680b      	ldr	r3, [r1, #0]
 800110c:	1d1a      	adds	r2, r3, #4
 800110e:	600a      	str	r2, [r1, #0]
 8001110:	681e      	ldr	r6, [r3, #0]
 8001112:	6862      	ldr	r2, [r4, #4]
 8001114:	2100      	movs	r1, #0
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff f87a 	bl	8000210 <memchr>
 800111c:	b108      	cbz	r0, 8001122 <_printf_i+0x1f2>
 800111e:	1b80      	subs	r0, r0, r6
 8001120:	6060      	str	r0, [r4, #4]
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	6123      	str	r3, [r4, #16]
 8001126:	2300      	movs	r3, #0
 8001128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800112c:	e7a8      	b.n	8001080 <_printf_i+0x150>
 800112e:	6923      	ldr	r3, [r4, #16]
 8001130:	4632      	mov	r2, r6
 8001132:	4649      	mov	r1, r9
 8001134:	4640      	mov	r0, r8
 8001136:	47d0      	blx	sl
 8001138:	3001      	adds	r0, #1
 800113a:	d0ab      	beq.n	8001094 <_printf_i+0x164>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	079b      	lsls	r3, r3, #30
 8001140:	d413      	bmi.n	800116a <_printf_i+0x23a>
 8001142:	68e0      	ldr	r0, [r4, #12]
 8001144:	9b03      	ldr	r3, [sp, #12]
 8001146:	4298      	cmp	r0, r3
 8001148:	bfb8      	it	lt
 800114a:	4618      	movlt	r0, r3
 800114c:	e7a4      	b.n	8001098 <_printf_i+0x168>
 800114e:	2301      	movs	r3, #1
 8001150:	4632      	mov	r2, r6
 8001152:	4649      	mov	r1, r9
 8001154:	4640      	mov	r0, r8
 8001156:	47d0      	blx	sl
 8001158:	3001      	adds	r0, #1
 800115a:	d09b      	beq.n	8001094 <_printf_i+0x164>
 800115c:	3501      	adds	r5, #1
 800115e:	68e3      	ldr	r3, [r4, #12]
 8001160:	9903      	ldr	r1, [sp, #12]
 8001162:	1a5b      	subs	r3, r3, r1
 8001164:	42ab      	cmp	r3, r5
 8001166:	dcf2      	bgt.n	800114e <_printf_i+0x21e>
 8001168:	e7eb      	b.n	8001142 <_printf_i+0x212>
 800116a:	2500      	movs	r5, #0
 800116c:	f104 0619 	add.w	r6, r4, #25
 8001170:	e7f5      	b.n	800115e <_printf_i+0x22e>
 8001172:	bf00      	nop
 8001174:	08001905 	.word	0x08001905
 8001178:	08001916 	.word	0x08001916

0800117c <_sbrk_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4d06      	ldr	r5, [pc, #24]	; (8001198 <_sbrk_r+0x1c>)
 8001180:	2300      	movs	r3, #0
 8001182:	4604      	mov	r4, r0
 8001184:	4608      	mov	r0, r1
 8001186:	602b      	str	r3, [r5, #0]
 8001188:	f7ff fa80 	bl	800068c <_sbrk>
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	d102      	bne.n	8001196 <_sbrk_r+0x1a>
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	b103      	cbz	r3, 8001196 <_sbrk_r+0x1a>
 8001194:	6023      	str	r3, [r4, #0]
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	2000009c 	.word	0x2000009c

0800119c <__sread>:
 800119c:	b510      	push	{r4, lr}
 800119e:	460c      	mov	r4, r1
 80011a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a4:	f000 fab4 	bl	8001710 <_read_r>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	bfab      	itete	ge
 80011ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011ae:	89a3      	ldrhlt	r3, [r4, #12]
 80011b0:	181b      	addge	r3, r3, r0
 80011b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011b6:	bfac      	ite	ge
 80011b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80011ba:	81a3      	strhlt	r3, [r4, #12]
 80011bc:	bd10      	pop	{r4, pc}

080011be <__swrite>:
 80011be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c2:	461f      	mov	r7, r3
 80011c4:	898b      	ldrh	r3, [r1, #12]
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	4605      	mov	r5, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4616      	mov	r6, r2
 80011ce:	d505      	bpl.n	80011dc <__swrite+0x1e>
 80011d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d4:	2302      	movs	r3, #2
 80011d6:	2200      	movs	r2, #0
 80011d8:	f000 f9c8 	bl	800156c <_lseek_r>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011e6:	81a3      	strh	r3, [r4, #12]
 80011e8:	4632      	mov	r2, r6
 80011ea:	463b      	mov	r3, r7
 80011ec:	4628      	mov	r0, r5
 80011ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011f2:	f000 b869 	b.w	80012c8 <_write_r>

080011f6 <__sseek>:
 80011f6:	b510      	push	{r4, lr}
 80011f8:	460c      	mov	r4, r1
 80011fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011fe:	f000 f9b5 	bl	800156c <_lseek_r>
 8001202:	1c43      	adds	r3, r0, #1
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	bf15      	itete	ne
 8001208:	6560      	strne	r0, [r4, #84]	; 0x54
 800120a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800120e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001212:	81a3      	strheq	r3, [r4, #12]
 8001214:	bf18      	it	ne
 8001216:	81a3      	strhne	r3, [r4, #12]
 8001218:	bd10      	pop	{r4, pc}

0800121a <__sclose>:
 800121a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800121e:	f000 b8d3 	b.w	80013c8 <_close_r>
	...

08001224 <__swbuf_r>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	460e      	mov	r6, r1
 8001228:	4614      	mov	r4, r2
 800122a:	4605      	mov	r5, r0
 800122c:	b118      	cbz	r0, 8001236 <__swbuf_r+0x12>
 800122e:	6983      	ldr	r3, [r0, #24]
 8001230:	b90b      	cbnz	r3, 8001236 <__swbuf_r+0x12>
 8001232:	f7ff fbbb 	bl	80009ac <__sinit>
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <__swbuf_r+0x98>)
 8001238:	429c      	cmp	r4, r3
 800123a:	d12b      	bne.n	8001294 <__swbuf_r+0x70>
 800123c:	686c      	ldr	r4, [r5, #4]
 800123e:	69a3      	ldr	r3, [r4, #24]
 8001240:	60a3      	str	r3, [r4, #8]
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	071a      	lsls	r2, r3, #28
 8001246:	d52f      	bpl.n	80012a8 <__swbuf_r+0x84>
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	b36b      	cbz	r3, 80012a8 <__swbuf_r+0x84>
 800124c:	6923      	ldr	r3, [r4, #16]
 800124e:	6820      	ldr	r0, [r4, #0]
 8001250:	1ac0      	subs	r0, r0, r3
 8001252:	6963      	ldr	r3, [r4, #20]
 8001254:	b2f6      	uxtb	r6, r6
 8001256:	4283      	cmp	r3, r0
 8001258:	4637      	mov	r7, r6
 800125a:	dc04      	bgt.n	8001266 <__swbuf_r+0x42>
 800125c:	4621      	mov	r1, r4
 800125e:	4628      	mov	r0, r5
 8001260:	f000 f948 	bl	80014f4 <_fflush_r>
 8001264:	bb30      	cbnz	r0, 80012b4 <__swbuf_r+0x90>
 8001266:	68a3      	ldr	r3, [r4, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60a3      	str	r3, [r4, #8]
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	6022      	str	r2, [r4, #0]
 8001272:	701e      	strb	r6, [r3, #0]
 8001274:	6963      	ldr	r3, [r4, #20]
 8001276:	3001      	adds	r0, #1
 8001278:	4283      	cmp	r3, r0
 800127a:	d004      	beq.n	8001286 <__swbuf_r+0x62>
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	07db      	lsls	r3, r3, #31
 8001280:	d506      	bpl.n	8001290 <__swbuf_r+0x6c>
 8001282:	2e0a      	cmp	r6, #10
 8001284:	d104      	bne.n	8001290 <__swbuf_r+0x6c>
 8001286:	4621      	mov	r1, r4
 8001288:	4628      	mov	r0, r5
 800128a:	f000 f933 	bl	80014f4 <_fflush_r>
 800128e:	b988      	cbnz	r0, 80012b4 <__swbuf_r+0x90>
 8001290:	4638      	mov	r0, r7
 8001292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <__swbuf_r+0x9c>)
 8001296:	429c      	cmp	r4, r3
 8001298:	d101      	bne.n	800129e <__swbuf_r+0x7a>
 800129a:	68ac      	ldr	r4, [r5, #8]
 800129c:	e7cf      	b.n	800123e <__swbuf_r+0x1a>
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <__swbuf_r+0xa0>)
 80012a0:	429c      	cmp	r4, r3
 80012a2:	bf08      	it	eq
 80012a4:	68ec      	ldreq	r4, [r5, #12]
 80012a6:	e7ca      	b.n	800123e <__swbuf_r+0x1a>
 80012a8:	4621      	mov	r1, r4
 80012aa:	4628      	mov	r0, r5
 80012ac:	f000 f81e 	bl	80012ec <__swsetup_r>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d0cb      	beq.n	800124c <__swbuf_r+0x28>
 80012b4:	f04f 37ff 	mov.w	r7, #4294967295
 80012b8:	e7ea      	b.n	8001290 <__swbuf_r+0x6c>
 80012ba:	bf00      	nop
 80012bc:	080018b4 	.word	0x080018b4
 80012c0:	080018d4 	.word	0x080018d4
 80012c4:	08001894 	.word	0x08001894

080012c8 <_write_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d07      	ldr	r5, [pc, #28]	; (80012e8 <_write_r+0x20>)
 80012cc:	4604      	mov	r4, r0
 80012ce:	4608      	mov	r0, r1
 80012d0:	4611      	mov	r1, r2
 80012d2:	2200      	movs	r2, #0
 80012d4:	602a      	str	r2, [r5, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	f7ff f987 	bl	80005ea <_write>
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	d102      	bne.n	80012e6 <_write_r+0x1e>
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	b103      	cbz	r3, 80012e6 <_write_r+0x1e>
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
 80012e8:	2000009c 	.word	0x2000009c

080012ec <__swsetup_r>:
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <__swsetup_r+0xcc>)
 80012ee:	b570      	push	{r4, r5, r6, lr}
 80012f0:	681d      	ldr	r5, [r3, #0]
 80012f2:	4606      	mov	r6, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	b125      	cbz	r5, 8001302 <__swsetup_r+0x16>
 80012f8:	69ab      	ldr	r3, [r5, #24]
 80012fa:	b913      	cbnz	r3, 8001302 <__swsetup_r+0x16>
 80012fc:	4628      	mov	r0, r5
 80012fe:	f7ff fb55 	bl	80009ac <__sinit>
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <__swsetup_r+0xd0>)
 8001304:	429c      	cmp	r4, r3
 8001306:	d10f      	bne.n	8001328 <__swsetup_r+0x3c>
 8001308:	686c      	ldr	r4, [r5, #4]
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001310:	0719      	lsls	r1, r3, #28
 8001312:	d42c      	bmi.n	800136e <__swsetup_r+0x82>
 8001314:	06dd      	lsls	r5, r3, #27
 8001316:	d411      	bmi.n	800133c <__swsetup_r+0x50>
 8001318:	2309      	movs	r3, #9
 800131a:	6033      	str	r3, [r6, #0]
 800131c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	f04f 30ff 	mov.w	r0, #4294967295
 8001326:	e03e      	b.n	80013a6 <__swsetup_r+0xba>
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <__swsetup_r+0xd4>)
 800132a:	429c      	cmp	r4, r3
 800132c:	d101      	bne.n	8001332 <__swsetup_r+0x46>
 800132e:	68ac      	ldr	r4, [r5, #8]
 8001330:	e7eb      	b.n	800130a <__swsetup_r+0x1e>
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <__swsetup_r+0xd8>)
 8001334:	429c      	cmp	r4, r3
 8001336:	bf08      	it	eq
 8001338:	68ec      	ldreq	r4, [r5, #12]
 800133a:	e7e6      	b.n	800130a <__swsetup_r+0x1e>
 800133c:	0758      	lsls	r0, r3, #29
 800133e:	d512      	bpl.n	8001366 <__swsetup_r+0x7a>
 8001340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001342:	b141      	cbz	r1, 8001356 <__swsetup_r+0x6a>
 8001344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001348:	4299      	cmp	r1, r3
 800134a:	d002      	beq.n	8001352 <__swsetup_r+0x66>
 800134c:	4630      	mov	r0, r6
 800134e:	f000 f98f 	bl	8001670 <_free_r>
 8001352:	2300      	movs	r3, #0
 8001354:	6363      	str	r3, [r4, #52]	; 0x34
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	6063      	str	r3, [r4, #4]
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	b94b      	cbnz	r3, 8001386 <__swsetup_r+0x9a>
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137c:	d003      	beq.n	8001386 <__swsetup_r+0x9a>
 800137e:	4621      	mov	r1, r4
 8001380:	4630      	mov	r0, r6
 8001382:	f000 f929 	bl	80015d8 <__smakebuf_r>
 8001386:	89a0      	ldrh	r0, [r4, #12]
 8001388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800138c:	f010 0301 	ands.w	r3, r0, #1
 8001390:	d00a      	beq.n	80013a8 <__swsetup_r+0xbc>
 8001392:	2300      	movs	r3, #0
 8001394:	60a3      	str	r3, [r4, #8]
 8001396:	6963      	ldr	r3, [r4, #20]
 8001398:	425b      	negs	r3, r3
 800139a:	61a3      	str	r3, [r4, #24]
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	b943      	cbnz	r3, 80013b2 <__swsetup_r+0xc6>
 80013a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013a4:	d1ba      	bne.n	800131c <__swsetup_r+0x30>
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	0781      	lsls	r1, r0, #30
 80013aa:	bf58      	it	pl
 80013ac:	6963      	ldrpl	r3, [r4, #20]
 80013ae:	60a3      	str	r3, [r4, #8]
 80013b0:	e7f4      	b.n	800139c <__swsetup_r+0xb0>
 80013b2:	2000      	movs	r0, #0
 80013b4:	e7f7      	b.n	80013a6 <__swsetup_r+0xba>
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	080018b4 	.word	0x080018b4
 80013c0:	080018d4 	.word	0x080018d4
 80013c4:	08001894 	.word	0x08001894

080013c8 <_close_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4d06      	ldr	r5, [pc, #24]	; (80013e4 <_close_r+0x1c>)
 80013cc:	2300      	movs	r3, #0
 80013ce:	4604      	mov	r4, r0
 80013d0:	4608      	mov	r0, r1
 80013d2:	602b      	str	r3, [r5, #0]
 80013d4:	f7ff f925 	bl	8000622 <_close>
 80013d8:	1c43      	adds	r3, r0, #1
 80013da:	d102      	bne.n	80013e2 <_close_r+0x1a>
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	b103      	cbz	r3, 80013e2 <_close_r+0x1a>
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
 80013e4:	2000009c 	.word	0x2000009c

080013e8 <__sflush_r>:
 80013e8:	898a      	ldrh	r2, [r1, #12]
 80013ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ee:	4605      	mov	r5, r0
 80013f0:	0710      	lsls	r0, r2, #28
 80013f2:	460c      	mov	r4, r1
 80013f4:	d458      	bmi.n	80014a8 <__sflush_r+0xc0>
 80013f6:	684b      	ldr	r3, [r1, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dc05      	bgt.n	8001408 <__sflush_r+0x20>
 80013fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc02      	bgt.n	8001408 <__sflush_r+0x20>
 8001402:	2000      	movs	r0, #0
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800140a:	2e00      	cmp	r6, #0
 800140c:	d0f9      	beq.n	8001402 <__sflush_r+0x1a>
 800140e:	2300      	movs	r3, #0
 8001410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001414:	682f      	ldr	r7, [r5, #0]
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	d032      	beq.n	8001480 <__sflush_r+0x98>
 800141a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	075a      	lsls	r2, r3, #29
 8001420:	d505      	bpl.n	800142e <__sflush_r+0x46>
 8001422:	6863      	ldr	r3, [r4, #4]
 8001424:	1ac0      	subs	r0, r0, r3
 8001426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001428:	b10b      	cbz	r3, 800142e <__sflush_r+0x46>
 800142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142c:	1ac0      	subs	r0, r0, r3
 800142e:	2300      	movs	r3, #0
 8001430:	4602      	mov	r2, r0
 8001432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001434:	6a21      	ldr	r1, [r4, #32]
 8001436:	4628      	mov	r0, r5
 8001438:	47b0      	blx	r6
 800143a:	1c43      	adds	r3, r0, #1
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	d106      	bne.n	800144e <__sflush_r+0x66>
 8001440:	6829      	ldr	r1, [r5, #0]
 8001442:	291d      	cmp	r1, #29
 8001444:	d82c      	bhi.n	80014a0 <__sflush_r+0xb8>
 8001446:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <__sflush_r+0x108>)
 8001448:	40ca      	lsrs	r2, r1
 800144a:	07d6      	lsls	r6, r2, #31
 800144c:	d528      	bpl.n	80014a0 <__sflush_r+0xb8>
 800144e:	2200      	movs	r2, #0
 8001450:	6062      	str	r2, [r4, #4]
 8001452:	04d9      	lsls	r1, r3, #19
 8001454:	6922      	ldr	r2, [r4, #16]
 8001456:	6022      	str	r2, [r4, #0]
 8001458:	d504      	bpl.n	8001464 <__sflush_r+0x7c>
 800145a:	1c42      	adds	r2, r0, #1
 800145c:	d101      	bne.n	8001462 <__sflush_r+0x7a>
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	b903      	cbnz	r3, 8001464 <__sflush_r+0x7c>
 8001462:	6560      	str	r0, [r4, #84]	; 0x54
 8001464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001466:	602f      	str	r7, [r5, #0]
 8001468:	2900      	cmp	r1, #0
 800146a:	d0ca      	beq.n	8001402 <__sflush_r+0x1a>
 800146c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001470:	4299      	cmp	r1, r3
 8001472:	d002      	beq.n	800147a <__sflush_r+0x92>
 8001474:	4628      	mov	r0, r5
 8001476:	f000 f8fb 	bl	8001670 <_free_r>
 800147a:	2000      	movs	r0, #0
 800147c:	6360      	str	r0, [r4, #52]	; 0x34
 800147e:	e7c1      	b.n	8001404 <__sflush_r+0x1c>
 8001480:	6a21      	ldr	r1, [r4, #32]
 8001482:	2301      	movs	r3, #1
 8001484:	4628      	mov	r0, r5
 8001486:	47b0      	blx	r6
 8001488:	1c41      	adds	r1, r0, #1
 800148a:	d1c7      	bne.n	800141c <__sflush_r+0x34>
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0c4      	beq.n	800141c <__sflush_r+0x34>
 8001492:	2b1d      	cmp	r3, #29
 8001494:	d001      	beq.n	800149a <__sflush_r+0xb2>
 8001496:	2b16      	cmp	r3, #22
 8001498:	d101      	bne.n	800149e <__sflush_r+0xb6>
 800149a:	602f      	str	r7, [r5, #0]
 800149c:	e7b1      	b.n	8001402 <__sflush_r+0x1a>
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	81a3      	strh	r3, [r4, #12]
 80014a6:	e7ad      	b.n	8001404 <__sflush_r+0x1c>
 80014a8:	690f      	ldr	r7, [r1, #16]
 80014aa:	2f00      	cmp	r7, #0
 80014ac:	d0a9      	beq.n	8001402 <__sflush_r+0x1a>
 80014ae:	0793      	lsls	r3, r2, #30
 80014b0:	680e      	ldr	r6, [r1, #0]
 80014b2:	bf08      	it	eq
 80014b4:	694b      	ldreq	r3, [r1, #20]
 80014b6:	600f      	str	r7, [r1, #0]
 80014b8:	bf18      	it	ne
 80014ba:	2300      	movne	r3, #0
 80014bc:	eba6 0807 	sub.w	r8, r6, r7
 80014c0:	608b      	str	r3, [r1, #8]
 80014c2:	f1b8 0f00 	cmp.w	r8, #0
 80014c6:	dd9c      	ble.n	8001402 <__sflush_r+0x1a>
 80014c8:	6a21      	ldr	r1, [r4, #32]
 80014ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014cc:	4643      	mov	r3, r8
 80014ce:	463a      	mov	r2, r7
 80014d0:	4628      	mov	r0, r5
 80014d2:	47b0      	blx	r6
 80014d4:	2800      	cmp	r0, #0
 80014d6:	dc06      	bgt.n	80014e6 <__sflush_r+0xfe>
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	e78e      	b.n	8001404 <__sflush_r+0x1c>
 80014e6:	4407      	add	r7, r0
 80014e8:	eba8 0800 	sub.w	r8, r8, r0
 80014ec:	e7e9      	b.n	80014c2 <__sflush_r+0xda>
 80014ee:	bf00      	nop
 80014f0:	20400001 	.word	0x20400001

080014f4 <_fflush_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	690b      	ldr	r3, [r1, #16]
 80014f8:	4605      	mov	r5, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	b913      	cbnz	r3, 8001504 <_fflush_r+0x10>
 80014fe:	2500      	movs	r5, #0
 8001500:	4628      	mov	r0, r5
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	b118      	cbz	r0, 800150e <_fflush_r+0x1a>
 8001506:	6983      	ldr	r3, [r0, #24]
 8001508:	b90b      	cbnz	r3, 800150e <_fflush_r+0x1a>
 800150a:	f7ff fa4f 	bl	80009ac <__sinit>
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <_fflush_r+0x6c>)
 8001510:	429c      	cmp	r4, r3
 8001512:	d11b      	bne.n	800154c <_fflush_r+0x58>
 8001514:	686c      	ldr	r4, [r5, #4]
 8001516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0ef      	beq.n	80014fe <_fflush_r+0xa>
 800151e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001520:	07d0      	lsls	r0, r2, #31
 8001522:	d404      	bmi.n	800152e <_fflush_r+0x3a>
 8001524:	0599      	lsls	r1, r3, #22
 8001526:	d402      	bmi.n	800152e <_fflush_r+0x3a>
 8001528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800152a:	f7ff fadd 	bl	8000ae8 <__retarget_lock_acquire_recursive>
 800152e:	4628      	mov	r0, r5
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff ff59 	bl	80013e8 <__sflush_r>
 8001536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001538:	07da      	lsls	r2, r3, #31
 800153a:	4605      	mov	r5, r0
 800153c:	d4e0      	bmi.n	8001500 <_fflush_r+0xc>
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	059b      	lsls	r3, r3, #22
 8001542:	d4dd      	bmi.n	8001500 <_fflush_r+0xc>
 8001544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001546:	f7ff fad0 	bl	8000aea <__retarget_lock_release_recursive>
 800154a:	e7d9      	b.n	8001500 <_fflush_r+0xc>
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <_fflush_r+0x70>)
 800154e:	429c      	cmp	r4, r3
 8001550:	d101      	bne.n	8001556 <_fflush_r+0x62>
 8001552:	68ac      	ldr	r4, [r5, #8]
 8001554:	e7df      	b.n	8001516 <_fflush_r+0x22>
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <_fflush_r+0x74>)
 8001558:	429c      	cmp	r4, r3
 800155a:	bf08      	it	eq
 800155c:	68ec      	ldreq	r4, [r5, #12]
 800155e:	e7da      	b.n	8001516 <_fflush_r+0x22>
 8001560:	080018b4 	.word	0x080018b4
 8001564:	080018d4 	.word	0x080018d4
 8001568:	08001894 	.word	0x08001894

0800156c <_lseek_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d07      	ldr	r5, [pc, #28]	; (800158c <_lseek_r+0x20>)
 8001570:	4604      	mov	r4, r0
 8001572:	4608      	mov	r0, r1
 8001574:	4611      	mov	r1, r2
 8001576:	2200      	movs	r2, #0
 8001578:	602a      	str	r2, [r5, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	f7ff f878 	bl	8000670 <_lseek>
 8001580:	1c43      	adds	r3, r0, #1
 8001582:	d102      	bne.n	800158a <_lseek_r+0x1e>
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	b103      	cbz	r3, 800158a <_lseek_r+0x1e>
 8001588:	6023      	str	r3, [r4, #0]
 800158a:	bd38      	pop	{r3, r4, r5, pc}
 800158c:	2000009c 	.word	0x2000009c

08001590 <__swhatbuf_r>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	460e      	mov	r6, r1
 8001594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001598:	2900      	cmp	r1, #0
 800159a:	b096      	sub	sp, #88	; 0x58
 800159c:	4614      	mov	r4, r2
 800159e:	461d      	mov	r5, r3
 80015a0:	da07      	bge.n	80015b2 <__swhatbuf_r+0x22>
 80015a2:	2300      	movs	r3, #0
 80015a4:	602b      	str	r3, [r5, #0]
 80015a6:	89b3      	ldrh	r3, [r6, #12]
 80015a8:	061a      	lsls	r2, r3, #24
 80015aa:	d410      	bmi.n	80015ce <__swhatbuf_r+0x3e>
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	e00e      	b.n	80015d0 <__swhatbuf_r+0x40>
 80015b2:	466a      	mov	r2, sp
 80015b4:	f000 f8be 	bl	8001734 <_fstat_r>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	dbf2      	blt.n	80015a2 <__swhatbuf_r+0x12>
 80015bc:	9a01      	ldr	r2, [sp, #4]
 80015be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015c6:	425a      	negs	r2, r3
 80015c8:	415a      	adcs	r2, r3
 80015ca:	602a      	str	r2, [r5, #0]
 80015cc:	e7ee      	b.n	80015ac <__swhatbuf_r+0x1c>
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	2000      	movs	r0, #0
 80015d2:	6023      	str	r3, [r4, #0]
 80015d4:	b016      	add	sp, #88	; 0x58
 80015d6:	bd70      	pop	{r4, r5, r6, pc}

080015d8 <__smakebuf_r>:
 80015d8:	898b      	ldrh	r3, [r1, #12]
 80015da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015dc:	079d      	lsls	r5, r3, #30
 80015de:	4606      	mov	r6, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	d507      	bpl.n	80015f4 <__smakebuf_r+0x1c>
 80015e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	6123      	str	r3, [r4, #16]
 80015ec:	2301      	movs	r3, #1
 80015ee:	6163      	str	r3, [r4, #20]
 80015f0:	b002      	add	sp, #8
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	ab01      	add	r3, sp, #4
 80015f6:	466a      	mov	r2, sp
 80015f8:	f7ff ffca 	bl	8001590 <__swhatbuf_r>
 80015fc:	9900      	ldr	r1, [sp, #0]
 80015fe:	4605      	mov	r5, r0
 8001600:	4630      	mov	r0, r6
 8001602:	f7ff fa73 	bl	8000aec <_malloc_r>
 8001606:	b948      	cbnz	r0, 800161c <__smakebuf_r+0x44>
 8001608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160c:	059a      	lsls	r2, r3, #22
 800160e:	d4ef      	bmi.n	80015f0 <__smakebuf_r+0x18>
 8001610:	f023 0303 	bic.w	r3, r3, #3
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	81a3      	strh	r3, [r4, #12]
 800161a:	e7e3      	b.n	80015e4 <__smakebuf_r+0xc>
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <__smakebuf_r+0x7c>)
 800161e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001620:	89a3      	ldrh	r3, [r4, #12]
 8001622:	6020      	str	r0, [r4, #0]
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	81a3      	strh	r3, [r4, #12]
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	6163      	str	r3, [r4, #20]
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	6120      	str	r0, [r4, #16]
 8001632:	b15b      	cbz	r3, 800164c <__smakebuf_r+0x74>
 8001634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001638:	4630      	mov	r0, r6
 800163a:	f000 f88d 	bl	8001758 <_isatty_r>
 800163e:	b128      	cbz	r0, 800164c <__smakebuf_r+0x74>
 8001640:	89a3      	ldrh	r3, [r4, #12]
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	81a3      	strh	r3, [r4, #12]
 800164c:	89a0      	ldrh	r0, [r4, #12]
 800164e:	4305      	orrs	r5, r0
 8001650:	81a5      	strh	r5, [r4, #12]
 8001652:	e7cd      	b.n	80015f0 <__smakebuf_r+0x18>
 8001654:	08000945 	.word	0x08000945

08001658 <__malloc_lock>:
 8001658:	4801      	ldr	r0, [pc, #4]	; (8001660 <__malloc_lock+0x8>)
 800165a:	f7ff ba45 	b.w	8000ae8 <__retarget_lock_acquire_recursive>
 800165e:	bf00      	nop
 8001660:	20000094 	.word	0x20000094

08001664 <__malloc_unlock>:
 8001664:	4801      	ldr	r0, [pc, #4]	; (800166c <__malloc_unlock+0x8>)
 8001666:	f7ff ba40 	b.w	8000aea <__retarget_lock_release_recursive>
 800166a:	bf00      	nop
 800166c:	20000094 	.word	0x20000094

08001670 <_free_r>:
 8001670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001672:	2900      	cmp	r1, #0
 8001674:	d048      	beq.n	8001708 <_free_r+0x98>
 8001676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800167a:	9001      	str	r0, [sp, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f1a1 0404 	sub.w	r4, r1, #4
 8001682:	bfb8      	it	lt
 8001684:	18e4      	addlt	r4, r4, r3
 8001686:	f7ff ffe7 	bl	8001658 <__malloc_lock>
 800168a:	4a20      	ldr	r2, [pc, #128]	; (800170c <_free_r+0x9c>)
 800168c:	9801      	ldr	r0, [sp, #4]
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	4615      	mov	r5, r2
 8001692:	b933      	cbnz	r3, 80016a2 <_free_r+0x32>
 8001694:	6063      	str	r3, [r4, #4]
 8001696:	6014      	str	r4, [r2, #0]
 8001698:	b003      	add	sp, #12
 800169a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800169e:	f7ff bfe1 	b.w	8001664 <__malloc_unlock>
 80016a2:	42a3      	cmp	r3, r4
 80016a4:	d90b      	bls.n	80016be <_free_r+0x4e>
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	1862      	adds	r2, r4, r1
 80016aa:	4293      	cmp	r3, r2
 80016ac:	bf04      	itt	eq
 80016ae:	681a      	ldreq	r2, [r3, #0]
 80016b0:	685b      	ldreq	r3, [r3, #4]
 80016b2:	6063      	str	r3, [r4, #4]
 80016b4:	bf04      	itt	eq
 80016b6:	1852      	addeq	r2, r2, r1
 80016b8:	6022      	streq	r2, [r4, #0]
 80016ba:	602c      	str	r4, [r5, #0]
 80016bc:	e7ec      	b.n	8001698 <_free_r+0x28>
 80016be:	461a      	mov	r2, r3
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	b10b      	cbz	r3, 80016c8 <_free_r+0x58>
 80016c4:	42a3      	cmp	r3, r4
 80016c6:	d9fa      	bls.n	80016be <_free_r+0x4e>
 80016c8:	6811      	ldr	r1, [r2, #0]
 80016ca:	1855      	adds	r5, r2, r1
 80016cc:	42a5      	cmp	r5, r4
 80016ce:	d10b      	bne.n	80016e8 <_free_r+0x78>
 80016d0:	6824      	ldr	r4, [r4, #0]
 80016d2:	4421      	add	r1, r4
 80016d4:	1854      	adds	r4, r2, r1
 80016d6:	42a3      	cmp	r3, r4
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	d1dd      	bne.n	8001698 <_free_r+0x28>
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	6053      	str	r3, [r2, #4]
 80016e2:	4421      	add	r1, r4
 80016e4:	6011      	str	r1, [r2, #0]
 80016e6:	e7d7      	b.n	8001698 <_free_r+0x28>
 80016e8:	d902      	bls.n	80016f0 <_free_r+0x80>
 80016ea:	230c      	movs	r3, #12
 80016ec:	6003      	str	r3, [r0, #0]
 80016ee:	e7d3      	b.n	8001698 <_free_r+0x28>
 80016f0:	6825      	ldr	r5, [r4, #0]
 80016f2:	1961      	adds	r1, r4, r5
 80016f4:	428b      	cmp	r3, r1
 80016f6:	bf04      	itt	eq
 80016f8:	6819      	ldreq	r1, [r3, #0]
 80016fa:	685b      	ldreq	r3, [r3, #4]
 80016fc:	6063      	str	r3, [r4, #4]
 80016fe:	bf04      	itt	eq
 8001700:	1949      	addeq	r1, r1, r5
 8001702:	6021      	streq	r1, [r4, #0]
 8001704:	6054      	str	r4, [r2, #4]
 8001706:	e7c7      	b.n	8001698 <_free_r+0x28>
 8001708:	b003      	add	sp, #12
 800170a:	bd30      	pop	{r4, r5, pc}
 800170c:	20000088 	.word	0x20000088

08001710 <_read_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4d07      	ldr	r5, [pc, #28]	; (8001730 <_read_r+0x20>)
 8001714:	4604      	mov	r4, r0
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	2200      	movs	r2, #0
 800171c:	602a      	str	r2, [r5, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	f7fe ff46 	bl	80005b0 <_read>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d102      	bne.n	800172e <_read_r+0x1e>
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	b103      	cbz	r3, 800172e <_read_r+0x1e>
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	bd38      	pop	{r3, r4, r5, pc}
 8001730:	2000009c 	.word	0x2000009c

08001734 <_fstat_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d07      	ldr	r5, [pc, #28]	; (8001754 <_fstat_r+0x20>)
 8001738:	2300      	movs	r3, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	602b      	str	r3, [r5, #0]
 8001742:	f7fe ff7a 	bl	800063a <_fstat>
 8001746:	1c43      	adds	r3, r0, #1
 8001748:	d102      	bne.n	8001750 <_fstat_r+0x1c>
 800174a:	682b      	ldr	r3, [r5, #0]
 800174c:	b103      	cbz	r3, 8001750 <_fstat_r+0x1c>
 800174e:	6023      	str	r3, [r4, #0]
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	bf00      	nop
 8001754:	2000009c 	.word	0x2000009c

08001758 <_isatty_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4d06      	ldr	r5, [pc, #24]	; (8001774 <_isatty_r+0x1c>)
 800175c:	2300      	movs	r3, #0
 800175e:	4604      	mov	r4, r0
 8001760:	4608      	mov	r0, r1
 8001762:	602b      	str	r3, [r5, #0]
 8001764:	f7fe ff79 	bl	800065a <_isatty>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_isatty_r+0x1a>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	b103      	cbz	r3, 8001772 <_isatty_r+0x1a>
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	2000009c 	.word	0x2000009c

08001778 <_init>:
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	bf00      	nop
 800177c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177e:	bc08      	pop	{r3}
 8001780:	469e      	mov	lr, r3
 8001782:	4770      	bx	lr

08001784 <_fini>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	bf00      	nop
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr
