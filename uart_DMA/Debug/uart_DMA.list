
uart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080004b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  080004d8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080004d8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e03  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000047c  00000000  00000000  00020e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000212d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00021388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c0d3  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f5f  00000000  00000000  0002d4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00041968  00000000  00000000  0002e43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006fda2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000190  00000000  00000000  0006fdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000498 	.word	0x08000498

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08000498 	.word	0x08000498

08000208 <main>:
#define DMA1_TCIF6     (1U<<21)
#define DMA1_CTCIF6    (1U<<21)

char message [31]="hello my name is Oussema \n\r";
int main(void)
             {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	UART_TX_init();
 800020c:	f000 f830 	bl	8000270 <UART_TX_init>
	uart_DMA1_init((uint32_t) &USART2->DR,(uint32_t) message,27);
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <main+0x18>)
 8000212:	221b      	movs	r2, #27
 8000214:	4619      	mov	r1, r3
 8000216:	4803      	ldr	r0, [pc, #12]	; (8000224 <main+0x1c>)
 8000218:	f000 f890 	bl	800033c <uart_DMA1_init>


	          while(1)
 800021c:	e7fe      	b.n	800021c <main+0x14>
 800021e:	bf00      	nop
 8000220:	20000000 	.word	0x20000000
 8000224:	40004404 	.word	0x40004404

08000228 <set_baudrate_usart2>:
	                   return(ch);
                           }


   static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	f043 0201 	orr.w	r2, r3, #1
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f043 0202 	orr.w	r2, r3, #2
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	f043 0208 	orr.w	r2, r3, #8
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	609a      	str	r2, [r3, #8]
          }
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <UART_TX_init>:

   void UART_TX_init(void)
        {/*************enable clock access to gpioA *******************/
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
   	      RCC->AHB1ENR|=GPIOAEN;
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <UART_TX_init+0x80>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a1d      	ldr	r2, [pc, #116]	; (80002f0 <UART_TX_init+0x80>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	; 0x30


   	   /*************Set mode to alternate func***************/
   	      GPIOA->MODER|=(1U<<5);
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <UART_TX_init+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <UART_TX_init+0x84>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6013      	str	r3, [r2, #0]
          GPIOA->MODER&=~(1U<<4);
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <UART_TX_init+0x84>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <UART_TX_init+0x84>)
 8000292:	f023 0310 	bic.w	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]
          /*****Configure to AF7 As indicated in the alternate function mapping */
          GPIOA->AFR[0]|=(1U<<8);
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <UART_TX_init+0x84>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <UART_TX_init+0x84>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<9);
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <UART_TX_init+0x84>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <UART_TX_init+0x84>)
 80002aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ae:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<10);
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <UART_TX_init+0x84>)
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <UART_TX_init+0x84>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6213      	str	r3, [r2, #32]

          /**************enable clock access to usart2******************/
          RCC->APB1ENR|=(1U<<17);
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <UART_TX_init+0x80>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <UART_TX_init+0x80>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c6:	6413      	str	r3, [r2, #64]	; 0x40

          /****************CONFIGURE BAUDRATE***********/
          set_baudrate_usart2(USART2,periph_freq,baudrate);
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	490a      	ldr	r1, [pc, #40]	; (80002f8 <UART_TX_init+0x88>)
 80002ce:	480b      	ldr	r0, [pc, #44]	; (80002fc <UART_TX_init+0x8c>)
 80002d0:	f7ff ffaa 	bl	8000228 <set_baudrate_usart2>
          /*********configure transfert direction */
          USART2->CR1|=(1U<<3);
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <UART_TX_init+0x8c>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <UART_TX_init+0x8c>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	60d3      	str	r3, [r2, #12]
          /***********enable uart module **************/
          USART2->CR1|=(1U<<13);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <UART_TX_init+0x8c>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <UART_TX_init+0x8c>)
 80002e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ea:	60d3      	str	r3, [r2, #12]
            }
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020000 	.word	0x40020000
 80002f8:	00f42400 	.word	0x00f42400
 80002fc:	40004400 	.word	0x40004400

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <uart_DMA1_init>:

#define DMA_transmitter_EN (1U<<7)
#define USART2EN           (1U<<17)


void uart_DMA1_init(uint32_t dest,uint32_t source, uint32_t len){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
    /*Enable clock access to DMA1 */
	RCC->AHB1ENR|=DMA1EN;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <uart_DMA1_init+0xb4>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a28      	ldr	r2, [pc, #160]	; (80003f0 <uart_DMA1_init+0xb4>)
 800034e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
	/*Disable DMA1 Stream 6*/
	DMA1_Stream6->CR&=~DMA1_S6_EN;
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <uart_DMA1_init+0xb8>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
	/*wait for it*/
	while(DMA1_Stream6->CR & DMA1_S6_EN){}
 8000360:	bf00      	nop
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f9      	bne.n	8000362 <uart_DMA1_init+0x26>
	/*Set transfert Direction*/
	DMA1_Stream6->CR|=M2P;
 800036e:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a20      	ldr	r2, [pc, #128]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000378:	6013      	str	r3, [r2, #0]
	/*Set the source buffer*/
	DMA1_Stream6->M0AR=source;
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <uart_DMA1_init+0xb8>)
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	60d3      	str	r3, [r2, #12]
	/*Set the destination buffer*/
	DMA1_Stream6->PAR=dest;
 8000380:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	6093      	str	r3, [r2, #8]
	/*Set the total number of data to be transferred*/
	DMA1_Stream6->NDTR=len;
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6053      	str	r3, [r2, #4]
	/*Choose the channel*/
	DMA1_Stream6->CR|=CH4;
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <uart_DMA1_init+0xb8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <uart_DMA1_init+0xb8>)
 8000392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000396:	6013      	str	r3, [r2, #0]
	/*Enable memory increment*/
	DMA1_Stream6->CR|=Memory_Increment;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <uart_DMA1_init+0xb8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a15      	ldr	r2, [pc, #84]	; (80003f4 <uart_DMA1_init+0xb8>)
 800039e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003a2:	6013      	str	r3, [r2, #0]
	/*Configure FIFO (enable/disable)*/
	DMA1_Stream6->CR&=~DMDIS;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003aa:	f023 0304 	bic.w	r3, r3, #4
 80003ae:	6013      	str	r3, [r2, #0]
	/*Transfer complete interrupt enable*/
	DMA1_Stream6->CR|=Trans_complete;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6013      	str	r3, [r2, #0]
	/*Activate the stream*/
	DMA1_Stream6->CR|=Stream6_EN;
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <uart_DMA1_init+0xb8>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]
	/*USART2 Clock access enable*/
	RCC->APB1ENR|=USART2EN;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <uart_DMA1_init+0xb4>)
 80003ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <uart_DMA1_init+0xb4>)
 80003ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d2:	6413      	str	r3, [r2, #64]	; 0x40
	/*UART2 DMA transmitter enable*/
	USART2->CR3|=DMA_transmitter_EN;
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <uart_DMA1_init+0xbc>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <uart_DMA1_init+0xbc>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	6153      	str	r3, [r2, #20]
	/*NVIC interrupt enable*/
    NVIC_EnableIRQ(17);}
 80003e0:	2011      	movs	r0, #17
 80003e2:	f7ff ff8d 	bl	8000300 <__NVIC_EnableIRQ>
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	400260a0 	.word	0x400260a0
 80003f8:	40004400 	.word	0x40004400

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	; (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	; (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	; (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff feeb 	bl	8000208 <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000448:	2000003c 	.word	0x2000003c

0800044c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
