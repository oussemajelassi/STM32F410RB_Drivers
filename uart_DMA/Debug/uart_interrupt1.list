
uart_interrupt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000464  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000464  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011e1  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000396  00000000  00000000  00011675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00011a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00011a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cd18  00000000  00000000  00011ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c3b  00000000  00000000  0001e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045b2e  00000000  00000000  0001f43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00064f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f4  00000000  00000000  00064fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000444 	.word	0x08000444

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000444 	.word	0x08000444

08000208 <main>:

char key;
char key1;

int main(void)
             {      UART_RX_TX_interrupt_init();
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
 800020c:	f000 f838 	bl	8000280 <UART_RX_TX_interrupt_init>

	          while(1)
	               {
	               key1=key;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <main+0x14>)
 8000212:	781a      	ldrb	r2, [r3, #0]
 8000214:	4b02      	ldr	r3, [pc, #8]	; (8000220 <main+0x18>)
 8000216:	701a      	strb	r2, [r3, #0]
 8000218:	e7fa      	b.n	8000210 <main+0x8>
 800021a:	bf00      	nop
 800021c:	2000001d 	.word	0x2000001d
 8000220:	2000001c 	.word	0x2000001c

08000224 <USART2_IRQHandler>:
	               }

             }


void USART2_IRQHandler(void){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	/*clear the flag*/
	//we clear the flag by reading the data register
	/*do something*/
	key=USART2->DR;
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <USART2_IRQHandler+0x18>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <USART2_IRQHandler+0x1c>)
 8000230:	701a      	strb	r2, [r3, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	40004400 	.word	0x40004400
 8000240:	2000001d 	.word	0x2000001d

08000244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	2b00      	cmp	r3, #0
 8000254:	db0b      	blt.n	800026e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 021f 	and.w	r2, r3, #31
 800025c:	4907      	ldr	r1, [pc, #28]	; (800027c <__NVIC_EnableIRQ+0x38>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	2001      	movs	r0, #1
 8000266:	fa00 f202 	lsl.w	r2, r0, r2
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e100 	.word	0xe000e100

08000280 <UART_RX_TX_interrupt_init>:
#define periph_freq 16000000
#define  baudrate     115200

#define    RXNE_interrupt_enable (1U<<5)
void       UART_RX_TX_interrupt_init(void)
           {/*************enable clock access to gpioA *******************/
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
      	   RCC->AHB1ENR|=(1U<<0);
 8000284:	4b32      	ldr	r3, [pc, #200]	; (8000350 <UART_RX_TX_interrupt_init+0xd0>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a31      	ldr	r2, [pc, #196]	; (8000350 <UART_RX_TX_interrupt_init+0xd0>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30


      	   /*************Set PA2 mode to alternate func***************/
       	     GPIOA->MODER|=(1U<<5);
 8000290:	4b30      	ldr	r3, [pc, #192]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a2f      	ldr	r2, [pc, #188]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6013      	str	r3, [r2, #0]
             GPIOA->MODER&=~(1U<<4);
 800029c:	4b2d      	ldr	r3, [pc, #180]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002a2:	f023 0310 	bic.w	r3, r3, #16
 80002a6:	6013      	str	r3, [r2, #0]
             /*****Configure PA2 to AF7 As indicated in the alternate function mapping */
             GPIOA->AFR[0]|=(1U<<8);
 80002a8:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002aa:	6a1b      	ldr	r3, [r3, #32]
 80002ac:	4a29      	ldr	r2, [pc, #164]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<9);
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a26      	ldr	r2, [pc, #152]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<10);
 80002c0:	4b24      	ldr	r3, [pc, #144]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a23      	ldr	r2, [pc, #140]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6213      	str	r3, [r2, #32]
             /**********Set PA3 mode to alternate func**************/
             GPIOA->MODER|=(1U<<7);
 80002cc:	4b21      	ldr	r3, [pc, #132]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]
             GPIOA->MODER&=~(1U<<6);
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002e2:	6013      	str	r3, [r2, #0]

             /***********Configure PA3 TO AF7***********/
             GPIOA->AFR[0]|=(1U<<12);
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002ee:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<13);
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fa:	6213      	str	r3, [r2, #32]
             GPIOA->AFR[0]|=(1U<<14);
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <UART_RX_TX_interrupt_init+0xd4>)
 8000302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000306:	6213      	str	r3, [r2, #32]

             /**************enable clock access to usart2******************/
             RCC->APB1ENR|=(1U<<17);
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <UART_RX_TX_interrupt_init+0xd0>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <UART_RX_TX_interrupt_init+0xd0>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000312:	6413      	str	r3, [r2, #64]	; 0x40

             /****************CONFIGURE BAUDRATE***********/
             set_baudrate_usart2(USART2,periph_freq,baudrate);
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	490f      	ldr	r1, [pc, #60]	; (8000358 <UART_RX_TX_interrupt_init+0xd8>)
 800031a:	4810      	ldr	r0, [pc, #64]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 800031c:	f000 f820 	bl	8000360 <set_baudrate_usart2>
             /*********configure transfert direction */
             USART2->CR1|=((1U<<3)|(1U<<2));
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 8000326:	f043 030c 	orr.w	r3, r3, #12
 800032a:	60d3      	str	r3, [r2, #12]
             /***********enable uart module **************/
             USART2->CR1|=(1U<<13);
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000336:	60d3      	str	r3, [r2, #12]

           /*enable receiver interruption*/
             USART2->CR1|=RXNE_interrupt_enable;
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a07      	ldr	r2, [pc, #28]	; (800035c <UART_RX_TX_interrupt_init+0xdc>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	60d3      	str	r3, [r2, #12]
           /*enable nvic interruption*/
             NVIC_EnableIRQ(38);
 8000344:	2026      	movs	r0, #38	; 0x26
 8000346:	f7ff ff7d 	bl	8000244 <__NVIC_EnableIRQ>

           }
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	00f42400 	.word	0x00f42400
 800035c:	40004400 	.word	0x40004400

08000360 <set_baudrate_usart2>:




static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f043 0201 	orr.w	r2, r3, #1
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f043 0202 	orr.w	r2, r3, #2
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f043 0208 	orr.w	r2, r3, #8
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	609a      	str	r2, [r3, #8]
          }
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff15 	bl	8000208 <main>

080003de <LoopForever>:

LoopForever:
    b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f4:	20000020 	.word	0x20000020

080003f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
