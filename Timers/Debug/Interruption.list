
Interruption.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080003d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001102  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fa  00000000  00000000  00011502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00011870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cc54  00000000  00000000  000118c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007f4  00000000  00000000  0001e51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045b7c  00000000  00000000  0001ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006488c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  000648e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003b0 	.word	0x080003b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003b0 	.word	0x080003b0

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <push_button_init>:

static void exti_callback(void);
 int compteur=0;

void push_button_init(void)
    {/*disable global interrupts*/
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000248:	b672      	cpsid	i
}
 800024a:	bf00      	nop
     __disable_irq();

	/*select pc13 as input*/

		/*enable clock access to GPIOC*/
	    RCC->AHB1ENR|=gpiorccenable;
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <push_button_init+0x64>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <push_button_init+0x64>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	/*********************enable clock access to sys config*************************/
		RCC->APB2ENR|=sysconfig;
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <push_button_init+0x64>)
 800025a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <push_button_init+0x64>)
 800025e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000262:	6453      	str	r3, [r2, #68]	; 0x44

	/***********************enable clock access to exti************/
		RCC->APB2ENR |= (1U << 15);
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <push_button_init+0x64>)
 8000266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000268:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <push_button_init+0x64>)
 800026a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800026e:	6453      	str	r3, [r2, #68]	; 0x44

		GPIOC->PUPDR |= (1U << 26) ;
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <push_button_init+0x68>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <push_button_init+0x68>)
 8000276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800027a:	60d3      	str	r3, [r2, #12]

	/*SELECT PORT C FOR EXTI13*/
	SYSCFG->EXTICR[3] |= (1U<<5);
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <push_button_init+0x6c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <push_button_init+0x6c>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6153      	str	r3, [r2, #20]

    /*unmask EXTI13*/
	EXTI->IMR = 0x2000;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <push_button_init+0x70>)
 800028a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800028e:	601a      	str	r2, [r3, #0]

	/*Select falling edge trigger*/
	EXTI->FTSR = (1U<<13);
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <push_button_init+0x70>)
 8000292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000296:	60da      	str	r2, [r3, #12]

	/*enable exti13 line in nvic*/
    NVIC_EnableIRQ(40);
 8000298:	2028      	movs	r0, #40	; 0x28
 800029a:	f7ff ffb5 	bl	8000208 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800029e:	b662      	cpsie	i
}
 80002a0:	bf00      	nop
    /*enable glabal interrupts*/
    __enable_irq();

    }
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020800 	.word	0x40020800
 80002b0:	40013800 	.word	0x40013800
 80002b4:	40013c00 	.word	0x40013c00

080002b8 <main>:



int main (void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	push_button_init();
 80002bc:	f7ff ffc2 	bl	8000244 <push_button_init>
	GPIOC->PUPDR=(1U<<27);
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <main+0x1c>)
 80002c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002c6:	60da      	str	r2, [r3, #12]


while(1){
  a = GPIOC->IDR;
 80002c8:	4b02      	ldr	r3, [pc, #8]	; (80002d4 <main+0x1c>)
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <main+0x20>)
 80002ce:	6013      	str	r3, [r2, #0]
 80002d0:	e7fa      	b.n	80002c8 <main+0x10>
 80002d2:	bf00      	nop
 80002d4:	40020800 	.word	0x40020800
 80002d8:	20000020 	.word	0x20000020

080002dc <exti_callback>:


/********************        to find the handler check the startup up folder      *********************/


void exti_callback(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
     compteur+=1;
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <exti_callback+0x18>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <exti_callback+0x18>)
 80002e8:	6013      	str	r3, [r2, #0]
                         }
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)// ****** c'est la fonction Ã  executer lors d'une interruption***********


{/*check if exti 13 is causing the interruption ==>       pending register     */
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//if (EXTI->PR & LINE13)

	   /*remove pending*/
		EXTI->PR|=LINE13; // pending register bit is cleared when programmed to 1
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <EXTI15_10_IRQHandler+0x18>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a03      	ldr	r2, [pc, #12]	; (8000310 <EXTI15_10_IRQHandler+0x18>)
 8000302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000306:	6153      	str	r3, [r2, #20]
		/*desired function*/
		exti_callback();
 8000308:	f7ff ffe8 	bl	80002dc <exti_callback>


 }
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40013c00 	.word	0x40013c00

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffb7 	bl	80002b8 <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	20000024 	.word	0x20000024

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
