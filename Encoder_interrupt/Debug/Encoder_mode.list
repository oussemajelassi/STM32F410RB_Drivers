
Encoder_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001620  08001620  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001620  08001620  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001620  08001620  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001620  08001620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001624  08001624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  0800168c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800168c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002df7  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085a  00000000  00000000  00022e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000236e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00023858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e074  00000000  00000000  00023970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e2a  00000000  00000000  000319e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004701a  00000000  00000000  0003380e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007a828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c08  00000000  00000000  0007a87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001570 	.word	0x08001570

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001570 	.word	0x08001570

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <read_encoder>:
#include"stm32f410rx.h"
#include "Encoder_mode.h"

uint32_t read_encoder(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
return (TIM1->CNT);
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <read_encoder+0x14>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40010000 	.word	0x40010000

080002c8 <Encoder_mode_TIM1>:


void Encoder_mode_TIM1(void)
   {/*enable clock acess to GPIOA*/
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=(1U<<0);
 80002cc:	4b26      	ldr	r3, [pc, #152]	; (8000368 <Encoder_mode_TIM1+0xa0>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a25      	ldr	r2, [pc, #148]	; (8000368 <Encoder_mode_TIM1+0xa0>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PA8 AND PA9 TO alternate func*/
	GPIOA->MODER|=(1U<<17);
 80002d8:	4b24      	ldr	r3, [pc, #144]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a23      	ldr	r2, [pc, #140]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(1U<<19);
 80002e4:	4b21      	ldr	r3, [pc, #132]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a20      	ldr	r2, [pc, #128]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ee:	6013      	str	r3, [r2, #0]
	/*Set PA8 and PA9 alternate func to AF1*/
	GPIOA->AFR[1]|=(1U<<0);
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f4:	4a1d      	ldr	r2, [pc, #116]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]|=(1U<<4);
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <Encoder_mode_TIM1+0xa4>)
 80002fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000300:	4a1a      	ldr	r2, [pc, #104]	; (800036c <Encoder_mode_TIM1+0xa4>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6253      	str	r3, [r2, #36]	; 0x24

	/*enable clock access to timer*/
		RCC->APB2ENR|=(1U<<0);
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <Encoder_mode_TIM1+0xa0>)
 800030a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <Encoder_mode_TIM1+0xa0>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6453      	str	r3, [r2, #68]	; 0x44




	/*Set the channels menish fehem barsha chyaamel lhak*/
	TIM1->CCMR1|=(1U<<8);
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1|=(1U<<0);
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a12      	ldr	r2, [pc, #72]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6193      	str	r3, [r2, #24]
	/*set both channels to input*/

	/*Set encoder mode*/
	TIM1->SMCR|=(1U<<0);
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6093      	str	r3, [r2, #8]
	TIM1->SMCR|=(1U<<1);
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6093      	str	r3, [r2, #8]
	/*Set ARR Value*/
	LPTIM1->ARR=0xFFFF;
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <Encoder_mode_TIM1+0xac>)
 8000346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034a:	619a      	str	r2, [r3, #24]

	/*enable timer*/
	TIM1->CR1|=(1U<<0);
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
	/*Clear Timer*/
	TIM1->CNT=0;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <Encoder_mode_TIM1+0xa8>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24




	}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40023800 	.word	0x40023800
 800036c:	40020000 	.word	0x40020000
 8000370:	40010000 	.word	0x40010000
 8000374:	40002400 	.word	0x40002400

08000378 <main>:

int a;


                 int main(void)
{Encoder_mode_TIM1();
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
 800037c:	f7ff ffa4 	bl	80002c8 <Encoder_mode_TIM1>
UART_TX_init();
 8000380:	f000 f8e6 	bl	8000550 <UART_TX_init>

while(1){a=read_encoder();
 8000384:	f7ff ff94 	bl	80002b0 <read_encoder>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <main+0x28>)
 800038e:	601a      	str	r2, [r3, #0]
	printf(read_encoder());
 8000390:	f7ff ff8e 	bl	80002b0 <read_encoder>
 8000394:	4603      	mov	r3, r0
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f994 	bl	80006c4 <iprintf>
while(1){a=read_encoder();
 800039c:	e7f2      	b.n	8000384 <main+0xc>
 800039e:	bf00      	nop
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	e00a      	b.n	80003cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003b6:	f3af 8000 	nop.w
 80003ba:	4601      	mov	r1, r0
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	60ba      	str	r2, [r7, #8]
 80003c2:	b2ca      	uxtb	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbf0      	blt.n	80003b6 <_read+0x12>
	}

return len;
 80003d4:	687b      	ldr	r3, [r7, #4]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	60f8      	str	r0, [r7, #12]
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e009      	b.n	8000404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	60ba      	str	r2, [r7, #8]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f877 	bl	80004ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	dbf1      	blt.n	80003f0 <_write+0x12>
	}
	return len;
 800040c:	687b      	ldr	r3, [r7, #4]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <_close>:

int _close(int file)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800043e:	605a      	str	r2, [r3, #4]
	return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <_isatty>:

int _isatty(int file)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
	return 1;
 8000456:	2301      	movs	r3, #1
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <_sbrk+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <_sbrk+0x60>)
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <_sbrk+0x64>)
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <_sbrk+0x68>)
 80004a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d207      	bcs.n	80004c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b0:	f000 f8d6 	bl	8000660 <__errno>
 80004b4:	4603      	mov	r3, r0
 80004b6:	220c      	movs	r2, #12
 80004b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	e009      	b.n	80004d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <_sbrk+0x64>)
 80004d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20008000 	.word	0x20008000
 80004e0:	00000400 	.word	0x00000400
 80004e4:	20000080 	.word	0x20000080
 80004e8:	200000a0 	.word	0x200000a0

080004ec <__io_putchar>:




void senddata(int a);
       char __io_putchar(char ch){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	                  senddata(ch);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f871 	bl	80005e0 <senddata>
	                   return(ch);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
                           }
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <set_baudrate_usart2>:


   static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f043 0201 	orr.w	r2, r3, #1
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f043 0202 	orr.w	r2, r3, #2
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f043 0208 	orr.w	r2, r3, #8
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	609a      	str	r2, [r3, #8]
          }
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <UART_TX_init>:

   void UART_TX_init(void)
        {/*************enable clock access to gpioA *******************/
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
   	   RCC->AHB1ENR|=GPIOAEN;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <UART_TX_init+0x80>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <UART_TX_init+0x80>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6313      	str	r3, [r2, #48]	; 0x30


   	   /*************Set mode to alternate func***************/
   	   GPIOA->MODER|=(1U<<5);
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <UART_TX_init+0x84>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <UART_TX_init+0x84>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6013      	str	r3, [r2, #0]
          GPIOA->MODER&=~(1U<<4);
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <UART_TX_init+0x84>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <UART_TX_init+0x84>)
 8000572:	f023 0310 	bic.w	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
          /*****Configure to AF7 As indicated in the alternate function mapping */
          GPIOA->AFR[0]|=(1U<<8);
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <UART_TX_init+0x84>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <UART_TX_init+0x84>)
 800057e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000582:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<9);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <UART_TX_init+0x84>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <UART_TX_init+0x84>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<10);
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <UART_TX_init+0x84>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <UART_TX_init+0x84>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6213      	str	r3, [r2, #32]

          /**************enable clock access to usart2******************/
          RCC->APB1ENR|=(1U<<17);
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <UART_TX_init+0x80>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <UART_TX_init+0x80>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40

          /****************CONFIGURE BAUDRATE***********/
          set_baudrate_usart2(USART2,periph_freq,baudrate);
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	490a      	ldr	r1, [pc, #40]	; (80005d8 <UART_TX_init+0x88>)
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <UART_TX_init+0x8c>)
 80005b0:	f7ff ffaa 	bl	8000508 <set_baudrate_usart2>
          /*********configure transfert direction */
          USART2->CR1|=(1U<<3);
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <UART_TX_init+0x8c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <UART_TX_init+0x8c>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	60d3      	str	r3, [r2, #12]
          /***********enable uart module **************/
          USART2->CR1|=(1U<<13);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <UART_TX_init+0x8c>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <UART_TX_init+0x8c>)
 80005c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ca:	60d3      	str	r3, [r2, #12]
            }
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	00f42400 	.word	0x00f42400
 80005dc:	40004400 	.word	0x40004400

080005e0 <senddata>:




   void senddata(int a)
        {/*make sure the Transmit data register is empty : check the STATUS REG */
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]


           	   USART2->DR=a;
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <senddata+0x28>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6053      	str	r3, [r2, #4]
           	   while(!(USART2->SR)&&(1U<<6)) {}
 80005ee:	bf00      	nop
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <senddata+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0fb      	beq.n	80005f0 <senddata+0x10>

        }
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40004400 	.word	0x40004400

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000610:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f000 f817 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fe9b 	bl	8000378 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000650:	08001628 	.word	0x08001628
  ldr r2, =_sbss
 8000654:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000658:	200000a0 	.word	0x200000a0

0800065c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC_IRQHandler>
	...

08000660 <__errno>:
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <__errno+0x8>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 ff76 	bl	8001570 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	08001620 	.word	0x08001620
 80006a8:	08001620 	.word	0x08001620
 80006ac:	08001620 	.word	0x08001620
 80006b0:	08001624 	.word	0x08001624

080006b4 <memset>:
 80006b4:	4402      	add	r2, r0
 80006b6:	4603      	mov	r3, r0
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d100      	bne.n	80006be <memset+0xa>
 80006bc:	4770      	bx	lr
 80006be:	f803 1b01 	strb.w	r1, [r3], #1
 80006c2:	e7f9      	b.n	80006b8 <memset+0x4>

080006c4 <iprintf>:
 80006c4:	b40f      	push	{r0, r1, r2, r3}
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <iprintf+0x2c>)
 80006c8:	b513      	push	{r0, r1, r4, lr}
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	b124      	cbz	r4, 80006d8 <iprintf+0x14>
 80006ce:	69a3      	ldr	r3, [r4, #24]
 80006d0:	b913      	cbnz	r3, 80006d8 <iprintf+0x14>
 80006d2:	4620      	mov	r0, r4
 80006d4:	f000 f866 	bl	80007a4 <__sinit>
 80006d8:	ab05      	add	r3, sp, #20
 80006da:	9a04      	ldr	r2, [sp, #16]
 80006dc:	68a1      	ldr	r1, [r4, #8]
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 f983 	bl	80009ec <_vfiprintf_r>
 80006e6:	b002      	add	sp, #8
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr
 80006f0:	20000000 	.word	0x20000000

080006f4 <std>:
 80006f4:	2300      	movs	r3, #0
 80006f6:	b510      	push	{r4, lr}
 80006f8:	4604      	mov	r4, r0
 80006fa:	e9c0 3300 	strd	r3, r3, [r0]
 80006fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000702:	6083      	str	r3, [r0, #8]
 8000704:	8181      	strh	r1, [r0, #12]
 8000706:	6643      	str	r3, [r0, #100]	; 0x64
 8000708:	81c2      	strh	r2, [r0, #14]
 800070a:	6183      	str	r3, [r0, #24]
 800070c:	4619      	mov	r1, r3
 800070e:	2208      	movs	r2, #8
 8000710:	305c      	adds	r0, #92	; 0x5c
 8000712:	f7ff ffcf 	bl	80006b4 <memset>
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <std+0x38>)
 8000718:	6263      	str	r3, [r4, #36]	; 0x24
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <std+0x3c>)
 800071c:	62a3      	str	r3, [r4, #40]	; 0x28
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <std+0x40>)
 8000720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <std+0x44>)
 8000724:	6224      	str	r4, [r4, #32]
 8000726:	6323      	str	r3, [r4, #48]	; 0x30
 8000728:	bd10      	pop	{r4, pc}
 800072a:	bf00      	nop
 800072c:	08000f95 	.word	0x08000f95
 8000730:	08000fb7 	.word	0x08000fb7
 8000734:	08000fef 	.word	0x08000fef
 8000738:	08001013 	.word	0x08001013

0800073c <_cleanup_r>:
 800073c:	4901      	ldr	r1, [pc, #4]	; (8000744 <_cleanup_r+0x8>)
 800073e:	f000 b8af 	b.w	80008a0 <_fwalk_reent>
 8000742:	bf00      	nop
 8000744:	080012ed 	.word	0x080012ed

08000748 <__sfmoreglue>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	1e4a      	subs	r2, r1, #1
 800074c:	2568      	movs	r5, #104	; 0x68
 800074e:	4355      	muls	r5, r2
 8000750:	460e      	mov	r6, r1
 8000752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000756:	f000 f8c5 	bl	80008e4 <_malloc_r>
 800075a:	4604      	mov	r4, r0
 800075c:	b140      	cbz	r0, 8000770 <__sfmoreglue+0x28>
 800075e:	2100      	movs	r1, #0
 8000760:	e9c0 1600 	strd	r1, r6, [r0]
 8000764:	300c      	adds	r0, #12
 8000766:	60a0      	str	r0, [r4, #8]
 8000768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800076c:	f7ff ffa2 	bl	80006b4 <memset>
 8000770:	4620      	mov	r0, r4
 8000772:	bd70      	pop	{r4, r5, r6, pc}

08000774 <__sfp_lock_acquire>:
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <__sfp_lock_acquire+0x8>)
 8000776:	f000 b8b3 	b.w	80008e0 <__retarget_lock_acquire_recursive>
 800077a:	bf00      	nop
 800077c:	20000098 	.word	0x20000098

08000780 <__sfp_lock_release>:
 8000780:	4801      	ldr	r0, [pc, #4]	; (8000788 <__sfp_lock_release+0x8>)
 8000782:	f000 b8ae 	b.w	80008e2 <__retarget_lock_release_recursive>
 8000786:	bf00      	nop
 8000788:	20000098 	.word	0x20000098

0800078c <__sinit_lock_acquire>:
 800078c:	4801      	ldr	r0, [pc, #4]	; (8000794 <__sinit_lock_acquire+0x8>)
 800078e:	f000 b8a7 	b.w	80008e0 <__retarget_lock_acquire_recursive>
 8000792:	bf00      	nop
 8000794:	20000093 	.word	0x20000093

08000798 <__sinit_lock_release>:
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <__sinit_lock_release+0x8>)
 800079a:	f000 b8a2 	b.w	80008e2 <__retarget_lock_release_recursive>
 800079e:	bf00      	nop
 80007a0:	20000093 	.word	0x20000093

080007a4 <__sinit>:
 80007a4:	b510      	push	{r4, lr}
 80007a6:	4604      	mov	r4, r0
 80007a8:	f7ff fff0 	bl	800078c <__sinit_lock_acquire>
 80007ac:	69a3      	ldr	r3, [r4, #24]
 80007ae:	b11b      	cbz	r3, 80007b8 <__sinit+0x14>
 80007b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b4:	f7ff bff0 	b.w	8000798 <__sinit_lock_release>
 80007b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007bc:	6523      	str	r3, [r4, #80]	; 0x50
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <__sinit+0x68>)
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <__sinit+0x6c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80007c6:	42a3      	cmp	r3, r4
 80007c8:	bf04      	itt	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	61a3      	streq	r3, [r4, #24]
 80007ce:	4620      	mov	r0, r4
 80007d0:	f000 f820 	bl	8000814 <__sfp>
 80007d4:	6060      	str	r0, [r4, #4]
 80007d6:	4620      	mov	r0, r4
 80007d8:	f000 f81c 	bl	8000814 <__sfp>
 80007dc:	60a0      	str	r0, [r4, #8]
 80007de:	4620      	mov	r0, r4
 80007e0:	f000 f818 	bl	8000814 <__sfp>
 80007e4:	2200      	movs	r2, #0
 80007e6:	60e0      	str	r0, [r4, #12]
 80007e8:	2104      	movs	r1, #4
 80007ea:	6860      	ldr	r0, [r4, #4]
 80007ec:	f7ff ff82 	bl	80006f4 <std>
 80007f0:	68a0      	ldr	r0, [r4, #8]
 80007f2:	2201      	movs	r2, #1
 80007f4:	2109      	movs	r1, #9
 80007f6:	f7ff ff7d 	bl	80006f4 <std>
 80007fa:	68e0      	ldr	r0, [r4, #12]
 80007fc:	2202      	movs	r2, #2
 80007fe:	2112      	movs	r1, #18
 8000800:	f7ff ff78 	bl	80006f4 <std>
 8000804:	2301      	movs	r3, #1
 8000806:	61a3      	str	r3, [r4, #24]
 8000808:	e7d2      	b.n	80007b0 <__sinit+0xc>
 800080a:	bf00      	nop
 800080c:	08001588 	.word	0x08001588
 8000810:	0800073d 	.word	0x0800073d

08000814 <__sfp>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	4607      	mov	r7, r0
 8000818:	f7ff ffac 	bl	8000774 <__sfp_lock_acquire>
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <__sfp+0x84>)
 800081e:	681e      	ldr	r6, [r3, #0]
 8000820:	69b3      	ldr	r3, [r6, #24]
 8000822:	b913      	cbnz	r3, 800082a <__sfp+0x16>
 8000824:	4630      	mov	r0, r6
 8000826:	f7ff ffbd 	bl	80007a4 <__sinit>
 800082a:	3648      	adds	r6, #72	; 0x48
 800082c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000830:	3b01      	subs	r3, #1
 8000832:	d503      	bpl.n	800083c <__sfp+0x28>
 8000834:	6833      	ldr	r3, [r6, #0]
 8000836:	b30b      	cbz	r3, 800087c <__sfp+0x68>
 8000838:	6836      	ldr	r6, [r6, #0]
 800083a:	e7f7      	b.n	800082c <__sfp+0x18>
 800083c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000840:	b9d5      	cbnz	r5, 8000878 <__sfp+0x64>
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <__sfp+0x88>)
 8000844:	60e3      	str	r3, [r4, #12]
 8000846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800084a:	6665      	str	r5, [r4, #100]	; 0x64
 800084c:	f000 f847 	bl	80008de <__retarget_lock_init_recursive>
 8000850:	f7ff ff96 	bl	8000780 <__sfp_lock_release>
 8000854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800085c:	6025      	str	r5, [r4, #0]
 800085e:	61a5      	str	r5, [r4, #24]
 8000860:	2208      	movs	r2, #8
 8000862:	4629      	mov	r1, r5
 8000864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000868:	f7ff ff24 	bl	80006b4 <memset>
 800086c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000874:	4620      	mov	r0, r4
 8000876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000878:	3468      	adds	r4, #104	; 0x68
 800087a:	e7d9      	b.n	8000830 <__sfp+0x1c>
 800087c:	2104      	movs	r1, #4
 800087e:	4638      	mov	r0, r7
 8000880:	f7ff ff62 	bl	8000748 <__sfmoreglue>
 8000884:	4604      	mov	r4, r0
 8000886:	6030      	str	r0, [r6, #0]
 8000888:	2800      	cmp	r0, #0
 800088a:	d1d5      	bne.n	8000838 <__sfp+0x24>
 800088c:	f7ff ff78 	bl	8000780 <__sfp_lock_release>
 8000890:	230c      	movs	r3, #12
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	e7ee      	b.n	8000874 <__sfp+0x60>
 8000896:	bf00      	nop
 8000898:	08001588 	.word	0x08001588
 800089c:	ffff0001 	.word	0xffff0001

080008a0 <_fwalk_reent>:
 80008a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008a4:	4606      	mov	r6, r0
 80008a6:	4688      	mov	r8, r1
 80008a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008ac:	2700      	movs	r7, #0
 80008ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008b2:	f1b9 0901 	subs.w	r9, r9, #1
 80008b6:	d505      	bpl.n	80008c4 <_fwalk_reent+0x24>
 80008b8:	6824      	ldr	r4, [r4, #0]
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d1f7      	bne.n	80008ae <_fwalk_reent+0xe>
 80008be:	4638      	mov	r0, r7
 80008c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008c4:	89ab      	ldrh	r3, [r5, #12]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d907      	bls.n	80008da <_fwalk_reent+0x3a>
 80008ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008ce:	3301      	adds	r3, #1
 80008d0:	d003      	beq.n	80008da <_fwalk_reent+0x3a>
 80008d2:	4629      	mov	r1, r5
 80008d4:	4630      	mov	r0, r6
 80008d6:	47c0      	blx	r8
 80008d8:	4307      	orrs	r7, r0
 80008da:	3568      	adds	r5, #104	; 0x68
 80008dc:	e7e9      	b.n	80008b2 <_fwalk_reent+0x12>

080008de <__retarget_lock_init_recursive>:
 80008de:	4770      	bx	lr

080008e0 <__retarget_lock_acquire_recursive>:
 80008e0:	4770      	bx	lr

080008e2 <__retarget_lock_release_recursive>:
 80008e2:	4770      	bx	lr

080008e4 <_malloc_r>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	1ccd      	adds	r5, r1, #3
 80008e8:	f025 0503 	bic.w	r5, r5, #3
 80008ec:	3508      	adds	r5, #8
 80008ee:	2d0c      	cmp	r5, #12
 80008f0:	bf38      	it	cc
 80008f2:	250c      	movcc	r5, #12
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	4606      	mov	r6, r0
 80008f8:	db01      	blt.n	80008fe <_malloc_r+0x1a>
 80008fa:	42a9      	cmp	r1, r5
 80008fc:	d903      	bls.n	8000906 <_malloc_r+0x22>
 80008fe:	230c      	movs	r3, #12
 8000900:	6033      	str	r3, [r6, #0]
 8000902:	2000      	movs	r0, #0
 8000904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000906:	f000 fda3 	bl	8001450 <__malloc_lock>
 800090a:	4921      	ldr	r1, [pc, #132]	; (8000990 <_malloc_r+0xac>)
 800090c:	680a      	ldr	r2, [r1, #0]
 800090e:	4614      	mov	r4, r2
 8000910:	b99c      	cbnz	r4, 800093a <_malloc_r+0x56>
 8000912:	4f20      	ldr	r7, [pc, #128]	; (8000994 <_malloc_r+0xb0>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b923      	cbnz	r3, 8000922 <_malloc_r+0x3e>
 8000918:	4621      	mov	r1, r4
 800091a:	4630      	mov	r0, r6
 800091c:	f000 fb2a 	bl	8000f74 <_sbrk_r>
 8000920:	6038      	str	r0, [r7, #0]
 8000922:	4629      	mov	r1, r5
 8000924:	4630      	mov	r0, r6
 8000926:	f000 fb25 	bl	8000f74 <_sbrk_r>
 800092a:	1c43      	adds	r3, r0, #1
 800092c:	d123      	bne.n	8000976 <_malloc_r+0x92>
 800092e:	230c      	movs	r3, #12
 8000930:	6033      	str	r3, [r6, #0]
 8000932:	4630      	mov	r0, r6
 8000934:	f000 fd92 	bl	800145c <__malloc_unlock>
 8000938:	e7e3      	b.n	8000902 <_malloc_r+0x1e>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	1b5b      	subs	r3, r3, r5
 800093e:	d417      	bmi.n	8000970 <_malloc_r+0x8c>
 8000940:	2b0b      	cmp	r3, #11
 8000942:	d903      	bls.n	800094c <_malloc_r+0x68>
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	441c      	add	r4, r3
 8000948:	6025      	str	r5, [r4, #0]
 800094a:	e004      	b.n	8000956 <_malloc_r+0x72>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	42a2      	cmp	r2, r4
 8000950:	bf0c      	ite	eq
 8000952:	600b      	streq	r3, [r1, #0]
 8000954:	6053      	strne	r3, [r2, #4]
 8000956:	4630      	mov	r0, r6
 8000958:	f000 fd80 	bl	800145c <__malloc_unlock>
 800095c:	f104 000b 	add.w	r0, r4, #11
 8000960:	1d23      	adds	r3, r4, #4
 8000962:	f020 0007 	bic.w	r0, r0, #7
 8000966:	1ac2      	subs	r2, r0, r3
 8000968:	d0cc      	beq.n	8000904 <_malloc_r+0x20>
 800096a:	1a1b      	subs	r3, r3, r0
 800096c:	50a3      	str	r3, [r4, r2]
 800096e:	e7c9      	b.n	8000904 <_malloc_r+0x20>
 8000970:	4622      	mov	r2, r4
 8000972:	6864      	ldr	r4, [r4, #4]
 8000974:	e7cc      	b.n	8000910 <_malloc_r+0x2c>
 8000976:	1cc4      	adds	r4, r0, #3
 8000978:	f024 0403 	bic.w	r4, r4, #3
 800097c:	42a0      	cmp	r0, r4
 800097e:	d0e3      	beq.n	8000948 <_malloc_r+0x64>
 8000980:	1a21      	subs	r1, r4, r0
 8000982:	4630      	mov	r0, r6
 8000984:	f000 faf6 	bl	8000f74 <_sbrk_r>
 8000988:	3001      	adds	r0, #1
 800098a:	d1dd      	bne.n	8000948 <_malloc_r+0x64>
 800098c:	e7cf      	b.n	800092e <_malloc_r+0x4a>
 800098e:	bf00      	nop
 8000990:	20000084 	.word	0x20000084
 8000994:	20000088 	.word	0x20000088

08000998 <__sfputc_r>:
 8000998:	6893      	ldr	r3, [r2, #8]
 800099a:	3b01      	subs	r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	b410      	push	{r4}
 80009a0:	6093      	str	r3, [r2, #8]
 80009a2:	da08      	bge.n	80009b6 <__sfputc_r+0x1e>
 80009a4:	6994      	ldr	r4, [r2, #24]
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	db01      	blt.n	80009ae <__sfputc_r+0x16>
 80009aa:	290a      	cmp	r1, #10
 80009ac:	d103      	bne.n	80009b6 <__sfputc_r+0x1e>
 80009ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009b2:	f000 bb33 	b.w	800101c <__swbuf_r>
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	1c58      	adds	r0, r3, #1
 80009ba:	6010      	str	r0, [r2, #0]
 80009bc:	7019      	strb	r1, [r3, #0]
 80009be:	4608      	mov	r0, r1
 80009c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <__sfputs_r>:
 80009c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c8:	4606      	mov	r6, r0
 80009ca:	460f      	mov	r7, r1
 80009cc:	4614      	mov	r4, r2
 80009ce:	18d5      	adds	r5, r2, r3
 80009d0:	42ac      	cmp	r4, r5
 80009d2:	d101      	bne.n	80009d8 <__sfputs_r+0x12>
 80009d4:	2000      	movs	r0, #0
 80009d6:	e007      	b.n	80009e8 <__sfputs_r+0x22>
 80009d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009dc:	463a      	mov	r2, r7
 80009de:	4630      	mov	r0, r6
 80009e0:	f7ff ffda 	bl	8000998 <__sfputc_r>
 80009e4:	1c43      	adds	r3, r0, #1
 80009e6:	d1f3      	bne.n	80009d0 <__sfputs_r+0xa>
 80009e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009ec <_vfiprintf_r>:
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	460d      	mov	r5, r1
 80009f2:	b09d      	sub	sp, #116	; 0x74
 80009f4:	4614      	mov	r4, r2
 80009f6:	4698      	mov	r8, r3
 80009f8:	4606      	mov	r6, r0
 80009fa:	b118      	cbz	r0, 8000a04 <_vfiprintf_r+0x18>
 80009fc:	6983      	ldr	r3, [r0, #24]
 80009fe:	b90b      	cbnz	r3, 8000a04 <_vfiprintf_r+0x18>
 8000a00:	f7ff fed0 	bl	80007a4 <__sinit>
 8000a04:	4b89      	ldr	r3, [pc, #548]	; (8000c2c <_vfiprintf_r+0x240>)
 8000a06:	429d      	cmp	r5, r3
 8000a08:	d11b      	bne.n	8000a42 <_vfiprintf_r+0x56>
 8000a0a:	6875      	ldr	r5, [r6, #4]
 8000a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a0e:	07d9      	lsls	r1, r3, #31
 8000a10:	d405      	bmi.n	8000a1e <_vfiprintf_r+0x32>
 8000a12:	89ab      	ldrh	r3, [r5, #12]
 8000a14:	059a      	lsls	r2, r3, #22
 8000a16:	d402      	bmi.n	8000a1e <_vfiprintf_r+0x32>
 8000a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a1a:	f7ff ff61 	bl	80008e0 <__retarget_lock_acquire_recursive>
 8000a1e:	89ab      	ldrh	r3, [r5, #12]
 8000a20:	071b      	lsls	r3, r3, #28
 8000a22:	d501      	bpl.n	8000a28 <_vfiprintf_r+0x3c>
 8000a24:	692b      	ldr	r3, [r5, #16]
 8000a26:	b9eb      	cbnz	r3, 8000a64 <_vfiprintf_r+0x78>
 8000a28:	4629      	mov	r1, r5
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f000 fb5a 	bl	80010e4 <__swsetup_r>
 8000a30:	b1c0      	cbz	r0, 8000a64 <_vfiprintf_r+0x78>
 8000a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a34:	07dc      	lsls	r4, r3, #31
 8000a36:	d50e      	bpl.n	8000a56 <_vfiprintf_r+0x6a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	b01d      	add	sp, #116	; 0x74
 8000a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a42:	4b7b      	ldr	r3, [pc, #492]	; (8000c30 <_vfiprintf_r+0x244>)
 8000a44:	429d      	cmp	r5, r3
 8000a46:	d101      	bne.n	8000a4c <_vfiprintf_r+0x60>
 8000a48:	68b5      	ldr	r5, [r6, #8]
 8000a4a:	e7df      	b.n	8000a0c <_vfiprintf_r+0x20>
 8000a4c:	4b79      	ldr	r3, [pc, #484]	; (8000c34 <_vfiprintf_r+0x248>)
 8000a4e:	429d      	cmp	r5, r3
 8000a50:	bf08      	it	eq
 8000a52:	68f5      	ldreq	r5, [r6, #12]
 8000a54:	e7da      	b.n	8000a0c <_vfiprintf_r+0x20>
 8000a56:	89ab      	ldrh	r3, [r5, #12]
 8000a58:	0598      	lsls	r0, r3, #22
 8000a5a:	d4ed      	bmi.n	8000a38 <_vfiprintf_r+0x4c>
 8000a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a5e:	f7ff ff40 	bl	80008e2 <__retarget_lock_release_recursive>
 8000a62:	e7e9      	b.n	8000a38 <_vfiprintf_r+0x4c>
 8000a64:	2300      	movs	r3, #0
 8000a66:	9309      	str	r3, [sp, #36]	; 0x24
 8000a68:	2320      	movs	r3, #32
 8000a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a72:	2330      	movs	r3, #48	; 0x30
 8000a74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c38 <_vfiprintf_r+0x24c>
 8000a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a7c:	f04f 0901 	mov.w	r9, #1
 8000a80:	4623      	mov	r3, r4
 8000a82:	469a      	mov	sl, r3
 8000a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a88:	b10a      	cbz	r2, 8000a8e <_vfiprintf_r+0xa2>
 8000a8a:	2a25      	cmp	r2, #37	; 0x25
 8000a8c:	d1f9      	bne.n	8000a82 <_vfiprintf_r+0x96>
 8000a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a92:	d00b      	beq.n	8000aac <_vfiprintf_r+0xc0>
 8000a94:	465b      	mov	r3, fp
 8000a96:	4622      	mov	r2, r4
 8000a98:	4629      	mov	r1, r5
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	f7ff ff93 	bl	80009c6 <__sfputs_r>
 8000aa0:	3001      	adds	r0, #1
 8000aa2:	f000 80aa 	beq.w	8000bfa <_vfiprintf_r+0x20e>
 8000aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000aa8:	445a      	add	r2, fp
 8000aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8000aac:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80a2 	beq.w	8000bfa <_vfiprintf_r+0x20e>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ac0:	f10a 0a01 	add.w	sl, sl, #1
 8000ac4:	9304      	str	r3, [sp, #16]
 8000ac6:	9307      	str	r3, [sp, #28]
 8000ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000acc:	931a      	str	r3, [sp, #104]	; 0x68
 8000ace:	4654      	mov	r4, sl
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad6:	4858      	ldr	r0, [pc, #352]	; (8000c38 <_vfiprintf_r+0x24c>)
 8000ad8:	f7ff fb9a 	bl	8000210 <memchr>
 8000adc:	9a04      	ldr	r2, [sp, #16]
 8000ade:	b9d8      	cbnz	r0, 8000b18 <_vfiprintf_r+0x12c>
 8000ae0:	06d1      	lsls	r1, r2, #27
 8000ae2:	bf44      	itt	mi
 8000ae4:	2320      	movmi	r3, #32
 8000ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000aea:	0713      	lsls	r3, r2, #28
 8000aec:	bf44      	itt	mi
 8000aee:	232b      	movmi	r3, #43	; 0x2b
 8000af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000af4:	f89a 3000 	ldrb.w	r3, [sl]
 8000af8:	2b2a      	cmp	r3, #42	; 0x2a
 8000afa:	d015      	beq.n	8000b28 <_vfiprintf_r+0x13c>
 8000afc:	9a07      	ldr	r2, [sp, #28]
 8000afe:	4654      	mov	r4, sl
 8000b00:	2000      	movs	r0, #0
 8000b02:	f04f 0c0a 	mov.w	ip, #10
 8000b06:	4621      	mov	r1, r4
 8000b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b0c:	3b30      	subs	r3, #48	; 0x30
 8000b0e:	2b09      	cmp	r3, #9
 8000b10:	d94e      	bls.n	8000bb0 <_vfiprintf_r+0x1c4>
 8000b12:	b1b0      	cbz	r0, 8000b42 <_vfiprintf_r+0x156>
 8000b14:	9207      	str	r2, [sp, #28]
 8000b16:	e014      	b.n	8000b42 <_vfiprintf_r+0x156>
 8000b18:	eba0 0308 	sub.w	r3, r0, r8
 8000b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	9304      	str	r3, [sp, #16]
 8000b24:	46a2      	mov	sl, r4
 8000b26:	e7d2      	b.n	8000ace <_vfiprintf_r+0xe2>
 8000b28:	9b03      	ldr	r3, [sp, #12]
 8000b2a:	1d19      	adds	r1, r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	9103      	str	r1, [sp, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bfbb      	ittet	lt
 8000b34:	425b      	neglt	r3, r3
 8000b36:	f042 0202 	orrlt.w	r2, r2, #2
 8000b3a:	9307      	strge	r3, [sp, #28]
 8000b3c:	9307      	strlt	r3, [sp, #28]
 8000b3e:	bfb8      	it	lt
 8000b40:	9204      	strlt	r2, [sp, #16]
 8000b42:	7823      	ldrb	r3, [r4, #0]
 8000b44:	2b2e      	cmp	r3, #46	; 0x2e
 8000b46:	d10c      	bne.n	8000b62 <_vfiprintf_r+0x176>
 8000b48:	7863      	ldrb	r3, [r4, #1]
 8000b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b4c:	d135      	bne.n	8000bba <_vfiprintf_r+0x1ce>
 8000b4e:	9b03      	ldr	r3, [sp, #12]
 8000b50:	1d1a      	adds	r2, r3, #4
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	9203      	str	r2, [sp, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bfb8      	it	lt
 8000b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b5e:	3402      	adds	r4, #2
 8000b60:	9305      	str	r3, [sp, #20]
 8000b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c48 <_vfiprintf_r+0x25c>
 8000b66:	7821      	ldrb	r1, [r4, #0]
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4650      	mov	r0, sl
 8000b6c:	f7ff fb50 	bl	8000210 <memchr>
 8000b70:	b140      	cbz	r0, 8000b84 <_vfiprintf_r+0x198>
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	eba0 000a 	sub.w	r0, r0, sl
 8000b78:	fa03 f000 	lsl.w	r0, r3, r0
 8000b7c:	9b04      	ldr	r3, [sp, #16]
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	3401      	adds	r4, #1
 8000b82:	9304      	str	r3, [sp, #16]
 8000b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <_vfiprintf_r+0x250>)
 8000b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b8e:	2206      	movs	r2, #6
 8000b90:	f7ff fb3e 	bl	8000210 <memchr>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d03f      	beq.n	8000c18 <_vfiprintf_r+0x22c>
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <_vfiprintf_r+0x254>)
 8000b9a:	bb1b      	cbnz	r3, 8000be4 <_vfiprintf_r+0x1f8>
 8000b9c:	9b03      	ldr	r3, [sp, #12]
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	f023 0307 	bic.w	r3, r3, #7
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	9303      	str	r3, [sp, #12]
 8000ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000baa:	443b      	add	r3, r7
 8000bac:	9309      	str	r3, [sp, #36]	; 0x24
 8000bae:	e767      	b.n	8000a80 <_vfiprintf_r+0x94>
 8000bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	e7a5      	b.n	8000b06 <_vfiprintf_r+0x11a>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	3401      	adds	r4, #1
 8000bbe:	9305      	str	r3, [sp, #20]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 0c0a 	mov.w	ip, #10
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bcc:	3a30      	subs	r2, #48	; 0x30
 8000bce:	2a09      	cmp	r2, #9
 8000bd0:	d903      	bls.n	8000bda <_vfiprintf_r+0x1ee>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0c5      	beq.n	8000b62 <_vfiprintf_r+0x176>
 8000bd6:	9105      	str	r1, [sp, #20]
 8000bd8:	e7c3      	b.n	8000b62 <_vfiprintf_r+0x176>
 8000bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bde:	4604      	mov	r4, r0
 8000be0:	2301      	movs	r3, #1
 8000be2:	e7f0      	b.n	8000bc6 <_vfiprintf_r+0x1da>
 8000be4:	ab03      	add	r3, sp, #12
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	462a      	mov	r2, r5
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <_vfiprintf_r+0x258>)
 8000bec:	a904      	add	r1, sp, #16
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f3af 8000 	nop.w
 8000bf4:	4607      	mov	r7, r0
 8000bf6:	1c78      	adds	r0, r7, #1
 8000bf8:	d1d6      	bne.n	8000ba8 <_vfiprintf_r+0x1bc>
 8000bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bfc:	07d9      	lsls	r1, r3, #31
 8000bfe:	d405      	bmi.n	8000c0c <_vfiprintf_r+0x220>
 8000c00:	89ab      	ldrh	r3, [r5, #12]
 8000c02:	059a      	lsls	r2, r3, #22
 8000c04:	d402      	bmi.n	8000c0c <_vfiprintf_r+0x220>
 8000c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c08:	f7ff fe6b 	bl	80008e2 <__retarget_lock_release_recursive>
 8000c0c:	89ab      	ldrh	r3, [r5, #12]
 8000c0e:	065b      	lsls	r3, r3, #25
 8000c10:	f53f af12 	bmi.w	8000a38 <_vfiprintf_r+0x4c>
 8000c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c16:	e711      	b.n	8000a3c <_vfiprintf_r+0x50>
 8000c18:	ab03      	add	r3, sp, #12
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	462a      	mov	r2, r5
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <_vfiprintf_r+0x258>)
 8000c20:	a904      	add	r1, sp, #16
 8000c22:	4630      	mov	r0, r6
 8000c24:	f000 f880 	bl	8000d28 <_printf_i>
 8000c28:	e7e4      	b.n	8000bf4 <_vfiprintf_r+0x208>
 8000c2a:	bf00      	nop
 8000c2c:	080015ac 	.word	0x080015ac
 8000c30:	080015cc 	.word	0x080015cc
 8000c34:	0800158c 	.word	0x0800158c
 8000c38:	080015ec 	.word	0x080015ec
 8000c3c:	080015f6 	.word	0x080015f6
 8000c40:	00000000 	.word	0x00000000
 8000c44:	080009c7 	.word	0x080009c7
 8000c48:	080015f2 	.word	0x080015f2

08000c4c <_printf_common>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	4616      	mov	r6, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	688a      	ldr	r2, [r1, #8]
 8000c56:	690b      	ldr	r3, [r1, #16]
 8000c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	bfb8      	it	lt
 8000c60:	4613      	movlt	r3, r2
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c68:	4607      	mov	r7, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	b10a      	cbz	r2, 8000c72 <_printf_common+0x26>
 8000c6e:	3301      	adds	r3, #1
 8000c70:	6033      	str	r3, [r6, #0]
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	0699      	lsls	r1, r3, #26
 8000c76:	bf42      	ittt	mi
 8000c78:	6833      	ldrmi	r3, [r6, #0]
 8000c7a:	3302      	addmi	r3, #2
 8000c7c:	6033      	strmi	r3, [r6, #0]
 8000c7e:	6825      	ldr	r5, [r4, #0]
 8000c80:	f015 0506 	ands.w	r5, r5, #6
 8000c84:	d106      	bne.n	8000c94 <_printf_common+0x48>
 8000c86:	f104 0a19 	add.w	sl, r4, #25
 8000c8a:	68e3      	ldr	r3, [r4, #12]
 8000c8c:	6832      	ldr	r2, [r6, #0]
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	dc26      	bgt.n	8000ce2 <_printf_common+0x96>
 8000c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c98:	1e13      	subs	r3, r2, #0
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	bf18      	it	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	0692      	lsls	r2, r2, #26
 8000ca2:	d42b      	bmi.n	8000cfc <_printf_common+0xb0>
 8000ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ca8:	4649      	mov	r1, r9
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c0      	blx	r8
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d01e      	beq.n	8000cf0 <_printf_common+0xa4>
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	68e5      	ldr	r5, [r4, #12]
 8000cb6:	6832      	ldr	r2, [r6, #0]
 8000cb8:	f003 0306 	and.w	r3, r3, #6
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	bf08      	it	eq
 8000cc0:	1aad      	subeq	r5, r5, r2
 8000cc2:	68a3      	ldr	r3, [r4, #8]
 8000cc4:	6922      	ldr	r2, [r4, #16]
 8000cc6:	bf0c      	ite	eq
 8000cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ccc:	2500      	movne	r5, #0
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	bfc4      	itt	gt
 8000cd2:	1a9b      	subgt	r3, r3, r2
 8000cd4:	18ed      	addgt	r5, r5, r3
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	341a      	adds	r4, #26
 8000cda:	42b5      	cmp	r5, r6
 8000cdc:	d11a      	bne.n	8000d14 <_printf_common+0xc8>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e008      	b.n	8000cf4 <_printf_common+0xa8>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	4638      	mov	r0, r7
 8000cea:	47c0      	blx	r8
 8000cec:	3001      	adds	r0, #1
 8000cee:	d103      	bne.n	8000cf8 <_printf_common+0xac>
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	3501      	adds	r5, #1
 8000cfa:	e7c6      	b.n	8000c8a <_printf_common+0x3e>
 8000cfc:	18e1      	adds	r1, r4, r3
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	2030      	movs	r0, #48	; 0x30
 8000d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d06:	4422      	add	r2, r4
 8000d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d10:	3302      	adds	r3, #2
 8000d12:	e7c7      	b.n	8000ca4 <_printf_common+0x58>
 8000d14:	2301      	movs	r3, #1
 8000d16:	4622      	mov	r2, r4
 8000d18:	4649      	mov	r1, r9
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	47c0      	blx	r8
 8000d1e:	3001      	adds	r0, #1
 8000d20:	d0e6      	beq.n	8000cf0 <_printf_common+0xa4>
 8000d22:	3601      	adds	r6, #1
 8000d24:	e7d9      	b.n	8000cda <_printf_common+0x8e>
	...

08000d28 <_printf_i>:
 8000d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	4691      	mov	r9, r2
 8000d30:	7e27      	ldrb	r7, [r4, #24]
 8000d32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d34:	2f78      	cmp	r7, #120	; 0x78
 8000d36:	4680      	mov	r8, r0
 8000d38:	469a      	mov	sl, r3
 8000d3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d3e:	d807      	bhi.n	8000d50 <_printf_i+0x28>
 8000d40:	2f62      	cmp	r7, #98	; 0x62
 8000d42:	d80a      	bhi.n	8000d5a <_printf_i+0x32>
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	f000 80d8 	beq.w	8000efa <_printf_i+0x1d2>
 8000d4a:	2f58      	cmp	r7, #88	; 0x58
 8000d4c:	f000 80a3 	beq.w	8000e96 <_printf_i+0x16e>
 8000d50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d58:	e03a      	b.n	8000dd0 <_printf_i+0xa8>
 8000d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d5e:	2b15      	cmp	r3, #21
 8000d60:	d8f6      	bhi.n	8000d50 <_printf_i+0x28>
 8000d62:	a001      	add	r0, pc, #4	; (adr r0, 8000d68 <_printf_i+0x40>)
 8000d64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d68:	08000dc1 	.word	0x08000dc1
 8000d6c:	08000dd5 	.word	0x08000dd5
 8000d70:	08000d51 	.word	0x08000d51
 8000d74:	08000d51 	.word	0x08000d51
 8000d78:	08000d51 	.word	0x08000d51
 8000d7c:	08000d51 	.word	0x08000d51
 8000d80:	08000dd5 	.word	0x08000dd5
 8000d84:	08000d51 	.word	0x08000d51
 8000d88:	08000d51 	.word	0x08000d51
 8000d8c:	08000d51 	.word	0x08000d51
 8000d90:	08000d51 	.word	0x08000d51
 8000d94:	08000ee1 	.word	0x08000ee1
 8000d98:	08000e05 	.word	0x08000e05
 8000d9c:	08000ec3 	.word	0x08000ec3
 8000da0:	08000d51 	.word	0x08000d51
 8000da4:	08000d51 	.word	0x08000d51
 8000da8:	08000f03 	.word	0x08000f03
 8000dac:	08000d51 	.word	0x08000d51
 8000db0:	08000e05 	.word	0x08000e05
 8000db4:	08000d51 	.word	0x08000d51
 8000db8:	08000d51 	.word	0x08000d51
 8000dbc:	08000ecb 	.word	0x08000ecb
 8000dc0:	680b      	ldr	r3, [r1, #0]
 8000dc2:	1d1a      	adds	r2, r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	600a      	str	r2, [r1, #0]
 8000dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e0a3      	b.n	8000f1c <_printf_i+0x1f4>
 8000dd4:	6825      	ldr	r5, [r4, #0]
 8000dd6:	6808      	ldr	r0, [r1, #0]
 8000dd8:	062e      	lsls	r6, r5, #24
 8000dda:	f100 0304 	add.w	r3, r0, #4
 8000dde:	d50a      	bpl.n	8000df6 <_printf_i+0xce>
 8000de0:	6805      	ldr	r5, [r0, #0]
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	da03      	bge.n	8000df0 <_printf_i+0xc8>
 8000de8:	232d      	movs	r3, #45	; 0x2d
 8000dea:	426d      	negs	r5, r5
 8000dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000df0:	485e      	ldr	r0, [pc, #376]	; (8000f6c <_printf_i+0x244>)
 8000df2:	230a      	movs	r3, #10
 8000df4:	e019      	b.n	8000e2a <_printf_i+0x102>
 8000df6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dfa:	6805      	ldr	r5, [r0, #0]
 8000dfc:	600b      	str	r3, [r1, #0]
 8000dfe:	bf18      	it	ne
 8000e00:	b22d      	sxthne	r5, r5
 8000e02:	e7ef      	b.n	8000de4 <_printf_i+0xbc>
 8000e04:	680b      	ldr	r3, [r1, #0]
 8000e06:	6825      	ldr	r5, [r4, #0]
 8000e08:	1d18      	adds	r0, r3, #4
 8000e0a:	6008      	str	r0, [r1, #0]
 8000e0c:	0628      	lsls	r0, r5, #24
 8000e0e:	d501      	bpl.n	8000e14 <_printf_i+0xec>
 8000e10:	681d      	ldr	r5, [r3, #0]
 8000e12:	e002      	b.n	8000e1a <_printf_i+0xf2>
 8000e14:	0669      	lsls	r1, r5, #25
 8000e16:	d5fb      	bpl.n	8000e10 <_printf_i+0xe8>
 8000e18:	881d      	ldrh	r5, [r3, #0]
 8000e1a:	4854      	ldr	r0, [pc, #336]	; (8000f6c <_printf_i+0x244>)
 8000e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8000e1e:	bf0c      	ite	eq
 8000e20:	2308      	moveq	r3, #8
 8000e22:	230a      	movne	r3, #10
 8000e24:	2100      	movs	r1, #0
 8000e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e2a:	6866      	ldr	r6, [r4, #4]
 8000e2c:	60a6      	str	r6, [r4, #8]
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	bfa2      	ittt	ge
 8000e32:	6821      	ldrge	r1, [r4, #0]
 8000e34:	f021 0104 	bicge.w	r1, r1, #4
 8000e38:	6021      	strge	r1, [r4, #0]
 8000e3a:	b90d      	cbnz	r5, 8000e40 <_printf_i+0x118>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d04d      	beq.n	8000edc <_printf_i+0x1b4>
 8000e40:	4616      	mov	r6, r2
 8000e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e46:	fb03 5711 	mls	r7, r3, r1, r5
 8000e4a:	5dc7      	ldrb	r7, [r0, r7]
 8000e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e50:	462f      	mov	r7, r5
 8000e52:	42bb      	cmp	r3, r7
 8000e54:	460d      	mov	r5, r1
 8000e56:	d9f4      	bls.n	8000e42 <_printf_i+0x11a>
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d10b      	bne.n	8000e74 <_printf_i+0x14c>
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	07df      	lsls	r7, r3, #31
 8000e60:	d508      	bpl.n	8000e74 <_printf_i+0x14c>
 8000e62:	6923      	ldr	r3, [r4, #16]
 8000e64:	6861      	ldr	r1, [r4, #4]
 8000e66:	4299      	cmp	r1, r3
 8000e68:	bfde      	ittt	le
 8000e6a:	2330      	movle	r3, #48	; 0x30
 8000e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e74:	1b92      	subs	r2, r2, r6
 8000e76:	6122      	str	r2, [r4, #16]
 8000e78:	f8cd a000 	str.w	sl, [sp]
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	aa03      	add	r2, sp, #12
 8000e80:	4621      	mov	r1, r4
 8000e82:	4640      	mov	r0, r8
 8000e84:	f7ff fee2 	bl	8000c4c <_printf_common>
 8000e88:	3001      	adds	r0, #1
 8000e8a:	d14c      	bne.n	8000f26 <_printf_i+0x1fe>
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	b004      	add	sp, #16
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	4835      	ldr	r0, [pc, #212]	; (8000f6c <_printf_i+0x244>)
 8000e98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	680e      	ldr	r6, [r1, #0]
 8000ea0:	061f      	lsls	r7, r3, #24
 8000ea2:	f856 5b04 	ldr.w	r5, [r6], #4
 8000ea6:	600e      	str	r6, [r1, #0]
 8000ea8:	d514      	bpl.n	8000ed4 <_printf_i+0x1ac>
 8000eaa:	07d9      	lsls	r1, r3, #31
 8000eac:	bf44      	itt	mi
 8000eae:	f043 0320 	orrmi.w	r3, r3, #32
 8000eb2:	6023      	strmi	r3, [r4, #0]
 8000eb4:	b91d      	cbnz	r5, 8000ebe <_printf_i+0x196>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	f023 0320 	bic.w	r3, r3, #32
 8000ebc:	6023      	str	r3, [r4, #0]
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	e7b0      	b.n	8000e24 <_printf_i+0xfc>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	2378      	movs	r3, #120	; 0x78
 8000ecc:	4828      	ldr	r0, [pc, #160]	; (8000f70 <_printf_i+0x248>)
 8000ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ed2:	e7e3      	b.n	8000e9c <_printf_i+0x174>
 8000ed4:	065e      	lsls	r6, r3, #25
 8000ed6:	bf48      	it	mi
 8000ed8:	b2ad      	uxthmi	r5, r5
 8000eda:	e7e6      	b.n	8000eaa <_printf_i+0x182>
 8000edc:	4616      	mov	r6, r2
 8000ede:	e7bb      	b.n	8000e58 <_printf_i+0x130>
 8000ee0:	680b      	ldr	r3, [r1, #0]
 8000ee2:	6826      	ldr	r6, [r4, #0]
 8000ee4:	6960      	ldr	r0, [r4, #20]
 8000ee6:	1d1d      	adds	r5, r3, #4
 8000ee8:	600d      	str	r5, [r1, #0]
 8000eea:	0635      	lsls	r5, r6, #24
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	d501      	bpl.n	8000ef4 <_printf_i+0x1cc>
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	e002      	b.n	8000efa <_printf_i+0x1d2>
 8000ef4:	0671      	lsls	r1, r6, #25
 8000ef6:	d5fb      	bpl.n	8000ef0 <_printf_i+0x1c8>
 8000ef8:	8018      	strh	r0, [r3, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	6123      	str	r3, [r4, #16]
 8000efe:	4616      	mov	r6, r2
 8000f00:	e7ba      	b.n	8000e78 <_printf_i+0x150>
 8000f02:	680b      	ldr	r3, [r1, #0]
 8000f04:	1d1a      	adds	r2, r3, #4
 8000f06:	600a      	str	r2, [r1, #0]
 8000f08:	681e      	ldr	r6, [r3, #0]
 8000f0a:	6862      	ldr	r2, [r4, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff f97e 	bl	8000210 <memchr>
 8000f14:	b108      	cbz	r0, 8000f1a <_printf_i+0x1f2>
 8000f16:	1b80      	subs	r0, r0, r6
 8000f18:	6060      	str	r0, [r4, #4]
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	6123      	str	r3, [r4, #16]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f24:	e7a8      	b.n	8000e78 <_printf_i+0x150>
 8000f26:	6923      	ldr	r3, [r4, #16]
 8000f28:	4632      	mov	r2, r6
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	47d0      	blx	sl
 8000f30:	3001      	adds	r0, #1
 8000f32:	d0ab      	beq.n	8000e8c <_printf_i+0x164>
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	079b      	lsls	r3, r3, #30
 8000f38:	d413      	bmi.n	8000f62 <_printf_i+0x23a>
 8000f3a:	68e0      	ldr	r0, [r4, #12]
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	bfb8      	it	lt
 8000f42:	4618      	movlt	r0, r3
 8000f44:	e7a4      	b.n	8000e90 <_printf_i+0x168>
 8000f46:	2301      	movs	r3, #1
 8000f48:	4632      	mov	r2, r6
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	47d0      	blx	sl
 8000f50:	3001      	adds	r0, #1
 8000f52:	d09b      	beq.n	8000e8c <_printf_i+0x164>
 8000f54:	3501      	adds	r5, #1
 8000f56:	68e3      	ldr	r3, [r4, #12]
 8000f58:	9903      	ldr	r1, [sp, #12]
 8000f5a:	1a5b      	subs	r3, r3, r1
 8000f5c:	42ab      	cmp	r3, r5
 8000f5e:	dcf2      	bgt.n	8000f46 <_printf_i+0x21e>
 8000f60:	e7eb      	b.n	8000f3a <_printf_i+0x212>
 8000f62:	2500      	movs	r5, #0
 8000f64:	f104 0619 	add.w	r6, r4, #25
 8000f68:	e7f5      	b.n	8000f56 <_printf_i+0x22e>
 8000f6a:	bf00      	nop
 8000f6c:	080015fd 	.word	0x080015fd
 8000f70:	0800160e 	.word	0x0800160e

08000f74 <_sbrk_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d06      	ldr	r5, [pc, #24]	; (8000f90 <_sbrk_r+0x1c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	f7ff fa7e 	bl	8000480 <_sbrk>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_sbrk_r+0x1a>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_sbrk_r+0x1a>
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <__sread>:
 8000f94:	b510      	push	{r4, lr}
 8000f96:	460c      	mov	r4, r1
 8000f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9c:	f000 fab4 	bl	8001508 <_read_r>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	bfab      	itete	ge
 8000fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fa8:	181b      	addge	r3, r3, r0
 8000faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fae:	bfac      	ite	ge
 8000fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fb2:	81a3      	strhlt	r3, [r4, #12]
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <__swrite>:
 8000fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fba:	461f      	mov	r7, r3
 8000fbc:	898b      	ldrh	r3, [r1, #12]
 8000fbe:	05db      	lsls	r3, r3, #23
 8000fc0:	4605      	mov	r5, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	4616      	mov	r6, r2
 8000fc6:	d505      	bpl.n	8000fd4 <__swrite+0x1e>
 8000fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f000 f9c8 	bl	8001364 <_lseek_r>
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fde:	81a3      	strh	r3, [r4, #12]
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fea:	f000 b869 	b.w	80010c0 <_write_r>

08000fee <__sseek>:
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff6:	f000 f9b5 	bl	8001364 <_lseek_r>
 8000ffa:	1c43      	adds	r3, r0, #1
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	bf15      	itete	ne
 8001000:	6560      	strne	r0, [r4, #84]	; 0x54
 8001002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800100a:	81a3      	strheq	r3, [r4, #12]
 800100c:	bf18      	it	ne
 800100e:	81a3      	strhne	r3, [r4, #12]
 8001010:	bd10      	pop	{r4, pc}

08001012 <__sclose>:
 8001012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001016:	f000 b8d3 	b.w	80011c0 <_close_r>
	...

0800101c <__swbuf_r>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	460e      	mov	r6, r1
 8001020:	4614      	mov	r4, r2
 8001022:	4605      	mov	r5, r0
 8001024:	b118      	cbz	r0, 800102e <__swbuf_r+0x12>
 8001026:	6983      	ldr	r3, [r0, #24]
 8001028:	b90b      	cbnz	r3, 800102e <__swbuf_r+0x12>
 800102a:	f7ff fbbb 	bl	80007a4 <__sinit>
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <__swbuf_r+0x98>)
 8001030:	429c      	cmp	r4, r3
 8001032:	d12b      	bne.n	800108c <__swbuf_r+0x70>
 8001034:	686c      	ldr	r4, [r5, #4]
 8001036:	69a3      	ldr	r3, [r4, #24]
 8001038:	60a3      	str	r3, [r4, #8]
 800103a:	89a3      	ldrh	r3, [r4, #12]
 800103c:	071a      	lsls	r2, r3, #28
 800103e:	d52f      	bpl.n	80010a0 <__swbuf_r+0x84>
 8001040:	6923      	ldr	r3, [r4, #16]
 8001042:	b36b      	cbz	r3, 80010a0 <__swbuf_r+0x84>
 8001044:	6923      	ldr	r3, [r4, #16]
 8001046:	6820      	ldr	r0, [r4, #0]
 8001048:	1ac0      	subs	r0, r0, r3
 800104a:	6963      	ldr	r3, [r4, #20]
 800104c:	b2f6      	uxtb	r6, r6
 800104e:	4283      	cmp	r3, r0
 8001050:	4637      	mov	r7, r6
 8001052:	dc04      	bgt.n	800105e <__swbuf_r+0x42>
 8001054:	4621      	mov	r1, r4
 8001056:	4628      	mov	r0, r5
 8001058:	f000 f948 	bl	80012ec <_fflush_r>
 800105c:	bb30      	cbnz	r0, 80010ac <__swbuf_r+0x90>
 800105e:	68a3      	ldr	r3, [r4, #8]
 8001060:	3b01      	subs	r3, #1
 8001062:	60a3      	str	r3, [r4, #8]
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	6022      	str	r2, [r4, #0]
 800106a:	701e      	strb	r6, [r3, #0]
 800106c:	6963      	ldr	r3, [r4, #20]
 800106e:	3001      	adds	r0, #1
 8001070:	4283      	cmp	r3, r0
 8001072:	d004      	beq.n	800107e <__swbuf_r+0x62>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	07db      	lsls	r3, r3, #31
 8001078:	d506      	bpl.n	8001088 <__swbuf_r+0x6c>
 800107a:	2e0a      	cmp	r6, #10
 800107c:	d104      	bne.n	8001088 <__swbuf_r+0x6c>
 800107e:	4621      	mov	r1, r4
 8001080:	4628      	mov	r0, r5
 8001082:	f000 f933 	bl	80012ec <_fflush_r>
 8001086:	b988      	cbnz	r0, 80010ac <__swbuf_r+0x90>
 8001088:	4638      	mov	r0, r7
 800108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <__swbuf_r+0x9c>)
 800108e:	429c      	cmp	r4, r3
 8001090:	d101      	bne.n	8001096 <__swbuf_r+0x7a>
 8001092:	68ac      	ldr	r4, [r5, #8]
 8001094:	e7cf      	b.n	8001036 <__swbuf_r+0x1a>
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <__swbuf_r+0xa0>)
 8001098:	429c      	cmp	r4, r3
 800109a:	bf08      	it	eq
 800109c:	68ec      	ldreq	r4, [r5, #12]
 800109e:	e7ca      	b.n	8001036 <__swbuf_r+0x1a>
 80010a0:	4621      	mov	r1, r4
 80010a2:	4628      	mov	r0, r5
 80010a4:	f000 f81e 	bl	80010e4 <__swsetup_r>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d0cb      	beq.n	8001044 <__swbuf_r+0x28>
 80010ac:	f04f 37ff 	mov.w	r7, #4294967295
 80010b0:	e7ea      	b.n	8001088 <__swbuf_r+0x6c>
 80010b2:	bf00      	nop
 80010b4:	080015ac 	.word	0x080015ac
 80010b8:	080015cc 	.word	0x080015cc
 80010bc:	0800158c 	.word	0x0800158c

080010c0 <_write_r>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4d07      	ldr	r5, [pc, #28]	; (80010e0 <_write_r+0x20>)
 80010c4:	4604      	mov	r4, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	602a      	str	r2, [r5, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	f7ff f985 	bl	80003de <_write>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	d102      	bne.n	80010de <_write_r+0x1e>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	b103      	cbz	r3, 80010de <_write_r+0x1e>
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	2000009c 	.word	0x2000009c

080010e4 <__swsetup_r>:
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <__swsetup_r+0xcc>)
 80010e6:	b570      	push	{r4, r5, r6, lr}
 80010e8:	681d      	ldr	r5, [r3, #0]
 80010ea:	4606      	mov	r6, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	b125      	cbz	r5, 80010fa <__swsetup_r+0x16>
 80010f0:	69ab      	ldr	r3, [r5, #24]
 80010f2:	b913      	cbnz	r3, 80010fa <__swsetup_r+0x16>
 80010f4:	4628      	mov	r0, r5
 80010f6:	f7ff fb55 	bl	80007a4 <__sinit>
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <__swsetup_r+0xd0>)
 80010fc:	429c      	cmp	r4, r3
 80010fe:	d10f      	bne.n	8001120 <__swsetup_r+0x3c>
 8001100:	686c      	ldr	r4, [r5, #4]
 8001102:	89a3      	ldrh	r3, [r4, #12]
 8001104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001108:	0719      	lsls	r1, r3, #28
 800110a:	d42c      	bmi.n	8001166 <__swsetup_r+0x82>
 800110c:	06dd      	lsls	r5, r3, #27
 800110e:	d411      	bmi.n	8001134 <__swsetup_r+0x50>
 8001110:	2309      	movs	r3, #9
 8001112:	6033      	str	r3, [r6, #0]
 8001114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	f04f 30ff 	mov.w	r0, #4294967295
 800111e:	e03e      	b.n	800119e <__swsetup_r+0xba>
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <__swsetup_r+0xd4>)
 8001122:	429c      	cmp	r4, r3
 8001124:	d101      	bne.n	800112a <__swsetup_r+0x46>
 8001126:	68ac      	ldr	r4, [r5, #8]
 8001128:	e7eb      	b.n	8001102 <__swsetup_r+0x1e>
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <__swsetup_r+0xd8>)
 800112c:	429c      	cmp	r4, r3
 800112e:	bf08      	it	eq
 8001130:	68ec      	ldreq	r4, [r5, #12]
 8001132:	e7e6      	b.n	8001102 <__swsetup_r+0x1e>
 8001134:	0758      	lsls	r0, r3, #29
 8001136:	d512      	bpl.n	800115e <__swsetup_r+0x7a>
 8001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800113a:	b141      	cbz	r1, 800114e <__swsetup_r+0x6a>
 800113c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001140:	4299      	cmp	r1, r3
 8001142:	d002      	beq.n	800114a <__swsetup_r+0x66>
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f98f 	bl	8001468 <_free_r>
 800114a:	2300      	movs	r3, #0
 800114c:	6363      	str	r3, [r4, #52]	; 0x34
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001154:	81a3      	strh	r3, [r4, #12]
 8001156:	2300      	movs	r3, #0
 8001158:	6063      	str	r3, [r4, #4]
 800115a:	6923      	ldr	r3, [r4, #16]
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	89a3      	ldrh	r3, [r4, #12]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	81a3      	strh	r3, [r4, #12]
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	b94b      	cbnz	r3, 800117e <__swsetup_r+0x9a>
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001174:	d003      	beq.n	800117e <__swsetup_r+0x9a>
 8001176:	4621      	mov	r1, r4
 8001178:	4630      	mov	r0, r6
 800117a:	f000 f929 	bl	80013d0 <__smakebuf_r>
 800117e:	89a0      	ldrh	r0, [r4, #12]
 8001180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001184:	f010 0301 	ands.w	r3, r0, #1
 8001188:	d00a      	beq.n	80011a0 <__swsetup_r+0xbc>
 800118a:	2300      	movs	r3, #0
 800118c:	60a3      	str	r3, [r4, #8]
 800118e:	6963      	ldr	r3, [r4, #20]
 8001190:	425b      	negs	r3, r3
 8001192:	61a3      	str	r3, [r4, #24]
 8001194:	6923      	ldr	r3, [r4, #16]
 8001196:	b943      	cbnz	r3, 80011aa <__swsetup_r+0xc6>
 8001198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800119c:	d1ba      	bne.n	8001114 <__swsetup_r+0x30>
 800119e:	bd70      	pop	{r4, r5, r6, pc}
 80011a0:	0781      	lsls	r1, r0, #30
 80011a2:	bf58      	it	pl
 80011a4:	6963      	ldrpl	r3, [r4, #20]
 80011a6:	60a3      	str	r3, [r4, #8]
 80011a8:	e7f4      	b.n	8001194 <__swsetup_r+0xb0>
 80011aa:	2000      	movs	r0, #0
 80011ac:	e7f7      	b.n	800119e <__swsetup_r+0xba>
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	080015ac 	.word	0x080015ac
 80011b8:	080015cc 	.word	0x080015cc
 80011bc:	0800158c 	.word	0x0800158c

080011c0 <_close_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	4d06      	ldr	r5, [pc, #24]	; (80011dc <_close_r+0x1c>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	602b      	str	r3, [r5, #0]
 80011cc:	f7ff f923 	bl	8000416 <_close>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_close_r+0x1a>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	b103      	cbz	r3, 80011da <_close_r+0x1a>
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	2000009c 	.word	0x2000009c

080011e0 <__sflush_r>:
 80011e0:	898a      	ldrh	r2, [r1, #12]
 80011e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e6:	4605      	mov	r5, r0
 80011e8:	0710      	lsls	r0, r2, #28
 80011ea:	460c      	mov	r4, r1
 80011ec:	d458      	bmi.n	80012a0 <__sflush_r+0xc0>
 80011ee:	684b      	ldr	r3, [r1, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dc05      	bgt.n	8001200 <__sflush_r+0x20>
 80011f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dc02      	bgt.n	8001200 <__sflush_r+0x20>
 80011fa:	2000      	movs	r0, #0
 80011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001202:	2e00      	cmp	r6, #0
 8001204:	d0f9      	beq.n	80011fa <__sflush_r+0x1a>
 8001206:	2300      	movs	r3, #0
 8001208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800120c:	682f      	ldr	r7, [r5, #0]
 800120e:	602b      	str	r3, [r5, #0]
 8001210:	d032      	beq.n	8001278 <__sflush_r+0x98>
 8001212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	075a      	lsls	r2, r3, #29
 8001218:	d505      	bpl.n	8001226 <__sflush_r+0x46>
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	1ac0      	subs	r0, r0, r3
 800121e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001220:	b10b      	cbz	r3, 8001226 <__sflush_r+0x46>
 8001222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001224:	1ac0      	subs	r0, r0, r3
 8001226:	2300      	movs	r3, #0
 8001228:	4602      	mov	r2, r0
 800122a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800122c:	6a21      	ldr	r1, [r4, #32]
 800122e:	4628      	mov	r0, r5
 8001230:	47b0      	blx	r6
 8001232:	1c43      	adds	r3, r0, #1
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	d106      	bne.n	8001246 <__sflush_r+0x66>
 8001238:	6829      	ldr	r1, [r5, #0]
 800123a:	291d      	cmp	r1, #29
 800123c:	d82c      	bhi.n	8001298 <__sflush_r+0xb8>
 800123e:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <__sflush_r+0x108>)
 8001240:	40ca      	lsrs	r2, r1
 8001242:	07d6      	lsls	r6, r2, #31
 8001244:	d528      	bpl.n	8001298 <__sflush_r+0xb8>
 8001246:	2200      	movs	r2, #0
 8001248:	6062      	str	r2, [r4, #4]
 800124a:	04d9      	lsls	r1, r3, #19
 800124c:	6922      	ldr	r2, [r4, #16]
 800124e:	6022      	str	r2, [r4, #0]
 8001250:	d504      	bpl.n	800125c <__sflush_r+0x7c>
 8001252:	1c42      	adds	r2, r0, #1
 8001254:	d101      	bne.n	800125a <__sflush_r+0x7a>
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	b903      	cbnz	r3, 800125c <__sflush_r+0x7c>
 800125a:	6560      	str	r0, [r4, #84]	; 0x54
 800125c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800125e:	602f      	str	r7, [r5, #0]
 8001260:	2900      	cmp	r1, #0
 8001262:	d0ca      	beq.n	80011fa <__sflush_r+0x1a>
 8001264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001268:	4299      	cmp	r1, r3
 800126a:	d002      	beq.n	8001272 <__sflush_r+0x92>
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f8fb 	bl	8001468 <_free_r>
 8001272:	2000      	movs	r0, #0
 8001274:	6360      	str	r0, [r4, #52]	; 0x34
 8001276:	e7c1      	b.n	80011fc <__sflush_r+0x1c>
 8001278:	6a21      	ldr	r1, [r4, #32]
 800127a:	2301      	movs	r3, #1
 800127c:	4628      	mov	r0, r5
 800127e:	47b0      	blx	r6
 8001280:	1c41      	adds	r1, r0, #1
 8001282:	d1c7      	bne.n	8001214 <__sflush_r+0x34>
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0c4      	beq.n	8001214 <__sflush_r+0x34>
 800128a:	2b1d      	cmp	r3, #29
 800128c:	d001      	beq.n	8001292 <__sflush_r+0xb2>
 800128e:	2b16      	cmp	r3, #22
 8001290:	d101      	bne.n	8001296 <__sflush_r+0xb6>
 8001292:	602f      	str	r7, [r5, #0]
 8001294:	e7b1      	b.n	80011fa <__sflush_r+0x1a>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	81a3      	strh	r3, [r4, #12]
 800129e:	e7ad      	b.n	80011fc <__sflush_r+0x1c>
 80012a0:	690f      	ldr	r7, [r1, #16]
 80012a2:	2f00      	cmp	r7, #0
 80012a4:	d0a9      	beq.n	80011fa <__sflush_r+0x1a>
 80012a6:	0793      	lsls	r3, r2, #30
 80012a8:	680e      	ldr	r6, [r1, #0]
 80012aa:	bf08      	it	eq
 80012ac:	694b      	ldreq	r3, [r1, #20]
 80012ae:	600f      	str	r7, [r1, #0]
 80012b0:	bf18      	it	ne
 80012b2:	2300      	movne	r3, #0
 80012b4:	eba6 0807 	sub.w	r8, r6, r7
 80012b8:	608b      	str	r3, [r1, #8]
 80012ba:	f1b8 0f00 	cmp.w	r8, #0
 80012be:	dd9c      	ble.n	80011fa <__sflush_r+0x1a>
 80012c0:	6a21      	ldr	r1, [r4, #32]
 80012c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012c4:	4643      	mov	r3, r8
 80012c6:	463a      	mov	r2, r7
 80012c8:	4628      	mov	r0, r5
 80012ca:	47b0      	blx	r6
 80012cc:	2800      	cmp	r0, #0
 80012ce:	dc06      	bgt.n	80012de <__sflush_r+0xfe>
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d6:	81a3      	strh	r3, [r4, #12]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	e78e      	b.n	80011fc <__sflush_r+0x1c>
 80012de:	4407      	add	r7, r0
 80012e0:	eba8 0800 	sub.w	r8, r8, r0
 80012e4:	e7e9      	b.n	80012ba <__sflush_r+0xda>
 80012e6:	bf00      	nop
 80012e8:	20400001 	.word	0x20400001

080012ec <_fflush_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	690b      	ldr	r3, [r1, #16]
 80012f0:	4605      	mov	r5, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	b913      	cbnz	r3, 80012fc <_fflush_r+0x10>
 80012f6:	2500      	movs	r5, #0
 80012f8:	4628      	mov	r0, r5
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	b118      	cbz	r0, 8001306 <_fflush_r+0x1a>
 80012fe:	6983      	ldr	r3, [r0, #24]
 8001300:	b90b      	cbnz	r3, 8001306 <_fflush_r+0x1a>
 8001302:	f7ff fa4f 	bl	80007a4 <__sinit>
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <_fflush_r+0x6c>)
 8001308:	429c      	cmp	r4, r3
 800130a:	d11b      	bne.n	8001344 <_fflush_r+0x58>
 800130c:	686c      	ldr	r4, [r5, #4]
 800130e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0ef      	beq.n	80012f6 <_fflush_r+0xa>
 8001316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001318:	07d0      	lsls	r0, r2, #31
 800131a:	d404      	bmi.n	8001326 <_fflush_r+0x3a>
 800131c:	0599      	lsls	r1, r3, #22
 800131e:	d402      	bmi.n	8001326 <_fflush_r+0x3a>
 8001320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001322:	f7ff fadd 	bl	80008e0 <__retarget_lock_acquire_recursive>
 8001326:	4628      	mov	r0, r5
 8001328:	4621      	mov	r1, r4
 800132a:	f7ff ff59 	bl	80011e0 <__sflush_r>
 800132e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001330:	07da      	lsls	r2, r3, #31
 8001332:	4605      	mov	r5, r0
 8001334:	d4e0      	bmi.n	80012f8 <_fflush_r+0xc>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	059b      	lsls	r3, r3, #22
 800133a:	d4dd      	bmi.n	80012f8 <_fflush_r+0xc>
 800133c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800133e:	f7ff fad0 	bl	80008e2 <__retarget_lock_release_recursive>
 8001342:	e7d9      	b.n	80012f8 <_fflush_r+0xc>
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <_fflush_r+0x70>)
 8001346:	429c      	cmp	r4, r3
 8001348:	d101      	bne.n	800134e <_fflush_r+0x62>
 800134a:	68ac      	ldr	r4, [r5, #8]
 800134c:	e7df      	b.n	800130e <_fflush_r+0x22>
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <_fflush_r+0x74>)
 8001350:	429c      	cmp	r4, r3
 8001352:	bf08      	it	eq
 8001354:	68ec      	ldreq	r4, [r5, #12]
 8001356:	e7da      	b.n	800130e <_fflush_r+0x22>
 8001358:	080015ac 	.word	0x080015ac
 800135c:	080015cc 	.word	0x080015cc
 8001360:	0800158c 	.word	0x0800158c

08001364 <_lseek_r>:
 8001364:	b538      	push	{r3, r4, r5, lr}
 8001366:	4d07      	ldr	r5, [pc, #28]	; (8001384 <_lseek_r+0x20>)
 8001368:	4604      	mov	r4, r0
 800136a:	4608      	mov	r0, r1
 800136c:	4611      	mov	r1, r2
 800136e:	2200      	movs	r2, #0
 8001370:	602a      	str	r2, [r5, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	f7ff f876 	bl	8000464 <_lseek>
 8001378:	1c43      	adds	r3, r0, #1
 800137a:	d102      	bne.n	8001382 <_lseek_r+0x1e>
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	b103      	cbz	r3, 8001382 <_lseek_r+0x1e>
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	2000009c 	.word	0x2000009c

08001388 <__swhatbuf_r>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	460e      	mov	r6, r1
 800138c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001390:	2900      	cmp	r1, #0
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	4614      	mov	r4, r2
 8001396:	461d      	mov	r5, r3
 8001398:	da07      	bge.n	80013aa <__swhatbuf_r+0x22>
 800139a:	2300      	movs	r3, #0
 800139c:	602b      	str	r3, [r5, #0]
 800139e:	89b3      	ldrh	r3, [r6, #12]
 80013a0:	061a      	lsls	r2, r3, #24
 80013a2:	d410      	bmi.n	80013c6 <__swhatbuf_r+0x3e>
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	e00e      	b.n	80013c8 <__swhatbuf_r+0x40>
 80013aa:	466a      	mov	r2, sp
 80013ac:	f000 f8be 	bl	800152c <_fstat_r>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	dbf2      	blt.n	800139a <__swhatbuf_r+0x12>
 80013b4:	9a01      	ldr	r2, [sp, #4]
 80013b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013be:	425a      	negs	r2, r3
 80013c0:	415a      	adcs	r2, r3
 80013c2:	602a      	str	r2, [r5, #0]
 80013c4:	e7ee      	b.n	80013a4 <__swhatbuf_r+0x1c>
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	2000      	movs	r0, #0
 80013ca:	6023      	str	r3, [r4, #0]
 80013cc:	b016      	add	sp, #88	; 0x58
 80013ce:	bd70      	pop	{r4, r5, r6, pc}

080013d0 <__smakebuf_r>:
 80013d0:	898b      	ldrh	r3, [r1, #12]
 80013d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013d4:	079d      	lsls	r5, r3, #30
 80013d6:	4606      	mov	r6, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	d507      	bpl.n	80013ec <__smakebuf_r+0x1c>
 80013dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	6123      	str	r3, [r4, #16]
 80013e4:	2301      	movs	r3, #1
 80013e6:	6163      	str	r3, [r4, #20]
 80013e8:	b002      	add	sp, #8
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	ab01      	add	r3, sp, #4
 80013ee:	466a      	mov	r2, sp
 80013f0:	f7ff ffca 	bl	8001388 <__swhatbuf_r>
 80013f4:	9900      	ldr	r1, [sp, #0]
 80013f6:	4605      	mov	r5, r0
 80013f8:	4630      	mov	r0, r6
 80013fa:	f7ff fa73 	bl	80008e4 <_malloc_r>
 80013fe:	b948      	cbnz	r0, 8001414 <__smakebuf_r+0x44>
 8001400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001404:	059a      	lsls	r2, r3, #22
 8001406:	d4ef      	bmi.n	80013e8 <__smakebuf_r+0x18>
 8001408:	f023 0303 	bic.w	r3, r3, #3
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	e7e3      	b.n	80013dc <__smakebuf_r+0xc>
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <__smakebuf_r+0x7c>)
 8001416:	62b3      	str	r3, [r6, #40]	; 0x28
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	6020      	str	r0, [r4, #0]
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	81a3      	strh	r3, [r4, #12]
 8001422:	9b00      	ldr	r3, [sp, #0]
 8001424:	6163      	str	r3, [r4, #20]
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	6120      	str	r0, [r4, #16]
 800142a:	b15b      	cbz	r3, 8001444 <__smakebuf_r+0x74>
 800142c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001430:	4630      	mov	r0, r6
 8001432:	f000 f88d 	bl	8001550 <_isatty_r>
 8001436:	b128      	cbz	r0, 8001444 <__smakebuf_r+0x74>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	89a0      	ldrh	r0, [r4, #12]
 8001446:	4305      	orrs	r5, r0
 8001448:	81a5      	strh	r5, [r4, #12]
 800144a:	e7cd      	b.n	80013e8 <__smakebuf_r+0x18>
 800144c:	0800073d 	.word	0x0800073d

08001450 <__malloc_lock>:
 8001450:	4801      	ldr	r0, [pc, #4]	; (8001458 <__malloc_lock+0x8>)
 8001452:	f7ff ba45 	b.w	80008e0 <__retarget_lock_acquire_recursive>
 8001456:	bf00      	nop
 8001458:	20000094 	.word	0x20000094

0800145c <__malloc_unlock>:
 800145c:	4801      	ldr	r0, [pc, #4]	; (8001464 <__malloc_unlock+0x8>)
 800145e:	f7ff ba40 	b.w	80008e2 <__retarget_lock_release_recursive>
 8001462:	bf00      	nop
 8001464:	20000094 	.word	0x20000094

08001468 <_free_r>:
 8001468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800146a:	2900      	cmp	r1, #0
 800146c:	d048      	beq.n	8001500 <_free_r+0x98>
 800146e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001472:	9001      	str	r0, [sp, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f1a1 0404 	sub.w	r4, r1, #4
 800147a:	bfb8      	it	lt
 800147c:	18e4      	addlt	r4, r4, r3
 800147e:	f7ff ffe7 	bl	8001450 <__malloc_lock>
 8001482:	4a20      	ldr	r2, [pc, #128]	; (8001504 <_free_r+0x9c>)
 8001484:	9801      	ldr	r0, [sp, #4]
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	4615      	mov	r5, r2
 800148a:	b933      	cbnz	r3, 800149a <_free_r+0x32>
 800148c:	6063      	str	r3, [r4, #4]
 800148e:	6014      	str	r4, [r2, #0]
 8001490:	b003      	add	sp, #12
 8001492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001496:	f7ff bfe1 	b.w	800145c <__malloc_unlock>
 800149a:	42a3      	cmp	r3, r4
 800149c:	d90b      	bls.n	80014b6 <_free_r+0x4e>
 800149e:	6821      	ldr	r1, [r4, #0]
 80014a0:	1862      	adds	r2, r4, r1
 80014a2:	4293      	cmp	r3, r2
 80014a4:	bf04      	itt	eq
 80014a6:	681a      	ldreq	r2, [r3, #0]
 80014a8:	685b      	ldreq	r3, [r3, #4]
 80014aa:	6063      	str	r3, [r4, #4]
 80014ac:	bf04      	itt	eq
 80014ae:	1852      	addeq	r2, r2, r1
 80014b0:	6022      	streq	r2, [r4, #0]
 80014b2:	602c      	str	r4, [r5, #0]
 80014b4:	e7ec      	b.n	8001490 <_free_r+0x28>
 80014b6:	461a      	mov	r2, r3
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	b10b      	cbz	r3, 80014c0 <_free_r+0x58>
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d9fa      	bls.n	80014b6 <_free_r+0x4e>
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	1855      	adds	r5, r2, r1
 80014c4:	42a5      	cmp	r5, r4
 80014c6:	d10b      	bne.n	80014e0 <_free_r+0x78>
 80014c8:	6824      	ldr	r4, [r4, #0]
 80014ca:	4421      	add	r1, r4
 80014cc:	1854      	adds	r4, r2, r1
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	6011      	str	r1, [r2, #0]
 80014d2:	d1dd      	bne.n	8001490 <_free_r+0x28>
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	6053      	str	r3, [r2, #4]
 80014da:	4421      	add	r1, r4
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	e7d7      	b.n	8001490 <_free_r+0x28>
 80014e0:	d902      	bls.n	80014e8 <_free_r+0x80>
 80014e2:	230c      	movs	r3, #12
 80014e4:	6003      	str	r3, [r0, #0]
 80014e6:	e7d3      	b.n	8001490 <_free_r+0x28>
 80014e8:	6825      	ldr	r5, [r4, #0]
 80014ea:	1961      	adds	r1, r4, r5
 80014ec:	428b      	cmp	r3, r1
 80014ee:	bf04      	itt	eq
 80014f0:	6819      	ldreq	r1, [r3, #0]
 80014f2:	685b      	ldreq	r3, [r3, #4]
 80014f4:	6063      	str	r3, [r4, #4]
 80014f6:	bf04      	itt	eq
 80014f8:	1949      	addeq	r1, r1, r5
 80014fa:	6021      	streq	r1, [r4, #0]
 80014fc:	6054      	str	r4, [r2, #4]
 80014fe:	e7c7      	b.n	8001490 <_free_r+0x28>
 8001500:	b003      	add	sp, #12
 8001502:	bd30      	pop	{r4, r5, pc}
 8001504:	20000084 	.word	0x20000084

08001508 <_read_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d07      	ldr	r5, [pc, #28]	; (8001528 <_read_r+0x20>)
 800150c:	4604      	mov	r4, r0
 800150e:	4608      	mov	r0, r1
 8001510:	4611      	mov	r1, r2
 8001512:	2200      	movs	r2, #0
 8001514:	602a      	str	r2, [r5, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f7fe ff44 	bl	80003a4 <_read>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_read_r+0x1e>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_read_r+0x1e>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	2000009c 	.word	0x2000009c

0800152c <_fstat_r>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4d07      	ldr	r5, [pc, #28]	; (800154c <_fstat_r+0x20>)
 8001530:	2300      	movs	r3, #0
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	602b      	str	r3, [r5, #0]
 800153a:	f7fe ff78 	bl	800042e <_fstat>
 800153e:	1c43      	adds	r3, r0, #1
 8001540:	d102      	bne.n	8001548 <_fstat_r+0x1c>
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	b103      	cbz	r3, 8001548 <_fstat_r+0x1c>
 8001546:	6023      	str	r3, [r4, #0]
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	bf00      	nop
 800154c:	2000009c 	.word	0x2000009c

08001550 <_isatty_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d06      	ldr	r5, [pc, #24]	; (800156c <_isatty_r+0x1c>)
 8001554:	2300      	movs	r3, #0
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	602b      	str	r3, [r5, #0]
 800155c:	f7fe ff77 	bl	800044e <_isatty>
 8001560:	1c43      	adds	r3, r0, #1
 8001562:	d102      	bne.n	800156a <_isatty_r+0x1a>
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	b103      	cbz	r3, 800156a <_isatty_r+0x1a>
 8001568:	6023      	str	r3, [r4, #0]
 800156a:	bd38      	pop	{r3, r4, r5, pc}
 800156c:	2000009c 	.word	0x2000009c

08001570 <_init>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr

0800157c <_fini>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr
