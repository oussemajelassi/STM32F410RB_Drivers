
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  000103d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d8  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004ae  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000016b  00000000  00000000  000108b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bee5  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000573  00000000  00000000  0001c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004142b  00000000  00000000  0001cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005e353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  0005e3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003b8 	.word	0x080003b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003b8 	.word	0x080003b8

08000208 <set_baudrate_usart2>:
         }
*/


static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	f043 0201 	orr.w	r2, r3, #1
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f043 0202 	orr.w	r2, r3, #2
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	f043 0208 	orr.w	r2, r3, #8
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	609a      	str	r2, [r3, #8]
          }
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <main>:
int main(void)
             {UART_TX_init();
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
 8000254:	f000 f804 	bl	8000260 <UART_TX_init>
	          while(1)
	               {
	        	    senddata((uint8_t )'a');
 8000258:	2061      	movs	r0, #97	; 0x61
 800025a:	f000 f849 	bl	80002f0 <senddata>
 800025e:	e7fb      	b.n	8000258 <main+0x8>

08000260 <UART_TX_init>:

             }


void UART_TX_init(void)
     {/*************enable clock access to gpioA *******************/
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	   RCC->AHB1ENR|=GPIOAEN;
 8000264:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <UART_TX_init+0x80>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000268:	4a1d      	ldr	r2, [pc, #116]	; (80002e0 <UART_TX_init+0x80>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6313      	str	r3, [r2, #48]	; 0x30


	   /*************Set mode to alternate func***************/
	   GPIOA->MODER|=(1U<<5);
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <UART_TX_init+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1b      	ldr	r2, [pc, #108]	; (80002e4 <UART_TX_init+0x84>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6013      	str	r3, [r2, #0]
       GPIOA->MODER&=~(1U<<4);
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <UART_TX_init+0x84>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <UART_TX_init+0x84>)
 8000282:	f023 0310 	bic.w	r3, r3, #16
 8000286:	6013      	str	r3, [r2, #0]
       /*****Configure to AF7 As indicated in the alternate function mapping */
       GPIOA->AFR[0]|=(1U<<8);
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <UART_TX_init+0x84>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <UART_TX_init+0x84>)
 800028e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000292:	6213      	str	r3, [r2, #32]
       GPIOA->AFR[0]|=(1U<<9);
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <UART_TX_init+0x84>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <UART_TX_init+0x84>)
 800029a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029e:	6213      	str	r3, [r2, #32]
       GPIOA->AFR[0]|=(1U<<10);
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <UART_TX_init+0x84>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <UART_TX_init+0x84>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6213      	str	r3, [r2, #32]

       /**************enable clock access to usart2******************/
       RCC->APB1ENR|=(1U<<17);
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <UART_TX_init+0x80>)
 80002ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <UART_TX_init+0x80>)
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	6413      	str	r3, [r2, #64]	; 0x40

       /****************CONFIGURE BAUDRATE***********/
       set_baudrate_usart2(USART2,periph_freq,baudrate);
 80002b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002bc:	490a      	ldr	r1, [pc, #40]	; (80002e8 <UART_TX_init+0x88>)
 80002be:	480b      	ldr	r0, [pc, #44]	; (80002ec <UART_TX_init+0x8c>)
 80002c0:	f7ff ffa2 	bl	8000208 <set_baudrate_usart2>
       /*********configure transfert direction */
       USART2->CR1|=(1U<<3);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <UART_TX_init+0x8c>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a08      	ldr	r2, [pc, #32]	; (80002ec <UART_TX_init+0x8c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	60d3      	str	r3, [r2, #12]
       /***********enable uart module **************/
       USART2->CR1|=(1U<<13);
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <UART_TX_init+0x8c>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <UART_TX_init+0x8c>)
 80002d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002da:	60d3      	str	r3, [r2, #12]
         }
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	00f42400 	.word	0x00f42400
 80002ec:	40004400 	.word	0x40004400

080002f0 <senddata>:

void senddata(int a)
     {/*make sure the Transmit data register is empty : check the STATUS REG */
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]


        	   USART2->DR=a;
 80002f8:	4a07      	ldr	r2, [pc, #28]	; (8000318 <senddata+0x28>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6053      	str	r3, [r2, #4]
        	   while(!(USART2->SR)&&(1U<<6)) {}
 80002fe:	bf00      	nop
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <senddata+0x28>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0fb      	beq.n	8000300 <senddata+0x10>

     }
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40004400 	.word	0x40004400

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff7f 	bl	8000250 <main>

08000352 <LoopForever>:

LoopForever:
    b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	; (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	; (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	; (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
