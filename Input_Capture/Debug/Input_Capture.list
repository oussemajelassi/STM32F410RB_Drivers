
Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000418  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000155c  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c5  00000000  00000000  000119a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00011d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00011df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ce27  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010f8  00000000  00000000  0001ec6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004584d  00000000  00000000  0001fd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000655b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00065608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003f8 	.word	0x080003f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003f8 	.word	0x080003f8

08000208 <TIM1_PA8_input_capture>:
#include "Input_Capture.h"



void TIM1_PA8_input_capture(void)
    {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR|=GPIOAEN;
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <TIM1_PA8_input_capture+0x78>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <TIM1_PA8_input_capture+0x78>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA8 to alternate func*/
	  GPIOA->MODER|=(1U<<17);
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <TIM1_PA8_input_capture+0x7c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a19      	ldr	r2, [pc, #100]	; (8000284 <TIM1_PA8_input_capture+0x7c>)
 800021e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000222:	6013      	str	r3, [r2, #0]
	/*Set PA8 to AF1*/
	  GPIOA->AFR[1]|=(1U<<0);
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <TIM1_PA8_input_capture+0x7c>)
 8000226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <TIM1_PA8_input_capture+0x7c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6253      	str	r3, [r2, #36]	; 0x24
	/*Enable clock access to TIM1*/
	  RCC->APB2ENR|=(1U<<0);
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <TIM1_PA8_input_capture+0x78>)
 8000232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <TIM1_PA8_input_capture+0x78>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6453      	str	r3, [r2, #68]	; 0x44
	/*Set prescaler*/
	  TIM1->PSC=16000-1;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 800023e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000242:	629a      	str	r2, [r3, #40]	; 0x28
	  /*ARR*/
	  //TIM1->ARR=0xFFFF;
	/*Set timer to input capture*/
	 TIM1->CCMR1|=(1U<<0);
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6193      	str	r3, [r2, #24]
	 TIM1->CCMR1|=(1U<<6);
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 8000256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025a:	6193      	str	r3, [r2, #24]
	/*Choose rising edge*/
	  /*Enable capture*/
	  TIM1->CCER|=(1U<<0);
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6213      	str	r3, [r2, #32]
	 /* NVIC_EnableIRQ(24);
	  NVIC_EnableIRQ(25);
	  NVIC_EnableIRQ(26);
	  NVIC_EnableIRQ(27);*/
	  /*Enable the timer*/
	  TIM1->CR1|=(1U<<0);
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <TIM1_PA8_input_capture+0x80>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]
      }
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	40010000 	.word	0x40010000

0800028c <main>:
int freq;
int period;
int previous;
int current;
                 int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
                	 Timer_PA0_init__XHZ(2);
 8000290:	2002      	movs	r0, #2
 8000292:	f000 f81d 	bl	80002d0 <Timer_PA0_init__XHZ>
                	 TIM1_PA8_input_capture();
 8000296:	f7ff ffb7 	bl	8000208 <TIM1_PA8_input_capture>
while(1){

while (!(TIM1->SR&(1U<<1))){}
 800029a:	bf00      	nop
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0x38>)
 800029e:	691b      	ldr	r3, [r3, #16]
 80002a0:	f003 0302 	and.w	r3, r3, #2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f9      	beq.n	800029c <main+0x10>
period=(TIM1->CCR1)/1000;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0x38>)
 80002aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <main+0x3c>)
 80002ae:	fba2 2303 	umull	r2, r3, r2, r3
 80002b2:	099b      	lsrs	r3, r3, #6
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <main+0x40>)
 80002b8:	601a      	str	r2, [r3, #0]
TIM1->CNT=0;
 80002ba:	4b02      	ldr	r3, [pc, #8]	; (80002c4 <main+0x38>)
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
while (!(TIM1->SR&(1U<<1))){}
 80002c0:	e7eb      	b.n	800029a <main+0xe>
 80002c2:	bf00      	nop
 80002c4:	40010000 	.word	0x40010000
 80002c8:	10624dd3 	.word	0x10624dd3
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <Timer_PA0_init__XHZ>:





void Timer_PA0_init__XHZ(int X){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	/*enable clock access to GPIOA*/
     RCC->AHB1ENR|=GPIOAEN;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <Timer_PA0_init__XHZ+0x80>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <Timer_PA0_init__XHZ+0x80>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to alternate function*/
    GPIOA->MODER|=PA5ALTEREN;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <Timer_PA0_init__XHZ+0x84>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <Timer_PA0_init__XHZ+0x84>)
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6013      	str	r3, [r2, #0]

    /*set PA0 to alternate func tim5 channel*/
    GPIOA->AFR[0]|=(1U<<1);
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <Timer_PA0_init__XHZ+0x84>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <Timer_PA0_init__XHZ+0x84>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6213      	str	r3, [r2, #32]

    /***********************enable clock access to TIMER5	**************/
	RCC->APB1ENR|=Timer5EN;
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <Timer_PA0_init__XHZ+0x80>)
 80002fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <Timer_PA0_init__XHZ+0x80>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6413      	str	r3, [r2, #64]	; 0x40

    /***********************Set prescaler*****************************/
	TIM5->PSC=1599; // 1600 -1
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 800030a:	f240 623f 	movw	r2, #1599	; 0x63f
 800030e:	629a      	str	r2, [r3, #40]	; 0x28

    /***********************SET ARR***********************************/
	TIM5->ARR=(10000/X) -1; //10000-1  BECAUSE 16,000,000=1600*10000
 8000310:	f242 7210 	movw	r2, #10000	; 0x2710
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	fb92 f3f3 	sdiv	r3, r2, r3
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c

    /*********Set timer5 to output compare toggle mode*********/
	TIM5->CCMR1=COMPAREEN;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 8000322:	2230      	movs	r2, #48	; 0x30
 8000324:	619a      	str	r2, [r3, #24]

	/*enable tim5 channel 1 to compare mode*/
	TIM5->CCER|=ComparemodeEN;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 8000328:	6a1b      	ldr	r3, [r3, #32]
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6213      	str	r3, [r2, #32]


	/***********************Clear counter*****************************/
	TIM5->CNT=0;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
	/***********************ENABLE TIMER *****************************/
	TIM5->CR1|=CNTEN;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <Timer_PA0_init__XHZ+0x88>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]

                         }
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	40000c00 	.word	0x40000c00

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff7d 	bl	800028c <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000034 	.word	0x20000034

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
