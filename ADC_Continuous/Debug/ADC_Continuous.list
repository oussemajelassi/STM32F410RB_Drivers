
ADC_Continuous.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000139c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800156c  0800156c  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001618  08001618  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001618  08001618  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001618  08001618  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001618  08001618  00011618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001684  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001684  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024da  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007bd  00000000  00000000  0002256e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00022d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00022ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d9ed  00000000  00000000  00022fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bfb  00000000  00000000  000309b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047057  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00079607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c2c  00000000  00000000  0007965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001554 	.word	0x08001554

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001554 	.word	0x08001554

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ADC_init>:
#define EOC 				(1U<<1)
#define CONT				(1U<<1)


void ADC_init(void)
   {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*I will use channel 1 == PA1*/
	/*enable clock access to GPIOA*/
	RCC->AHB1ENR|=GPIOA_Clock;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <ADC_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <ADC_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA1 to analog*/
	GPIOA->MODER|=PA1_analog;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <ADC_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <ADC_init+0x5c>)
 80002c6:	f043 030c 	orr.w	r3, r3, #12
 80002ca:	6013      	str	r3, [r2, #0]

	/*******************************Configure ADC*********************/
	/*enable clock access to ADC APB2*/
	RCC->APB2ENR|=ADC_Clock;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <ADC_init+0x58>)
 80002ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <ADC_init+0x58>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6453      	str	r3, [r2, #68]	; 0x44
	/************Conversion sequence start ===  what is the first channel********/
	// I will use channel 1 first so SEQ 1 is channel 1
	// If i wanted to use for example channel 4 as SEQ2 i should configure SEQ2 as channel 4
	ADC1->SQR3|=SEQ1_Ch1;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <ADC_init+0x60>)
 80002da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <ADC_init+0x60>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6353      	str	r3, [r2, #52]	; 0x34
	/*Conversion sequence length     ===  How many channels*/
	ADC1->SQR1&=~length;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <ADC_init+0x60>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <ADC_init+0x60>)
 80002ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002ee:	62d3      	str	r3, [r2, #44]	; 0x2c


	/*Enable ADC module*/
	ADC1->CR2|=ADC_EN;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <ADC_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <ADC_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

   }
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <Start_Conversion>:


void Start_Conversion(void)
	{/*Set Continuous mode*/
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	 ADC1->CR2|=CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <Start_Conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <Start_Conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start the conversion*/
	ADC1->CR2|=Start_bit;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <Start_Conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <Start_Conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032e:	6093      	str	r3, [r2, #8]

	}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <read_ADC>:

uint32_t read_ADC(void)
	{/*wait for conversion to be complete*/
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	while(!(ADC1->SR)&EOC){}
 8000344:	bf00      	nop
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <read_ADC+0x18>)
 8000348:	681b      	ldr	r3, [r3, #0]
	/*return the result*/
	return (ADC1->DR);
 800034a:	4b03      	ldr	r3, [pc, #12]	; (8000358 <read_ADC+0x18>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40012000 	.word	0x40012000

0800035c <main>:

#include "ADC.h"
#include "uart.h"

int main(void)
{   uint32_t sensor_value=0;
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]

	UART_TX_init();
 8000366:	f000 f8e5 	bl	8000534 <UART_TX_init>
    ADC_init();
 800036a:	f7ff ffa1 	bl	80002b0 <ADC_init>
    Start_Conversion();
 800036e:	f7ff ffd1 	bl	8000314 <Start_Conversion>

    while(1)
    	{
    	sensor_value=read_ADC();
 8000372:	f7ff ffe5 	bl	8000340 <read_ADC>
 8000376:	6078      	str	r0, [r7, #4]
    	printf("sensor value is %d",(int)sensor_value);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	4801      	ldr	r0, [pc, #4]	; (8000384 <main+0x28>)
 800037e:	f000 f993 	bl	80006a8 <iprintf>
    	{
 8000382:	e7f6      	b.n	8000372 <main+0x16>
 8000384:	0800156c 	.word	0x0800156c

08000388 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
 8000398:	e00a      	b.n	80003b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800039a:	f3af 8000 	nop.w
 800039e:	4601      	mov	r1, r0
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	60ba      	str	r2, [r7, #8]
 80003a6:	b2ca      	uxtb	r2, r1
 80003a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3301      	adds	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	dbf0      	blt.n	800039a <_read+0x12>
	}

return len;
 80003b8:	687b      	ldr	r3, [r7, #4]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b086      	sub	sp, #24
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	60f8      	str	r0, [r7, #12]
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e009      	b.n	80003e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f877 	bl	80004d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf1      	blt.n	80003d4 <_write+0x12>
	}
	return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_close>:

int _close(int file)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
	return -1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000422:	605a      	str	r2, [r3, #4]
	return 0;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <_isatty>:

int _isatty(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	return 1;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
	return 0;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
	...

08000464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <_sbrk+0x5c>)
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <_sbrk+0x60>)
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d102      	bne.n	8000486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <_sbrk+0x64>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <_sbrk+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <_sbrk+0x64>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	693a      	ldr	r2, [r7, #16]
 8000490:	429a      	cmp	r2, r3
 8000492:	d207      	bcs.n	80004a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000494:	f000 f8d6 	bl	8000644 <__errno>
 8000498:	4603      	mov	r3, r0
 800049a:	220c      	movs	r2, #12
 800049c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e009      	b.n	80004b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <_sbrk+0x64>)
 80004b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20008000 	.word	0x20008000
 80004c4:	00000400 	.word	0x00000400
 80004c8:	20000080 	.word	0x20000080
 80004cc:	200000a0 	.word	0x200000a0

080004d0 <__io_putchar>:




void senddata(int a);
       char __io_putchar(char ch){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	                  senddata(ch);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f871 	bl	80005c4 <senddata>
	                   return(ch);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
                           }
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <set_baudrate_usart2>:


   static void set_baudrate_usart2(USART_TypeDef* usart,uint32_t freq , uint32_t baud)
          {usart->BRR|=(1U<<0);
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f043 0201 	orr.w	r2, r3, #1
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<1);
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f043 0202 	orr.w	r2, r3, #2
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<3);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	f043 0208 	orr.w	r2, r3, #8
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	609a      	str	r2, [r3, #8]
           usart->BRR|=(1U<<7);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	609a      	str	r2, [r3, #8]
          }
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <UART_TX_init>:

   void UART_TX_init(void)
        {/*************enable clock access to gpioA *******************/
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
   	   RCC->AHB1ENR|=GPIOAEN;
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <UART_TX_init+0x80>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <UART_TX_init+0x80>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6313      	str	r3, [r2, #48]	; 0x30


   	   /*************Set mode to alternate func***************/
   	   GPIOA->MODER|=(1U<<5);
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <UART_TX_init+0x84>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <UART_TX_init+0x84>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6013      	str	r3, [r2, #0]
          GPIOA->MODER&=~(1U<<4);
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <UART_TX_init+0x84>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <UART_TX_init+0x84>)
 8000556:	f023 0310 	bic.w	r3, r3, #16
 800055a:	6013      	str	r3, [r2, #0]
          /*****Configure to AF7 As indicated in the alternate function mapping */
          GPIOA->AFR[0]|=(1U<<8);
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <UART_TX_init+0x84>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <UART_TX_init+0x84>)
 8000562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000566:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<9);
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <UART_TX_init+0x84>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <UART_TX_init+0x84>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6213      	str	r3, [r2, #32]
          GPIOA->AFR[0]|=(1U<<10);
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <UART_TX_init+0x84>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <UART_TX_init+0x84>)
 800057a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800057e:	6213      	str	r3, [r2, #32]

          /**************enable clock access to usart2******************/
          RCC->APB1ENR|=(1U<<17);
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <UART_TX_init+0x80>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <UART_TX_init+0x80>)
 8000586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40

          /****************CONFIGURE BAUDRATE***********/
          set_baudrate_usart2(USART2,periph_freq,baudrate);
 800058c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000590:	490a      	ldr	r1, [pc, #40]	; (80005bc <UART_TX_init+0x88>)
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <UART_TX_init+0x8c>)
 8000594:	f7ff ffaa 	bl	80004ec <set_baudrate_usart2>
          /*********configure transfert direction */
          USART2->CR1|=(1U<<3);
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <UART_TX_init+0x8c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <UART_TX_init+0x8c>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	60d3      	str	r3, [r2, #12]
          /***********enable uart module **************/
          USART2->CR1|=(1U<<13);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <UART_TX_init+0x8c>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <UART_TX_init+0x8c>)
 80005aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ae:	60d3      	str	r3, [r2, #12]
            }
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020000 	.word	0x40020000
 80005bc:	00f42400 	.word	0x00f42400
 80005c0:	40004400 	.word	0x40004400

080005c4 <senddata>:




   void senddata(int a)
        {/*make sure the Transmit data register is empty : check the STATUS REG */
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]


           	   USART2->DR=a;
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <senddata+0x28>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6053      	str	r3, [r2, #4]
           	   while(!(USART2->SR)&&(1U<<6)) {}
 80005d2:	bf00      	nop
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <senddata+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0fb      	beq.n	80005d4 <senddata+0x10>

        }
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40004400 	.word	0x40004400

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f817 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fe9b 	bl	800035c <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000634:	08001620 	.word	0x08001620
  ldr r2, =_sbss
 8000638:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800063c:	2000009c 	.word	0x2000009c

08000640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>
	...

08000644 <__errno>:
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <__errno+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	4d0d      	ldr	r5, [pc, #52]	; (8000688 <__libc_init_array+0x38>)
 8000654:	4c0d      	ldr	r4, [pc, #52]	; (800068c <__libc_init_array+0x3c>)
 8000656:	1b64      	subs	r4, r4, r5
 8000658:	10a4      	asrs	r4, r4, #2
 800065a:	2600      	movs	r6, #0
 800065c:	42a6      	cmp	r6, r4
 800065e:	d109      	bne.n	8000674 <__libc_init_array+0x24>
 8000660:	4d0b      	ldr	r5, [pc, #44]	; (8000690 <__libc_init_array+0x40>)
 8000662:	4c0c      	ldr	r4, [pc, #48]	; (8000694 <__libc_init_array+0x44>)
 8000664:	f000 ff76 	bl	8001554 <_init>
 8000668:	1b64      	subs	r4, r4, r5
 800066a:	10a4      	asrs	r4, r4, #2
 800066c:	2600      	movs	r6, #0
 800066e:	42a6      	cmp	r6, r4
 8000670:	d105      	bne.n	800067e <__libc_init_array+0x2e>
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f855 3b04 	ldr.w	r3, [r5], #4
 8000678:	4798      	blx	r3
 800067a:	3601      	adds	r6, #1
 800067c:	e7ee      	b.n	800065c <__libc_init_array+0xc>
 800067e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000682:	4798      	blx	r3
 8000684:	3601      	adds	r6, #1
 8000686:	e7f2      	b.n	800066e <__libc_init_array+0x1e>
 8000688:	08001618 	.word	0x08001618
 800068c:	08001618 	.word	0x08001618
 8000690:	08001618 	.word	0x08001618
 8000694:	0800161c 	.word	0x0800161c

08000698 <memset>:
 8000698:	4402      	add	r2, r0
 800069a:	4603      	mov	r3, r0
 800069c:	4293      	cmp	r3, r2
 800069e:	d100      	bne.n	80006a2 <memset+0xa>
 80006a0:	4770      	bx	lr
 80006a2:	f803 1b01 	strb.w	r1, [r3], #1
 80006a6:	e7f9      	b.n	800069c <memset+0x4>

080006a8 <iprintf>:
 80006a8:	b40f      	push	{r0, r1, r2, r3}
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <iprintf+0x2c>)
 80006ac:	b513      	push	{r0, r1, r4, lr}
 80006ae:	681c      	ldr	r4, [r3, #0]
 80006b0:	b124      	cbz	r4, 80006bc <iprintf+0x14>
 80006b2:	69a3      	ldr	r3, [r4, #24]
 80006b4:	b913      	cbnz	r3, 80006bc <iprintf+0x14>
 80006b6:	4620      	mov	r0, r4
 80006b8:	f000 f866 	bl	8000788 <__sinit>
 80006bc:	ab05      	add	r3, sp, #20
 80006be:	9a04      	ldr	r2, [sp, #16]
 80006c0:	68a1      	ldr	r1, [r4, #8]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	4620      	mov	r0, r4
 80006c6:	f000 f983 	bl	80009d0 <_vfiprintf_r>
 80006ca:	b002      	add	sp, #8
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	20000000 	.word	0x20000000

080006d8 <std>:
 80006d8:	2300      	movs	r3, #0
 80006da:	b510      	push	{r4, lr}
 80006dc:	4604      	mov	r4, r0
 80006de:	e9c0 3300 	strd	r3, r3, [r0]
 80006e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006e6:	6083      	str	r3, [r0, #8]
 80006e8:	8181      	strh	r1, [r0, #12]
 80006ea:	6643      	str	r3, [r0, #100]	; 0x64
 80006ec:	81c2      	strh	r2, [r0, #14]
 80006ee:	6183      	str	r3, [r0, #24]
 80006f0:	4619      	mov	r1, r3
 80006f2:	2208      	movs	r2, #8
 80006f4:	305c      	adds	r0, #92	; 0x5c
 80006f6:	f7ff ffcf 	bl	8000698 <memset>
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <std+0x38>)
 80006fc:	6263      	str	r3, [r4, #36]	; 0x24
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <std+0x3c>)
 8000700:	62a3      	str	r3, [r4, #40]	; 0x28
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <std+0x40>)
 8000704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <std+0x44>)
 8000708:	6224      	str	r4, [r4, #32]
 800070a:	6323      	str	r3, [r4, #48]	; 0x30
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	08000f79 	.word	0x08000f79
 8000714:	08000f9b 	.word	0x08000f9b
 8000718:	08000fd3 	.word	0x08000fd3
 800071c:	08000ff7 	.word	0x08000ff7

08000720 <_cleanup_r>:
 8000720:	4901      	ldr	r1, [pc, #4]	; (8000728 <_cleanup_r+0x8>)
 8000722:	f000 b8af 	b.w	8000884 <_fwalk_reent>
 8000726:	bf00      	nop
 8000728:	080012d1 	.word	0x080012d1

0800072c <__sfmoreglue>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	1e4a      	subs	r2, r1, #1
 8000730:	2568      	movs	r5, #104	; 0x68
 8000732:	4355      	muls	r5, r2
 8000734:	460e      	mov	r6, r1
 8000736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800073a:	f000 f8c5 	bl	80008c8 <_malloc_r>
 800073e:	4604      	mov	r4, r0
 8000740:	b140      	cbz	r0, 8000754 <__sfmoreglue+0x28>
 8000742:	2100      	movs	r1, #0
 8000744:	e9c0 1600 	strd	r1, r6, [r0]
 8000748:	300c      	adds	r0, #12
 800074a:	60a0      	str	r0, [r4, #8]
 800074c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000750:	f7ff ffa2 	bl	8000698 <memset>
 8000754:	4620      	mov	r0, r4
 8000756:	bd70      	pop	{r4, r5, r6, pc}

08000758 <__sfp_lock_acquire>:
 8000758:	4801      	ldr	r0, [pc, #4]	; (8000760 <__sfp_lock_acquire+0x8>)
 800075a:	f000 b8b3 	b.w	80008c4 <__retarget_lock_acquire_recursive>
 800075e:	bf00      	nop
 8000760:	20000094 	.word	0x20000094

08000764 <__sfp_lock_release>:
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <__sfp_lock_release+0x8>)
 8000766:	f000 b8ae 	b.w	80008c6 <__retarget_lock_release_recursive>
 800076a:	bf00      	nop
 800076c:	20000094 	.word	0x20000094

08000770 <__sinit_lock_acquire>:
 8000770:	4801      	ldr	r0, [pc, #4]	; (8000778 <__sinit_lock_acquire+0x8>)
 8000772:	f000 b8a7 	b.w	80008c4 <__retarget_lock_acquire_recursive>
 8000776:	bf00      	nop
 8000778:	2000008f 	.word	0x2000008f

0800077c <__sinit_lock_release>:
 800077c:	4801      	ldr	r0, [pc, #4]	; (8000784 <__sinit_lock_release+0x8>)
 800077e:	f000 b8a2 	b.w	80008c6 <__retarget_lock_release_recursive>
 8000782:	bf00      	nop
 8000784:	2000008f 	.word	0x2000008f

08000788 <__sinit>:
 8000788:	b510      	push	{r4, lr}
 800078a:	4604      	mov	r4, r0
 800078c:	f7ff fff0 	bl	8000770 <__sinit_lock_acquire>
 8000790:	69a3      	ldr	r3, [r4, #24]
 8000792:	b11b      	cbz	r3, 800079c <__sinit+0x14>
 8000794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000798:	f7ff bff0 	b.w	800077c <__sinit_lock_release>
 800079c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007a0:	6523      	str	r3, [r4, #80]	; 0x50
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <__sinit+0x68>)
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <__sinit+0x6c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80007aa:	42a3      	cmp	r3, r4
 80007ac:	bf04      	itt	eq
 80007ae:	2301      	moveq	r3, #1
 80007b0:	61a3      	streq	r3, [r4, #24]
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 f820 	bl	80007f8 <__sfp>
 80007b8:	6060      	str	r0, [r4, #4]
 80007ba:	4620      	mov	r0, r4
 80007bc:	f000 f81c 	bl	80007f8 <__sfp>
 80007c0:	60a0      	str	r0, [r4, #8]
 80007c2:	4620      	mov	r0, r4
 80007c4:	f000 f818 	bl	80007f8 <__sfp>
 80007c8:	2200      	movs	r2, #0
 80007ca:	60e0      	str	r0, [r4, #12]
 80007cc:	2104      	movs	r1, #4
 80007ce:	6860      	ldr	r0, [r4, #4]
 80007d0:	f7ff ff82 	bl	80006d8 <std>
 80007d4:	68a0      	ldr	r0, [r4, #8]
 80007d6:	2201      	movs	r2, #1
 80007d8:	2109      	movs	r1, #9
 80007da:	f7ff ff7d 	bl	80006d8 <std>
 80007de:	68e0      	ldr	r0, [r4, #12]
 80007e0:	2202      	movs	r2, #2
 80007e2:	2112      	movs	r1, #18
 80007e4:	f7ff ff78 	bl	80006d8 <std>
 80007e8:	2301      	movs	r3, #1
 80007ea:	61a3      	str	r3, [r4, #24]
 80007ec:	e7d2      	b.n	8000794 <__sinit+0xc>
 80007ee:	bf00      	nop
 80007f0:	08001580 	.word	0x08001580
 80007f4:	08000721 	.word	0x08000721

080007f8 <__sfp>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	4607      	mov	r7, r0
 80007fc:	f7ff ffac 	bl	8000758 <__sfp_lock_acquire>
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <__sfp+0x84>)
 8000802:	681e      	ldr	r6, [r3, #0]
 8000804:	69b3      	ldr	r3, [r6, #24]
 8000806:	b913      	cbnz	r3, 800080e <__sfp+0x16>
 8000808:	4630      	mov	r0, r6
 800080a:	f7ff ffbd 	bl	8000788 <__sinit>
 800080e:	3648      	adds	r6, #72	; 0x48
 8000810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000814:	3b01      	subs	r3, #1
 8000816:	d503      	bpl.n	8000820 <__sfp+0x28>
 8000818:	6833      	ldr	r3, [r6, #0]
 800081a:	b30b      	cbz	r3, 8000860 <__sfp+0x68>
 800081c:	6836      	ldr	r6, [r6, #0]
 800081e:	e7f7      	b.n	8000810 <__sfp+0x18>
 8000820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000824:	b9d5      	cbnz	r5, 800085c <__sfp+0x64>
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <__sfp+0x88>)
 8000828:	60e3      	str	r3, [r4, #12]
 800082a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800082e:	6665      	str	r5, [r4, #100]	; 0x64
 8000830:	f000 f847 	bl	80008c2 <__retarget_lock_init_recursive>
 8000834:	f7ff ff96 	bl	8000764 <__sfp_lock_release>
 8000838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800083c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000840:	6025      	str	r5, [r4, #0]
 8000842:	61a5      	str	r5, [r4, #24]
 8000844:	2208      	movs	r2, #8
 8000846:	4629      	mov	r1, r5
 8000848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800084c:	f7ff ff24 	bl	8000698 <memset>
 8000850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000858:	4620      	mov	r0, r4
 800085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085c:	3468      	adds	r4, #104	; 0x68
 800085e:	e7d9      	b.n	8000814 <__sfp+0x1c>
 8000860:	2104      	movs	r1, #4
 8000862:	4638      	mov	r0, r7
 8000864:	f7ff ff62 	bl	800072c <__sfmoreglue>
 8000868:	4604      	mov	r4, r0
 800086a:	6030      	str	r0, [r6, #0]
 800086c:	2800      	cmp	r0, #0
 800086e:	d1d5      	bne.n	800081c <__sfp+0x24>
 8000870:	f7ff ff78 	bl	8000764 <__sfp_lock_release>
 8000874:	230c      	movs	r3, #12
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	e7ee      	b.n	8000858 <__sfp+0x60>
 800087a:	bf00      	nop
 800087c:	08001580 	.word	0x08001580
 8000880:	ffff0001 	.word	0xffff0001

08000884 <_fwalk_reent>:
 8000884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000888:	4606      	mov	r6, r0
 800088a:	4688      	mov	r8, r1
 800088c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000890:	2700      	movs	r7, #0
 8000892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000896:	f1b9 0901 	subs.w	r9, r9, #1
 800089a:	d505      	bpl.n	80008a8 <_fwalk_reent+0x24>
 800089c:	6824      	ldr	r4, [r4, #0]
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d1f7      	bne.n	8000892 <_fwalk_reent+0xe>
 80008a2:	4638      	mov	r0, r7
 80008a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008a8:	89ab      	ldrh	r3, [r5, #12]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d907      	bls.n	80008be <_fwalk_reent+0x3a>
 80008ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008b2:	3301      	adds	r3, #1
 80008b4:	d003      	beq.n	80008be <_fwalk_reent+0x3a>
 80008b6:	4629      	mov	r1, r5
 80008b8:	4630      	mov	r0, r6
 80008ba:	47c0      	blx	r8
 80008bc:	4307      	orrs	r7, r0
 80008be:	3568      	adds	r5, #104	; 0x68
 80008c0:	e7e9      	b.n	8000896 <_fwalk_reent+0x12>

080008c2 <__retarget_lock_init_recursive>:
 80008c2:	4770      	bx	lr

080008c4 <__retarget_lock_acquire_recursive>:
 80008c4:	4770      	bx	lr

080008c6 <__retarget_lock_release_recursive>:
 80008c6:	4770      	bx	lr

080008c8 <_malloc_r>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	1ccd      	adds	r5, r1, #3
 80008cc:	f025 0503 	bic.w	r5, r5, #3
 80008d0:	3508      	adds	r5, #8
 80008d2:	2d0c      	cmp	r5, #12
 80008d4:	bf38      	it	cc
 80008d6:	250c      	movcc	r5, #12
 80008d8:	2d00      	cmp	r5, #0
 80008da:	4606      	mov	r6, r0
 80008dc:	db01      	blt.n	80008e2 <_malloc_r+0x1a>
 80008de:	42a9      	cmp	r1, r5
 80008e0:	d903      	bls.n	80008ea <_malloc_r+0x22>
 80008e2:	230c      	movs	r3, #12
 80008e4:	6033      	str	r3, [r6, #0]
 80008e6:	2000      	movs	r0, #0
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	f000 fda3 	bl	8001434 <__malloc_lock>
 80008ee:	4921      	ldr	r1, [pc, #132]	; (8000974 <_malloc_r+0xac>)
 80008f0:	680a      	ldr	r2, [r1, #0]
 80008f2:	4614      	mov	r4, r2
 80008f4:	b99c      	cbnz	r4, 800091e <_malloc_r+0x56>
 80008f6:	4f20      	ldr	r7, [pc, #128]	; (8000978 <_malloc_r+0xb0>)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b923      	cbnz	r3, 8000906 <_malloc_r+0x3e>
 80008fc:	4621      	mov	r1, r4
 80008fe:	4630      	mov	r0, r6
 8000900:	f000 fb2a 	bl	8000f58 <_sbrk_r>
 8000904:	6038      	str	r0, [r7, #0]
 8000906:	4629      	mov	r1, r5
 8000908:	4630      	mov	r0, r6
 800090a:	f000 fb25 	bl	8000f58 <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d123      	bne.n	800095a <_malloc_r+0x92>
 8000912:	230c      	movs	r3, #12
 8000914:	6033      	str	r3, [r6, #0]
 8000916:	4630      	mov	r0, r6
 8000918:	f000 fd92 	bl	8001440 <__malloc_unlock>
 800091c:	e7e3      	b.n	80008e6 <_malloc_r+0x1e>
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	1b5b      	subs	r3, r3, r5
 8000922:	d417      	bmi.n	8000954 <_malloc_r+0x8c>
 8000924:	2b0b      	cmp	r3, #11
 8000926:	d903      	bls.n	8000930 <_malloc_r+0x68>
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	441c      	add	r4, r3
 800092c:	6025      	str	r5, [r4, #0]
 800092e:	e004      	b.n	800093a <_malloc_r+0x72>
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	42a2      	cmp	r2, r4
 8000934:	bf0c      	ite	eq
 8000936:	600b      	streq	r3, [r1, #0]
 8000938:	6053      	strne	r3, [r2, #4]
 800093a:	4630      	mov	r0, r6
 800093c:	f000 fd80 	bl	8001440 <__malloc_unlock>
 8000940:	f104 000b 	add.w	r0, r4, #11
 8000944:	1d23      	adds	r3, r4, #4
 8000946:	f020 0007 	bic.w	r0, r0, #7
 800094a:	1ac2      	subs	r2, r0, r3
 800094c:	d0cc      	beq.n	80008e8 <_malloc_r+0x20>
 800094e:	1a1b      	subs	r3, r3, r0
 8000950:	50a3      	str	r3, [r4, r2]
 8000952:	e7c9      	b.n	80008e8 <_malloc_r+0x20>
 8000954:	4622      	mov	r2, r4
 8000956:	6864      	ldr	r4, [r4, #4]
 8000958:	e7cc      	b.n	80008f4 <_malloc_r+0x2c>
 800095a:	1cc4      	adds	r4, r0, #3
 800095c:	f024 0403 	bic.w	r4, r4, #3
 8000960:	42a0      	cmp	r0, r4
 8000962:	d0e3      	beq.n	800092c <_malloc_r+0x64>
 8000964:	1a21      	subs	r1, r4, r0
 8000966:	4630      	mov	r0, r6
 8000968:	f000 faf6 	bl	8000f58 <_sbrk_r>
 800096c:	3001      	adds	r0, #1
 800096e:	d1dd      	bne.n	800092c <_malloc_r+0x64>
 8000970:	e7cf      	b.n	8000912 <_malloc_r+0x4a>
 8000972:	bf00      	nop
 8000974:	20000084 	.word	0x20000084
 8000978:	20000088 	.word	0x20000088

0800097c <__sfputc_r>:
 800097c:	6893      	ldr	r3, [r2, #8]
 800097e:	3b01      	subs	r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	b410      	push	{r4}
 8000984:	6093      	str	r3, [r2, #8]
 8000986:	da08      	bge.n	800099a <__sfputc_r+0x1e>
 8000988:	6994      	ldr	r4, [r2, #24]
 800098a:	42a3      	cmp	r3, r4
 800098c:	db01      	blt.n	8000992 <__sfputc_r+0x16>
 800098e:	290a      	cmp	r1, #10
 8000990:	d103      	bne.n	800099a <__sfputc_r+0x1e>
 8000992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000996:	f000 bb33 	b.w	8001000 <__swbuf_r>
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	1c58      	adds	r0, r3, #1
 800099e:	6010      	str	r0, [r2, #0]
 80009a0:	7019      	strb	r1, [r3, #0]
 80009a2:	4608      	mov	r0, r1
 80009a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <__sfputs_r>:
 80009aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ac:	4606      	mov	r6, r0
 80009ae:	460f      	mov	r7, r1
 80009b0:	4614      	mov	r4, r2
 80009b2:	18d5      	adds	r5, r2, r3
 80009b4:	42ac      	cmp	r4, r5
 80009b6:	d101      	bne.n	80009bc <__sfputs_r+0x12>
 80009b8:	2000      	movs	r0, #0
 80009ba:	e007      	b.n	80009cc <__sfputs_r+0x22>
 80009bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009c0:	463a      	mov	r2, r7
 80009c2:	4630      	mov	r0, r6
 80009c4:	f7ff ffda 	bl	800097c <__sfputc_r>
 80009c8:	1c43      	adds	r3, r0, #1
 80009ca:	d1f3      	bne.n	80009b4 <__sfputs_r+0xa>
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009d0 <_vfiprintf_r>:
 80009d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d4:	460d      	mov	r5, r1
 80009d6:	b09d      	sub	sp, #116	; 0x74
 80009d8:	4614      	mov	r4, r2
 80009da:	4698      	mov	r8, r3
 80009dc:	4606      	mov	r6, r0
 80009de:	b118      	cbz	r0, 80009e8 <_vfiprintf_r+0x18>
 80009e0:	6983      	ldr	r3, [r0, #24]
 80009e2:	b90b      	cbnz	r3, 80009e8 <_vfiprintf_r+0x18>
 80009e4:	f7ff fed0 	bl	8000788 <__sinit>
 80009e8:	4b89      	ldr	r3, [pc, #548]	; (8000c10 <_vfiprintf_r+0x240>)
 80009ea:	429d      	cmp	r5, r3
 80009ec:	d11b      	bne.n	8000a26 <_vfiprintf_r+0x56>
 80009ee:	6875      	ldr	r5, [r6, #4]
 80009f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009f2:	07d9      	lsls	r1, r3, #31
 80009f4:	d405      	bmi.n	8000a02 <_vfiprintf_r+0x32>
 80009f6:	89ab      	ldrh	r3, [r5, #12]
 80009f8:	059a      	lsls	r2, r3, #22
 80009fa:	d402      	bmi.n	8000a02 <_vfiprintf_r+0x32>
 80009fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009fe:	f7ff ff61 	bl	80008c4 <__retarget_lock_acquire_recursive>
 8000a02:	89ab      	ldrh	r3, [r5, #12]
 8000a04:	071b      	lsls	r3, r3, #28
 8000a06:	d501      	bpl.n	8000a0c <_vfiprintf_r+0x3c>
 8000a08:	692b      	ldr	r3, [r5, #16]
 8000a0a:	b9eb      	cbnz	r3, 8000a48 <_vfiprintf_r+0x78>
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	4630      	mov	r0, r6
 8000a10:	f000 fb5a 	bl	80010c8 <__swsetup_r>
 8000a14:	b1c0      	cbz	r0, 8000a48 <_vfiprintf_r+0x78>
 8000a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a18:	07dc      	lsls	r4, r3, #31
 8000a1a:	d50e      	bpl.n	8000a3a <_vfiprintf_r+0x6a>
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	b01d      	add	sp, #116	; 0x74
 8000a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a26:	4b7b      	ldr	r3, [pc, #492]	; (8000c14 <_vfiprintf_r+0x244>)
 8000a28:	429d      	cmp	r5, r3
 8000a2a:	d101      	bne.n	8000a30 <_vfiprintf_r+0x60>
 8000a2c:	68b5      	ldr	r5, [r6, #8]
 8000a2e:	e7df      	b.n	80009f0 <_vfiprintf_r+0x20>
 8000a30:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <_vfiprintf_r+0x248>)
 8000a32:	429d      	cmp	r5, r3
 8000a34:	bf08      	it	eq
 8000a36:	68f5      	ldreq	r5, [r6, #12]
 8000a38:	e7da      	b.n	80009f0 <_vfiprintf_r+0x20>
 8000a3a:	89ab      	ldrh	r3, [r5, #12]
 8000a3c:	0598      	lsls	r0, r3, #22
 8000a3e:	d4ed      	bmi.n	8000a1c <_vfiprintf_r+0x4c>
 8000a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a42:	f7ff ff40 	bl	80008c6 <__retarget_lock_release_recursive>
 8000a46:	e7e9      	b.n	8000a1c <_vfiprintf_r+0x4c>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c1c <_vfiprintf_r+0x24c>
 8000a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a60:	f04f 0901 	mov.w	r9, #1
 8000a64:	4623      	mov	r3, r4
 8000a66:	469a      	mov	sl, r3
 8000a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a6c:	b10a      	cbz	r2, 8000a72 <_vfiprintf_r+0xa2>
 8000a6e:	2a25      	cmp	r2, #37	; 0x25
 8000a70:	d1f9      	bne.n	8000a66 <_vfiprintf_r+0x96>
 8000a72:	ebba 0b04 	subs.w	fp, sl, r4
 8000a76:	d00b      	beq.n	8000a90 <_vfiprintf_r+0xc0>
 8000a78:	465b      	mov	r3, fp
 8000a7a:	4622      	mov	r2, r4
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	4630      	mov	r0, r6
 8000a80:	f7ff ff93 	bl	80009aa <__sfputs_r>
 8000a84:	3001      	adds	r0, #1
 8000a86:	f000 80aa 	beq.w	8000bde <_vfiprintf_r+0x20e>
 8000a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a8c:	445a      	add	r2, fp
 8000a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8000a90:	f89a 3000 	ldrb.w	r3, [sl]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 80a2 	beq.w	8000bde <_vfiprintf_r+0x20e>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000aa4:	f10a 0a01 	add.w	sl, sl, #1
 8000aa8:	9304      	str	r3, [sp, #16]
 8000aaa:	9307      	str	r3, [sp, #28]
 8000aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aba:	4858      	ldr	r0, [pc, #352]	; (8000c1c <_vfiprintf_r+0x24c>)
 8000abc:	f7ff fba8 	bl	8000210 <memchr>
 8000ac0:	9a04      	ldr	r2, [sp, #16]
 8000ac2:	b9d8      	cbnz	r0, 8000afc <_vfiprintf_r+0x12c>
 8000ac4:	06d1      	lsls	r1, r2, #27
 8000ac6:	bf44      	itt	mi
 8000ac8:	2320      	movmi	r3, #32
 8000aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ace:	0713      	lsls	r3, r2, #28
 8000ad0:	bf44      	itt	mi
 8000ad2:	232b      	movmi	r3, #43	; 0x2b
 8000ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8000adc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ade:	d015      	beq.n	8000b0c <_vfiprintf_r+0x13c>
 8000ae0:	9a07      	ldr	r2, [sp, #28]
 8000ae2:	4654      	mov	r4, sl
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f04f 0c0a 	mov.w	ip, #10
 8000aea:	4621      	mov	r1, r4
 8000aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000af0:	3b30      	subs	r3, #48	; 0x30
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d94e      	bls.n	8000b94 <_vfiprintf_r+0x1c4>
 8000af6:	b1b0      	cbz	r0, 8000b26 <_vfiprintf_r+0x156>
 8000af8:	9207      	str	r2, [sp, #28]
 8000afa:	e014      	b.n	8000b26 <_vfiprintf_r+0x156>
 8000afc:	eba0 0308 	sub.w	r3, r0, r8
 8000b00:	fa09 f303 	lsl.w	r3, r9, r3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	9304      	str	r3, [sp, #16]
 8000b08:	46a2      	mov	sl, r4
 8000b0a:	e7d2      	b.n	8000ab2 <_vfiprintf_r+0xe2>
 8000b0c:	9b03      	ldr	r3, [sp, #12]
 8000b0e:	1d19      	adds	r1, r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	9103      	str	r1, [sp, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bfbb      	ittet	lt
 8000b18:	425b      	neglt	r3, r3
 8000b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b1e:	9307      	strge	r3, [sp, #28]
 8000b20:	9307      	strlt	r3, [sp, #28]
 8000b22:	bfb8      	it	lt
 8000b24:	9204      	strlt	r2, [sp, #16]
 8000b26:	7823      	ldrb	r3, [r4, #0]
 8000b28:	2b2e      	cmp	r3, #46	; 0x2e
 8000b2a:	d10c      	bne.n	8000b46 <_vfiprintf_r+0x176>
 8000b2c:	7863      	ldrb	r3, [r4, #1]
 8000b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000b30:	d135      	bne.n	8000b9e <_vfiprintf_r+0x1ce>
 8000b32:	9b03      	ldr	r3, [sp, #12]
 8000b34:	1d1a      	adds	r2, r3, #4
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	9203      	str	r2, [sp, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bfb8      	it	lt
 8000b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b42:	3402      	adds	r4, #2
 8000b44:	9305      	str	r3, [sp, #20]
 8000b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000c2c <_vfiprintf_r+0x25c>
 8000b4a:	7821      	ldrb	r1, [r4, #0]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	4650      	mov	r0, sl
 8000b50:	f7ff fb5e 	bl	8000210 <memchr>
 8000b54:	b140      	cbz	r0, 8000b68 <_vfiprintf_r+0x198>
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	eba0 000a 	sub.w	r0, r0, sl
 8000b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b60:	9b04      	ldr	r3, [sp, #16]
 8000b62:	4303      	orrs	r3, r0
 8000b64:	3401      	adds	r4, #1
 8000b66:	9304      	str	r3, [sp, #16]
 8000b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6c:	482c      	ldr	r0, [pc, #176]	; (8000c20 <_vfiprintf_r+0x250>)
 8000b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b72:	2206      	movs	r2, #6
 8000b74:	f7ff fb4c 	bl	8000210 <memchr>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d03f      	beq.n	8000bfc <_vfiprintf_r+0x22c>
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <_vfiprintf_r+0x254>)
 8000b7e:	bb1b      	cbnz	r3, 8000bc8 <_vfiprintf_r+0x1f8>
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	3307      	adds	r3, #7
 8000b84:	f023 0307 	bic.w	r3, r3, #7
 8000b88:	3308      	adds	r3, #8
 8000b8a:	9303      	str	r3, [sp, #12]
 8000b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b8e:	443b      	add	r3, r7
 8000b90:	9309      	str	r3, [sp, #36]	; 0x24
 8000b92:	e767      	b.n	8000a64 <_vfiprintf_r+0x94>
 8000b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b98:	460c      	mov	r4, r1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e7a5      	b.n	8000aea <_vfiprintf_r+0x11a>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	9305      	str	r3, [sp, #20]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 0c0a 	mov.w	ip, #10
 8000baa:	4620      	mov	r0, r4
 8000bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bb0:	3a30      	subs	r2, #48	; 0x30
 8000bb2:	2a09      	cmp	r2, #9
 8000bb4:	d903      	bls.n	8000bbe <_vfiprintf_r+0x1ee>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0c5      	beq.n	8000b46 <_vfiprintf_r+0x176>
 8000bba:	9105      	str	r1, [sp, #20]
 8000bbc:	e7c3      	b.n	8000b46 <_vfiprintf_r+0x176>
 8000bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e7f0      	b.n	8000baa <_vfiprintf_r+0x1da>
 8000bc8:	ab03      	add	r3, sp, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	462a      	mov	r2, r5
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <_vfiprintf_r+0x258>)
 8000bd0:	a904      	add	r1, sp, #16
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	4607      	mov	r7, r0
 8000bda:	1c78      	adds	r0, r7, #1
 8000bdc:	d1d6      	bne.n	8000b8c <_vfiprintf_r+0x1bc>
 8000bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000be0:	07d9      	lsls	r1, r3, #31
 8000be2:	d405      	bmi.n	8000bf0 <_vfiprintf_r+0x220>
 8000be4:	89ab      	ldrh	r3, [r5, #12]
 8000be6:	059a      	lsls	r2, r3, #22
 8000be8:	d402      	bmi.n	8000bf0 <_vfiprintf_r+0x220>
 8000bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bec:	f7ff fe6b 	bl	80008c6 <__retarget_lock_release_recursive>
 8000bf0:	89ab      	ldrh	r3, [r5, #12]
 8000bf2:	065b      	lsls	r3, r3, #25
 8000bf4:	f53f af12 	bmi.w	8000a1c <_vfiprintf_r+0x4c>
 8000bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bfa:	e711      	b.n	8000a20 <_vfiprintf_r+0x50>
 8000bfc:	ab03      	add	r3, sp, #12
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	462a      	mov	r2, r5
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <_vfiprintf_r+0x258>)
 8000c04:	a904      	add	r1, sp, #16
 8000c06:	4630      	mov	r0, r6
 8000c08:	f000 f880 	bl	8000d0c <_printf_i>
 8000c0c:	e7e4      	b.n	8000bd8 <_vfiprintf_r+0x208>
 8000c0e:	bf00      	nop
 8000c10:	080015a4 	.word	0x080015a4
 8000c14:	080015c4 	.word	0x080015c4
 8000c18:	08001584 	.word	0x08001584
 8000c1c:	080015e4 	.word	0x080015e4
 8000c20:	080015ee 	.word	0x080015ee
 8000c24:	00000000 	.word	0x00000000
 8000c28:	080009ab 	.word	0x080009ab
 8000c2c:	080015ea 	.word	0x080015ea

08000c30 <_printf_common>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	4616      	mov	r6, r2
 8000c36:	4699      	mov	r9, r3
 8000c38:	688a      	ldr	r2, [r1, #8]
 8000c3a:	690b      	ldr	r3, [r1, #16]
 8000c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	bfb8      	it	lt
 8000c44:	4613      	movlt	r3, r2
 8000c46:	6033      	str	r3, [r6, #0]
 8000c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c4c:	4607      	mov	r7, r0
 8000c4e:	460c      	mov	r4, r1
 8000c50:	b10a      	cbz	r2, 8000c56 <_printf_common+0x26>
 8000c52:	3301      	adds	r3, #1
 8000c54:	6033      	str	r3, [r6, #0]
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	0699      	lsls	r1, r3, #26
 8000c5a:	bf42      	ittt	mi
 8000c5c:	6833      	ldrmi	r3, [r6, #0]
 8000c5e:	3302      	addmi	r3, #2
 8000c60:	6033      	strmi	r3, [r6, #0]
 8000c62:	6825      	ldr	r5, [r4, #0]
 8000c64:	f015 0506 	ands.w	r5, r5, #6
 8000c68:	d106      	bne.n	8000c78 <_printf_common+0x48>
 8000c6a:	f104 0a19 	add.w	sl, r4, #25
 8000c6e:	68e3      	ldr	r3, [r4, #12]
 8000c70:	6832      	ldr	r2, [r6, #0]
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	dc26      	bgt.n	8000cc6 <_printf_common+0x96>
 8000c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c7c:	1e13      	subs	r3, r2, #0
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	bf18      	it	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	0692      	lsls	r2, r2, #26
 8000c86:	d42b      	bmi.n	8000ce0 <_printf_common+0xb0>
 8000c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c8c:	4649      	mov	r1, r9
 8000c8e:	4638      	mov	r0, r7
 8000c90:	47c0      	blx	r8
 8000c92:	3001      	adds	r0, #1
 8000c94:	d01e      	beq.n	8000cd4 <_printf_common+0xa4>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	68e5      	ldr	r5, [r4, #12]
 8000c9a:	6832      	ldr	r2, [r6, #0]
 8000c9c:	f003 0306 	and.w	r3, r3, #6
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	bf08      	it	eq
 8000ca4:	1aad      	subeq	r5, r5, r2
 8000ca6:	68a3      	ldr	r3, [r4, #8]
 8000ca8:	6922      	ldr	r2, [r4, #16]
 8000caa:	bf0c      	ite	eq
 8000cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb0:	2500      	movne	r5, #0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	bfc4      	itt	gt
 8000cb6:	1a9b      	subgt	r3, r3, r2
 8000cb8:	18ed      	addgt	r5, r5, r3
 8000cba:	2600      	movs	r6, #0
 8000cbc:	341a      	adds	r4, #26
 8000cbe:	42b5      	cmp	r5, r6
 8000cc0:	d11a      	bne.n	8000cf8 <_printf_common+0xc8>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	e008      	b.n	8000cd8 <_printf_common+0xa8>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4652      	mov	r2, sl
 8000cca:	4649      	mov	r1, r9
 8000ccc:	4638      	mov	r0, r7
 8000cce:	47c0      	blx	r8
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	d103      	bne.n	8000cdc <_printf_common+0xac>
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	3501      	adds	r5, #1
 8000cde:	e7c6      	b.n	8000c6e <_printf_common+0x3e>
 8000ce0:	18e1      	adds	r1, r4, r3
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	2030      	movs	r0, #48	; 0x30
 8000ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cea:	4422      	add	r2, r4
 8000cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	e7c7      	b.n	8000c88 <_printf_common+0x58>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	4638      	mov	r0, r7
 8000d00:	47c0      	blx	r8
 8000d02:	3001      	adds	r0, #1
 8000d04:	d0e6      	beq.n	8000cd4 <_printf_common+0xa4>
 8000d06:	3601      	adds	r6, #1
 8000d08:	e7d9      	b.n	8000cbe <_printf_common+0x8e>
	...

08000d0c <_printf_i>:
 8000d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	460c      	mov	r4, r1
 8000d12:	4691      	mov	r9, r2
 8000d14:	7e27      	ldrb	r7, [r4, #24]
 8000d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d18:	2f78      	cmp	r7, #120	; 0x78
 8000d1a:	4680      	mov	r8, r0
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d22:	d807      	bhi.n	8000d34 <_printf_i+0x28>
 8000d24:	2f62      	cmp	r7, #98	; 0x62
 8000d26:	d80a      	bhi.n	8000d3e <_printf_i+0x32>
 8000d28:	2f00      	cmp	r7, #0
 8000d2a:	f000 80d8 	beq.w	8000ede <_printf_i+0x1d2>
 8000d2e:	2f58      	cmp	r7, #88	; 0x58
 8000d30:	f000 80a3 	beq.w	8000e7a <_printf_i+0x16e>
 8000d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d3c:	e03a      	b.n	8000db4 <_printf_i+0xa8>
 8000d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d42:	2b15      	cmp	r3, #21
 8000d44:	d8f6      	bhi.n	8000d34 <_printf_i+0x28>
 8000d46:	a001      	add	r0, pc, #4	; (adr r0, 8000d4c <_printf_i+0x40>)
 8000d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000d4c:	08000da5 	.word	0x08000da5
 8000d50:	08000db9 	.word	0x08000db9
 8000d54:	08000d35 	.word	0x08000d35
 8000d58:	08000d35 	.word	0x08000d35
 8000d5c:	08000d35 	.word	0x08000d35
 8000d60:	08000d35 	.word	0x08000d35
 8000d64:	08000db9 	.word	0x08000db9
 8000d68:	08000d35 	.word	0x08000d35
 8000d6c:	08000d35 	.word	0x08000d35
 8000d70:	08000d35 	.word	0x08000d35
 8000d74:	08000d35 	.word	0x08000d35
 8000d78:	08000ec5 	.word	0x08000ec5
 8000d7c:	08000de9 	.word	0x08000de9
 8000d80:	08000ea7 	.word	0x08000ea7
 8000d84:	08000d35 	.word	0x08000d35
 8000d88:	08000d35 	.word	0x08000d35
 8000d8c:	08000ee7 	.word	0x08000ee7
 8000d90:	08000d35 	.word	0x08000d35
 8000d94:	08000de9 	.word	0x08000de9
 8000d98:	08000d35 	.word	0x08000d35
 8000d9c:	08000d35 	.word	0x08000d35
 8000da0:	08000eaf 	.word	0x08000eaf
 8000da4:	680b      	ldr	r3, [r1, #0]
 8000da6:	1d1a      	adds	r2, r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	600a      	str	r2, [r1, #0]
 8000dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000db4:	2301      	movs	r3, #1
 8000db6:	e0a3      	b.n	8000f00 <_printf_i+0x1f4>
 8000db8:	6825      	ldr	r5, [r4, #0]
 8000dba:	6808      	ldr	r0, [r1, #0]
 8000dbc:	062e      	lsls	r6, r5, #24
 8000dbe:	f100 0304 	add.w	r3, r0, #4
 8000dc2:	d50a      	bpl.n	8000dda <_printf_i+0xce>
 8000dc4:	6805      	ldr	r5, [r0, #0]
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	da03      	bge.n	8000dd4 <_printf_i+0xc8>
 8000dcc:	232d      	movs	r3, #45	; 0x2d
 8000dce:	426d      	negs	r5, r5
 8000dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dd4:	485e      	ldr	r0, [pc, #376]	; (8000f50 <_printf_i+0x244>)
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	e019      	b.n	8000e0e <_printf_i+0x102>
 8000dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000dde:	6805      	ldr	r5, [r0, #0]
 8000de0:	600b      	str	r3, [r1, #0]
 8000de2:	bf18      	it	ne
 8000de4:	b22d      	sxthne	r5, r5
 8000de6:	e7ef      	b.n	8000dc8 <_printf_i+0xbc>
 8000de8:	680b      	ldr	r3, [r1, #0]
 8000dea:	6825      	ldr	r5, [r4, #0]
 8000dec:	1d18      	adds	r0, r3, #4
 8000dee:	6008      	str	r0, [r1, #0]
 8000df0:	0628      	lsls	r0, r5, #24
 8000df2:	d501      	bpl.n	8000df8 <_printf_i+0xec>
 8000df4:	681d      	ldr	r5, [r3, #0]
 8000df6:	e002      	b.n	8000dfe <_printf_i+0xf2>
 8000df8:	0669      	lsls	r1, r5, #25
 8000dfa:	d5fb      	bpl.n	8000df4 <_printf_i+0xe8>
 8000dfc:	881d      	ldrh	r5, [r3, #0]
 8000dfe:	4854      	ldr	r0, [pc, #336]	; (8000f50 <_printf_i+0x244>)
 8000e00:	2f6f      	cmp	r7, #111	; 0x6f
 8000e02:	bf0c      	ite	eq
 8000e04:	2308      	moveq	r3, #8
 8000e06:	230a      	movne	r3, #10
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e0e:	6866      	ldr	r6, [r4, #4]
 8000e10:	60a6      	str	r6, [r4, #8]
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	bfa2      	ittt	ge
 8000e16:	6821      	ldrge	r1, [r4, #0]
 8000e18:	f021 0104 	bicge.w	r1, r1, #4
 8000e1c:	6021      	strge	r1, [r4, #0]
 8000e1e:	b90d      	cbnz	r5, 8000e24 <_printf_i+0x118>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d04d      	beq.n	8000ec0 <_printf_i+0x1b4>
 8000e24:	4616      	mov	r6, r2
 8000e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e2e:	5dc7      	ldrb	r7, [r0, r7]
 8000e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e34:	462f      	mov	r7, r5
 8000e36:	42bb      	cmp	r3, r7
 8000e38:	460d      	mov	r5, r1
 8000e3a:	d9f4      	bls.n	8000e26 <_printf_i+0x11a>
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d10b      	bne.n	8000e58 <_printf_i+0x14c>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	07df      	lsls	r7, r3, #31
 8000e44:	d508      	bpl.n	8000e58 <_printf_i+0x14c>
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	6861      	ldr	r1, [r4, #4]
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	bfde      	ittt	le
 8000e4e:	2330      	movle	r3, #48	; 0x30
 8000e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e58:	1b92      	subs	r2, r2, r6
 8000e5a:	6122      	str	r2, [r4, #16]
 8000e5c:	f8cd a000 	str.w	sl, [sp]
 8000e60:	464b      	mov	r3, r9
 8000e62:	aa03      	add	r2, sp, #12
 8000e64:	4621      	mov	r1, r4
 8000e66:	4640      	mov	r0, r8
 8000e68:	f7ff fee2 	bl	8000c30 <_printf_common>
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d14c      	bne.n	8000f0a <_printf_i+0x1fe>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	b004      	add	sp, #16
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	4835      	ldr	r0, [pc, #212]	; (8000f50 <_printf_i+0x244>)
 8000e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	680e      	ldr	r6, [r1, #0]
 8000e84:	061f      	lsls	r7, r3, #24
 8000e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8000e8a:	600e      	str	r6, [r1, #0]
 8000e8c:	d514      	bpl.n	8000eb8 <_printf_i+0x1ac>
 8000e8e:	07d9      	lsls	r1, r3, #31
 8000e90:	bf44      	itt	mi
 8000e92:	f043 0320 	orrmi.w	r3, r3, #32
 8000e96:	6023      	strmi	r3, [r4, #0]
 8000e98:	b91d      	cbnz	r5, 8000ea2 <_printf_i+0x196>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	f023 0320 	bic.w	r3, r3, #32
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	e7b0      	b.n	8000e08 <_printf_i+0xfc>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	2378      	movs	r3, #120	; 0x78
 8000eb0:	4828      	ldr	r0, [pc, #160]	; (8000f54 <_printf_i+0x248>)
 8000eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000eb6:	e7e3      	b.n	8000e80 <_printf_i+0x174>
 8000eb8:	065e      	lsls	r6, r3, #25
 8000eba:	bf48      	it	mi
 8000ebc:	b2ad      	uxthmi	r5, r5
 8000ebe:	e7e6      	b.n	8000e8e <_printf_i+0x182>
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	e7bb      	b.n	8000e3c <_printf_i+0x130>
 8000ec4:	680b      	ldr	r3, [r1, #0]
 8000ec6:	6826      	ldr	r6, [r4, #0]
 8000ec8:	6960      	ldr	r0, [r4, #20]
 8000eca:	1d1d      	adds	r5, r3, #4
 8000ecc:	600d      	str	r5, [r1, #0]
 8000ece:	0635      	lsls	r5, r6, #24
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	d501      	bpl.n	8000ed8 <_printf_i+0x1cc>
 8000ed4:	6018      	str	r0, [r3, #0]
 8000ed6:	e002      	b.n	8000ede <_printf_i+0x1d2>
 8000ed8:	0671      	lsls	r1, r6, #25
 8000eda:	d5fb      	bpl.n	8000ed4 <_printf_i+0x1c8>
 8000edc:	8018      	strh	r0, [r3, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6123      	str	r3, [r4, #16]
 8000ee2:	4616      	mov	r6, r2
 8000ee4:	e7ba      	b.n	8000e5c <_printf_i+0x150>
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	1d1a      	adds	r2, r3, #4
 8000eea:	600a      	str	r2, [r1, #0]
 8000eec:	681e      	ldr	r6, [r3, #0]
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f7ff f98c 	bl	8000210 <memchr>
 8000ef8:	b108      	cbz	r0, 8000efe <_printf_i+0x1f2>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	6060      	str	r0, [r4, #4]
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	6123      	str	r3, [r4, #16]
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f08:	e7a8      	b.n	8000e5c <_printf_i+0x150>
 8000f0a:	6923      	ldr	r3, [r4, #16]
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	4649      	mov	r1, r9
 8000f10:	4640      	mov	r0, r8
 8000f12:	47d0      	blx	sl
 8000f14:	3001      	adds	r0, #1
 8000f16:	d0ab      	beq.n	8000e70 <_printf_i+0x164>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	079b      	lsls	r3, r3, #30
 8000f1c:	d413      	bmi.n	8000f46 <_printf_i+0x23a>
 8000f1e:	68e0      	ldr	r0, [r4, #12]
 8000f20:	9b03      	ldr	r3, [sp, #12]
 8000f22:	4298      	cmp	r0, r3
 8000f24:	bfb8      	it	lt
 8000f26:	4618      	movlt	r0, r3
 8000f28:	e7a4      	b.n	8000e74 <_printf_i+0x168>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4649      	mov	r1, r9
 8000f30:	4640      	mov	r0, r8
 8000f32:	47d0      	blx	sl
 8000f34:	3001      	adds	r0, #1
 8000f36:	d09b      	beq.n	8000e70 <_printf_i+0x164>
 8000f38:	3501      	adds	r5, #1
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	9903      	ldr	r1, [sp, #12]
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	dcf2      	bgt.n	8000f2a <_printf_i+0x21e>
 8000f44:	e7eb      	b.n	8000f1e <_printf_i+0x212>
 8000f46:	2500      	movs	r5, #0
 8000f48:	f104 0619 	add.w	r6, r4, #25
 8000f4c:	e7f5      	b.n	8000f3a <_printf_i+0x22e>
 8000f4e:	bf00      	nop
 8000f50:	080015f5 	.word	0x080015f5
 8000f54:	08001606 	.word	0x08001606

08000f58 <_sbrk_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4d06      	ldr	r5, [pc, #24]	; (8000f74 <_sbrk_r+0x1c>)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4604      	mov	r4, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	f7ff fa7e 	bl	8000464 <_sbrk>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_sbrk_r+0x1a>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_sbrk_r+0x1a>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	20000098 	.word	0x20000098

08000f78 <__sread>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f80:	f000 fab4 	bl	80014ec <_read_r>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	bfab      	itete	ge
 8000f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f8c:	181b      	addge	r3, r3, r0
 8000f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f92:	bfac      	ite	ge
 8000f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f96:	81a3      	strhlt	r3, [r4, #12]
 8000f98:	bd10      	pop	{r4, pc}

08000f9a <__swrite>:
 8000f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9e:	461f      	mov	r7, r3
 8000fa0:	898b      	ldrh	r3, [r1, #12]
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	4605      	mov	r5, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	4616      	mov	r6, r2
 8000faa:	d505      	bpl.n	8000fb8 <__swrite+0x1e>
 8000fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f000 f9c8 	bl	8001348 <_lseek_r>
 8000fb8:	89a3      	ldrh	r3, [r4, #12]
 8000fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc2:	81a3      	strh	r3, [r4, #12]
 8000fc4:	4632      	mov	r2, r6
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fce:	f000 b869 	b.w	80010a4 <_write_r>

08000fd2 <__sseek>:
 8000fd2:	b510      	push	{r4, lr}
 8000fd4:	460c      	mov	r4, r1
 8000fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fda:	f000 f9b5 	bl	8001348 <_lseek_r>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	89a3      	ldrh	r3, [r4, #12]
 8000fe2:	bf15      	itete	ne
 8000fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fee:	81a3      	strheq	r3, [r4, #12]
 8000ff0:	bf18      	it	ne
 8000ff2:	81a3      	strhne	r3, [r4, #12]
 8000ff4:	bd10      	pop	{r4, pc}

08000ff6 <__sclose>:
 8000ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffa:	f000 b8d3 	b.w	80011a4 <_close_r>
	...

08001000 <__swbuf_r>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	460e      	mov	r6, r1
 8001004:	4614      	mov	r4, r2
 8001006:	4605      	mov	r5, r0
 8001008:	b118      	cbz	r0, 8001012 <__swbuf_r+0x12>
 800100a:	6983      	ldr	r3, [r0, #24]
 800100c:	b90b      	cbnz	r3, 8001012 <__swbuf_r+0x12>
 800100e:	f7ff fbbb 	bl	8000788 <__sinit>
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <__swbuf_r+0x98>)
 8001014:	429c      	cmp	r4, r3
 8001016:	d12b      	bne.n	8001070 <__swbuf_r+0x70>
 8001018:	686c      	ldr	r4, [r5, #4]
 800101a:	69a3      	ldr	r3, [r4, #24]
 800101c:	60a3      	str	r3, [r4, #8]
 800101e:	89a3      	ldrh	r3, [r4, #12]
 8001020:	071a      	lsls	r2, r3, #28
 8001022:	d52f      	bpl.n	8001084 <__swbuf_r+0x84>
 8001024:	6923      	ldr	r3, [r4, #16]
 8001026:	b36b      	cbz	r3, 8001084 <__swbuf_r+0x84>
 8001028:	6923      	ldr	r3, [r4, #16]
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	1ac0      	subs	r0, r0, r3
 800102e:	6963      	ldr	r3, [r4, #20]
 8001030:	b2f6      	uxtb	r6, r6
 8001032:	4283      	cmp	r3, r0
 8001034:	4637      	mov	r7, r6
 8001036:	dc04      	bgt.n	8001042 <__swbuf_r+0x42>
 8001038:	4621      	mov	r1, r4
 800103a:	4628      	mov	r0, r5
 800103c:	f000 f948 	bl	80012d0 <_fflush_r>
 8001040:	bb30      	cbnz	r0, 8001090 <__swbuf_r+0x90>
 8001042:	68a3      	ldr	r3, [r4, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60a3      	str	r3, [r4, #8]
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	6022      	str	r2, [r4, #0]
 800104e:	701e      	strb	r6, [r3, #0]
 8001050:	6963      	ldr	r3, [r4, #20]
 8001052:	3001      	adds	r0, #1
 8001054:	4283      	cmp	r3, r0
 8001056:	d004      	beq.n	8001062 <__swbuf_r+0x62>
 8001058:	89a3      	ldrh	r3, [r4, #12]
 800105a:	07db      	lsls	r3, r3, #31
 800105c:	d506      	bpl.n	800106c <__swbuf_r+0x6c>
 800105e:	2e0a      	cmp	r6, #10
 8001060:	d104      	bne.n	800106c <__swbuf_r+0x6c>
 8001062:	4621      	mov	r1, r4
 8001064:	4628      	mov	r0, r5
 8001066:	f000 f933 	bl	80012d0 <_fflush_r>
 800106a:	b988      	cbnz	r0, 8001090 <__swbuf_r+0x90>
 800106c:	4638      	mov	r0, r7
 800106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <__swbuf_r+0x9c>)
 8001072:	429c      	cmp	r4, r3
 8001074:	d101      	bne.n	800107a <__swbuf_r+0x7a>
 8001076:	68ac      	ldr	r4, [r5, #8]
 8001078:	e7cf      	b.n	800101a <__swbuf_r+0x1a>
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <__swbuf_r+0xa0>)
 800107c:	429c      	cmp	r4, r3
 800107e:	bf08      	it	eq
 8001080:	68ec      	ldreq	r4, [r5, #12]
 8001082:	e7ca      	b.n	800101a <__swbuf_r+0x1a>
 8001084:	4621      	mov	r1, r4
 8001086:	4628      	mov	r0, r5
 8001088:	f000 f81e 	bl	80010c8 <__swsetup_r>
 800108c:	2800      	cmp	r0, #0
 800108e:	d0cb      	beq.n	8001028 <__swbuf_r+0x28>
 8001090:	f04f 37ff 	mov.w	r7, #4294967295
 8001094:	e7ea      	b.n	800106c <__swbuf_r+0x6c>
 8001096:	bf00      	nop
 8001098:	080015a4 	.word	0x080015a4
 800109c:	080015c4 	.word	0x080015c4
 80010a0:	08001584 	.word	0x08001584

080010a4 <_write_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	4d07      	ldr	r5, [pc, #28]	; (80010c4 <_write_r+0x20>)
 80010a8:	4604      	mov	r4, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	602a      	str	r2, [r5, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f7ff f985 	bl	80003c2 <_write>
 80010b8:	1c43      	adds	r3, r0, #1
 80010ba:	d102      	bne.n	80010c2 <_write_r+0x1e>
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	b103      	cbz	r3, 80010c2 <_write_r+0x1e>
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
 80010c4:	20000098 	.word	0x20000098

080010c8 <__swsetup_r>:
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <__swsetup_r+0xcc>)
 80010ca:	b570      	push	{r4, r5, r6, lr}
 80010cc:	681d      	ldr	r5, [r3, #0]
 80010ce:	4606      	mov	r6, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	b125      	cbz	r5, 80010de <__swsetup_r+0x16>
 80010d4:	69ab      	ldr	r3, [r5, #24]
 80010d6:	b913      	cbnz	r3, 80010de <__swsetup_r+0x16>
 80010d8:	4628      	mov	r0, r5
 80010da:	f7ff fb55 	bl	8000788 <__sinit>
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <__swsetup_r+0xd0>)
 80010e0:	429c      	cmp	r4, r3
 80010e2:	d10f      	bne.n	8001104 <__swsetup_r+0x3c>
 80010e4:	686c      	ldr	r4, [r5, #4]
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010ec:	0719      	lsls	r1, r3, #28
 80010ee:	d42c      	bmi.n	800114a <__swsetup_r+0x82>
 80010f0:	06dd      	lsls	r5, r3, #27
 80010f2:	d411      	bmi.n	8001118 <__swsetup_r+0x50>
 80010f4:	2309      	movs	r3, #9
 80010f6:	6033      	str	r3, [r6, #0]
 80010f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010fc:	81a3      	strh	r3, [r4, #12]
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	e03e      	b.n	8001182 <__swsetup_r+0xba>
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <__swsetup_r+0xd4>)
 8001106:	429c      	cmp	r4, r3
 8001108:	d101      	bne.n	800110e <__swsetup_r+0x46>
 800110a:	68ac      	ldr	r4, [r5, #8]
 800110c:	e7eb      	b.n	80010e6 <__swsetup_r+0x1e>
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <__swsetup_r+0xd8>)
 8001110:	429c      	cmp	r4, r3
 8001112:	bf08      	it	eq
 8001114:	68ec      	ldreq	r4, [r5, #12]
 8001116:	e7e6      	b.n	80010e6 <__swsetup_r+0x1e>
 8001118:	0758      	lsls	r0, r3, #29
 800111a:	d512      	bpl.n	8001142 <__swsetup_r+0x7a>
 800111c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800111e:	b141      	cbz	r1, 8001132 <__swsetup_r+0x6a>
 8001120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001124:	4299      	cmp	r1, r3
 8001126:	d002      	beq.n	800112e <__swsetup_r+0x66>
 8001128:	4630      	mov	r0, r6
 800112a:	f000 f98f 	bl	800144c <_free_r>
 800112e:	2300      	movs	r3, #0
 8001130:	6363      	str	r3, [r4, #52]	; 0x34
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001138:	81a3      	strh	r3, [r4, #12]
 800113a:	2300      	movs	r3, #0
 800113c:	6063      	str	r3, [r4, #4]
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	6023      	str	r3, [r4, #0]
 8001142:	89a3      	ldrh	r3, [r4, #12]
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	81a3      	strh	r3, [r4, #12]
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	b94b      	cbnz	r3, 8001162 <__swsetup_r+0x9a>
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001158:	d003      	beq.n	8001162 <__swsetup_r+0x9a>
 800115a:	4621      	mov	r1, r4
 800115c:	4630      	mov	r0, r6
 800115e:	f000 f929 	bl	80013b4 <__smakebuf_r>
 8001162:	89a0      	ldrh	r0, [r4, #12]
 8001164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001168:	f010 0301 	ands.w	r3, r0, #1
 800116c:	d00a      	beq.n	8001184 <__swsetup_r+0xbc>
 800116e:	2300      	movs	r3, #0
 8001170:	60a3      	str	r3, [r4, #8]
 8001172:	6963      	ldr	r3, [r4, #20]
 8001174:	425b      	negs	r3, r3
 8001176:	61a3      	str	r3, [r4, #24]
 8001178:	6923      	ldr	r3, [r4, #16]
 800117a:	b943      	cbnz	r3, 800118e <__swsetup_r+0xc6>
 800117c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001180:	d1ba      	bne.n	80010f8 <__swsetup_r+0x30>
 8001182:	bd70      	pop	{r4, r5, r6, pc}
 8001184:	0781      	lsls	r1, r0, #30
 8001186:	bf58      	it	pl
 8001188:	6963      	ldrpl	r3, [r4, #20]
 800118a:	60a3      	str	r3, [r4, #8]
 800118c:	e7f4      	b.n	8001178 <__swsetup_r+0xb0>
 800118e:	2000      	movs	r0, #0
 8001190:	e7f7      	b.n	8001182 <__swsetup_r+0xba>
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	080015a4 	.word	0x080015a4
 800119c:	080015c4 	.word	0x080015c4
 80011a0:	08001584 	.word	0x08001584

080011a4 <_close_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4d06      	ldr	r5, [pc, #24]	; (80011c0 <_close_r+0x1c>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	602b      	str	r3, [r5, #0]
 80011b0:	f7ff f923 	bl	80003fa <_close>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_close_r+0x1a>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	b103      	cbz	r3, 80011be <_close_r+0x1a>
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	20000098 	.word	0x20000098

080011c4 <__sflush_r>:
 80011c4:	898a      	ldrh	r2, [r1, #12]
 80011c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ca:	4605      	mov	r5, r0
 80011cc:	0710      	lsls	r0, r2, #28
 80011ce:	460c      	mov	r4, r1
 80011d0:	d458      	bmi.n	8001284 <__sflush_r+0xc0>
 80011d2:	684b      	ldr	r3, [r1, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	dc05      	bgt.n	80011e4 <__sflush_r+0x20>
 80011d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dc02      	bgt.n	80011e4 <__sflush_r+0x20>
 80011de:	2000      	movs	r0, #0
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d0f9      	beq.n	80011de <__sflush_r+0x1a>
 80011ea:	2300      	movs	r3, #0
 80011ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011f0:	682f      	ldr	r7, [r5, #0]
 80011f2:	602b      	str	r3, [r5, #0]
 80011f4:	d032      	beq.n	800125c <__sflush_r+0x98>
 80011f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	075a      	lsls	r2, r3, #29
 80011fc:	d505      	bpl.n	800120a <__sflush_r+0x46>
 80011fe:	6863      	ldr	r3, [r4, #4]
 8001200:	1ac0      	subs	r0, r0, r3
 8001202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001204:	b10b      	cbz	r3, 800120a <__sflush_r+0x46>
 8001206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001208:	1ac0      	subs	r0, r0, r3
 800120a:	2300      	movs	r3, #0
 800120c:	4602      	mov	r2, r0
 800120e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001210:	6a21      	ldr	r1, [r4, #32]
 8001212:	4628      	mov	r0, r5
 8001214:	47b0      	blx	r6
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	d106      	bne.n	800122a <__sflush_r+0x66>
 800121c:	6829      	ldr	r1, [r5, #0]
 800121e:	291d      	cmp	r1, #29
 8001220:	d82c      	bhi.n	800127c <__sflush_r+0xb8>
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <__sflush_r+0x108>)
 8001224:	40ca      	lsrs	r2, r1
 8001226:	07d6      	lsls	r6, r2, #31
 8001228:	d528      	bpl.n	800127c <__sflush_r+0xb8>
 800122a:	2200      	movs	r2, #0
 800122c:	6062      	str	r2, [r4, #4]
 800122e:	04d9      	lsls	r1, r3, #19
 8001230:	6922      	ldr	r2, [r4, #16]
 8001232:	6022      	str	r2, [r4, #0]
 8001234:	d504      	bpl.n	8001240 <__sflush_r+0x7c>
 8001236:	1c42      	adds	r2, r0, #1
 8001238:	d101      	bne.n	800123e <__sflush_r+0x7a>
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	b903      	cbnz	r3, 8001240 <__sflush_r+0x7c>
 800123e:	6560      	str	r0, [r4, #84]	; 0x54
 8001240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001242:	602f      	str	r7, [r5, #0]
 8001244:	2900      	cmp	r1, #0
 8001246:	d0ca      	beq.n	80011de <__sflush_r+0x1a>
 8001248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800124c:	4299      	cmp	r1, r3
 800124e:	d002      	beq.n	8001256 <__sflush_r+0x92>
 8001250:	4628      	mov	r0, r5
 8001252:	f000 f8fb 	bl	800144c <_free_r>
 8001256:	2000      	movs	r0, #0
 8001258:	6360      	str	r0, [r4, #52]	; 0x34
 800125a:	e7c1      	b.n	80011e0 <__sflush_r+0x1c>
 800125c:	6a21      	ldr	r1, [r4, #32]
 800125e:	2301      	movs	r3, #1
 8001260:	4628      	mov	r0, r5
 8001262:	47b0      	blx	r6
 8001264:	1c41      	adds	r1, r0, #1
 8001266:	d1c7      	bne.n	80011f8 <__sflush_r+0x34>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0c4      	beq.n	80011f8 <__sflush_r+0x34>
 800126e:	2b1d      	cmp	r3, #29
 8001270:	d001      	beq.n	8001276 <__sflush_r+0xb2>
 8001272:	2b16      	cmp	r3, #22
 8001274:	d101      	bne.n	800127a <__sflush_r+0xb6>
 8001276:	602f      	str	r7, [r5, #0]
 8001278:	e7b1      	b.n	80011de <__sflush_r+0x1a>
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	e7ad      	b.n	80011e0 <__sflush_r+0x1c>
 8001284:	690f      	ldr	r7, [r1, #16]
 8001286:	2f00      	cmp	r7, #0
 8001288:	d0a9      	beq.n	80011de <__sflush_r+0x1a>
 800128a:	0793      	lsls	r3, r2, #30
 800128c:	680e      	ldr	r6, [r1, #0]
 800128e:	bf08      	it	eq
 8001290:	694b      	ldreq	r3, [r1, #20]
 8001292:	600f      	str	r7, [r1, #0]
 8001294:	bf18      	it	ne
 8001296:	2300      	movne	r3, #0
 8001298:	eba6 0807 	sub.w	r8, r6, r7
 800129c:	608b      	str	r3, [r1, #8]
 800129e:	f1b8 0f00 	cmp.w	r8, #0
 80012a2:	dd9c      	ble.n	80011de <__sflush_r+0x1a>
 80012a4:	6a21      	ldr	r1, [r4, #32]
 80012a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012a8:	4643      	mov	r3, r8
 80012aa:	463a      	mov	r2, r7
 80012ac:	4628      	mov	r0, r5
 80012ae:	47b0      	blx	r6
 80012b0:	2800      	cmp	r0, #0
 80012b2:	dc06      	bgt.n	80012c2 <__sflush_r+0xfe>
 80012b4:	89a3      	ldrh	r3, [r4, #12]
 80012b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ba:	81a3      	strh	r3, [r4, #12]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	e78e      	b.n	80011e0 <__sflush_r+0x1c>
 80012c2:	4407      	add	r7, r0
 80012c4:	eba8 0800 	sub.w	r8, r8, r0
 80012c8:	e7e9      	b.n	800129e <__sflush_r+0xda>
 80012ca:	bf00      	nop
 80012cc:	20400001 	.word	0x20400001

080012d0 <_fflush_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	690b      	ldr	r3, [r1, #16]
 80012d4:	4605      	mov	r5, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	b913      	cbnz	r3, 80012e0 <_fflush_r+0x10>
 80012da:	2500      	movs	r5, #0
 80012dc:	4628      	mov	r0, r5
 80012de:	bd38      	pop	{r3, r4, r5, pc}
 80012e0:	b118      	cbz	r0, 80012ea <_fflush_r+0x1a>
 80012e2:	6983      	ldr	r3, [r0, #24]
 80012e4:	b90b      	cbnz	r3, 80012ea <_fflush_r+0x1a>
 80012e6:	f7ff fa4f 	bl	8000788 <__sinit>
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <_fflush_r+0x6c>)
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d11b      	bne.n	8001328 <_fflush_r+0x58>
 80012f0:	686c      	ldr	r4, [r5, #4]
 80012f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0ef      	beq.n	80012da <_fflush_r+0xa>
 80012fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012fc:	07d0      	lsls	r0, r2, #31
 80012fe:	d404      	bmi.n	800130a <_fflush_r+0x3a>
 8001300:	0599      	lsls	r1, r3, #22
 8001302:	d402      	bmi.n	800130a <_fflush_r+0x3a>
 8001304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001306:	f7ff fadd 	bl	80008c4 <__retarget_lock_acquire_recursive>
 800130a:	4628      	mov	r0, r5
 800130c:	4621      	mov	r1, r4
 800130e:	f7ff ff59 	bl	80011c4 <__sflush_r>
 8001312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001314:	07da      	lsls	r2, r3, #31
 8001316:	4605      	mov	r5, r0
 8001318:	d4e0      	bmi.n	80012dc <_fflush_r+0xc>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	059b      	lsls	r3, r3, #22
 800131e:	d4dd      	bmi.n	80012dc <_fflush_r+0xc>
 8001320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001322:	f7ff fad0 	bl	80008c6 <__retarget_lock_release_recursive>
 8001326:	e7d9      	b.n	80012dc <_fflush_r+0xc>
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <_fflush_r+0x70>)
 800132a:	429c      	cmp	r4, r3
 800132c:	d101      	bne.n	8001332 <_fflush_r+0x62>
 800132e:	68ac      	ldr	r4, [r5, #8]
 8001330:	e7df      	b.n	80012f2 <_fflush_r+0x22>
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <_fflush_r+0x74>)
 8001334:	429c      	cmp	r4, r3
 8001336:	bf08      	it	eq
 8001338:	68ec      	ldreq	r4, [r5, #12]
 800133a:	e7da      	b.n	80012f2 <_fflush_r+0x22>
 800133c:	080015a4 	.word	0x080015a4
 8001340:	080015c4 	.word	0x080015c4
 8001344:	08001584 	.word	0x08001584

08001348 <_lseek_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d07      	ldr	r5, [pc, #28]	; (8001368 <_lseek_r+0x20>)
 800134c:	4604      	mov	r4, r0
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	2200      	movs	r2, #0
 8001354:	602a      	str	r2, [r5, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	f7ff f876 	bl	8000448 <_lseek>
 800135c:	1c43      	adds	r3, r0, #1
 800135e:	d102      	bne.n	8001366 <_lseek_r+0x1e>
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	b103      	cbz	r3, 8001366 <_lseek_r+0x1e>
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	20000098 	.word	0x20000098

0800136c <__swhatbuf_r>:
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	460e      	mov	r6, r1
 8001370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001374:	2900      	cmp	r1, #0
 8001376:	b096      	sub	sp, #88	; 0x58
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	da07      	bge.n	800138e <__swhatbuf_r+0x22>
 800137e:	2300      	movs	r3, #0
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	89b3      	ldrh	r3, [r6, #12]
 8001384:	061a      	lsls	r2, r3, #24
 8001386:	d410      	bmi.n	80013aa <__swhatbuf_r+0x3e>
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	e00e      	b.n	80013ac <__swhatbuf_r+0x40>
 800138e:	466a      	mov	r2, sp
 8001390:	f000 f8be 	bl	8001510 <_fstat_r>
 8001394:	2800      	cmp	r0, #0
 8001396:	dbf2      	blt.n	800137e <__swhatbuf_r+0x12>
 8001398:	9a01      	ldr	r2, [sp, #4]
 800139a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800139e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013a2:	425a      	negs	r2, r3
 80013a4:	415a      	adcs	r2, r3
 80013a6:	602a      	str	r2, [r5, #0]
 80013a8:	e7ee      	b.n	8001388 <__swhatbuf_r+0x1c>
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	2000      	movs	r0, #0
 80013ae:	6023      	str	r3, [r4, #0]
 80013b0:	b016      	add	sp, #88	; 0x58
 80013b2:	bd70      	pop	{r4, r5, r6, pc}

080013b4 <__smakebuf_r>:
 80013b4:	898b      	ldrh	r3, [r1, #12]
 80013b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013b8:	079d      	lsls	r5, r3, #30
 80013ba:	4606      	mov	r6, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	d507      	bpl.n	80013d0 <__smakebuf_r+0x1c>
 80013c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	6123      	str	r3, [r4, #16]
 80013c8:	2301      	movs	r3, #1
 80013ca:	6163      	str	r3, [r4, #20]
 80013cc:	b002      	add	sp, #8
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	ab01      	add	r3, sp, #4
 80013d2:	466a      	mov	r2, sp
 80013d4:	f7ff ffca 	bl	800136c <__swhatbuf_r>
 80013d8:	9900      	ldr	r1, [sp, #0]
 80013da:	4605      	mov	r5, r0
 80013dc:	4630      	mov	r0, r6
 80013de:	f7ff fa73 	bl	80008c8 <_malloc_r>
 80013e2:	b948      	cbnz	r0, 80013f8 <__smakebuf_r+0x44>
 80013e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e8:	059a      	lsls	r2, r3, #22
 80013ea:	d4ef      	bmi.n	80013cc <__smakebuf_r+0x18>
 80013ec:	f023 0303 	bic.w	r3, r3, #3
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	81a3      	strh	r3, [r4, #12]
 80013f6:	e7e3      	b.n	80013c0 <__smakebuf_r+0xc>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <__smakebuf_r+0x7c>)
 80013fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	6020      	str	r0, [r4, #0]
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	9b00      	ldr	r3, [sp, #0]
 8001408:	6163      	str	r3, [r4, #20]
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	6120      	str	r0, [r4, #16]
 800140e:	b15b      	cbz	r3, 8001428 <__smakebuf_r+0x74>
 8001410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001414:	4630      	mov	r0, r6
 8001416:	f000 f88d 	bl	8001534 <_isatty_r>
 800141a:	b128      	cbz	r0, 8001428 <__smakebuf_r+0x74>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	89a0      	ldrh	r0, [r4, #12]
 800142a:	4305      	orrs	r5, r0
 800142c:	81a5      	strh	r5, [r4, #12]
 800142e:	e7cd      	b.n	80013cc <__smakebuf_r+0x18>
 8001430:	08000721 	.word	0x08000721

08001434 <__malloc_lock>:
 8001434:	4801      	ldr	r0, [pc, #4]	; (800143c <__malloc_lock+0x8>)
 8001436:	f7ff ba45 	b.w	80008c4 <__retarget_lock_acquire_recursive>
 800143a:	bf00      	nop
 800143c:	20000090 	.word	0x20000090

08001440 <__malloc_unlock>:
 8001440:	4801      	ldr	r0, [pc, #4]	; (8001448 <__malloc_unlock+0x8>)
 8001442:	f7ff ba40 	b.w	80008c6 <__retarget_lock_release_recursive>
 8001446:	bf00      	nop
 8001448:	20000090 	.word	0x20000090

0800144c <_free_r>:
 800144c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800144e:	2900      	cmp	r1, #0
 8001450:	d048      	beq.n	80014e4 <_free_r+0x98>
 8001452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001456:	9001      	str	r0, [sp, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f1a1 0404 	sub.w	r4, r1, #4
 800145e:	bfb8      	it	lt
 8001460:	18e4      	addlt	r4, r4, r3
 8001462:	f7ff ffe7 	bl	8001434 <__malloc_lock>
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <_free_r+0x9c>)
 8001468:	9801      	ldr	r0, [sp, #4]
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	4615      	mov	r5, r2
 800146e:	b933      	cbnz	r3, 800147e <_free_r+0x32>
 8001470:	6063      	str	r3, [r4, #4]
 8001472:	6014      	str	r4, [r2, #0]
 8001474:	b003      	add	sp, #12
 8001476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800147a:	f7ff bfe1 	b.w	8001440 <__malloc_unlock>
 800147e:	42a3      	cmp	r3, r4
 8001480:	d90b      	bls.n	800149a <_free_r+0x4e>
 8001482:	6821      	ldr	r1, [r4, #0]
 8001484:	1862      	adds	r2, r4, r1
 8001486:	4293      	cmp	r3, r2
 8001488:	bf04      	itt	eq
 800148a:	681a      	ldreq	r2, [r3, #0]
 800148c:	685b      	ldreq	r3, [r3, #4]
 800148e:	6063      	str	r3, [r4, #4]
 8001490:	bf04      	itt	eq
 8001492:	1852      	addeq	r2, r2, r1
 8001494:	6022      	streq	r2, [r4, #0]
 8001496:	602c      	str	r4, [r5, #0]
 8001498:	e7ec      	b.n	8001474 <_free_r+0x28>
 800149a:	461a      	mov	r2, r3
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b10b      	cbz	r3, 80014a4 <_free_r+0x58>
 80014a0:	42a3      	cmp	r3, r4
 80014a2:	d9fa      	bls.n	800149a <_free_r+0x4e>
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	1855      	adds	r5, r2, r1
 80014a8:	42a5      	cmp	r5, r4
 80014aa:	d10b      	bne.n	80014c4 <_free_r+0x78>
 80014ac:	6824      	ldr	r4, [r4, #0]
 80014ae:	4421      	add	r1, r4
 80014b0:	1854      	adds	r4, r2, r1
 80014b2:	42a3      	cmp	r3, r4
 80014b4:	6011      	str	r1, [r2, #0]
 80014b6:	d1dd      	bne.n	8001474 <_free_r+0x28>
 80014b8:	681c      	ldr	r4, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	6053      	str	r3, [r2, #4]
 80014be:	4421      	add	r1, r4
 80014c0:	6011      	str	r1, [r2, #0]
 80014c2:	e7d7      	b.n	8001474 <_free_r+0x28>
 80014c4:	d902      	bls.n	80014cc <_free_r+0x80>
 80014c6:	230c      	movs	r3, #12
 80014c8:	6003      	str	r3, [r0, #0]
 80014ca:	e7d3      	b.n	8001474 <_free_r+0x28>
 80014cc:	6825      	ldr	r5, [r4, #0]
 80014ce:	1961      	adds	r1, r4, r5
 80014d0:	428b      	cmp	r3, r1
 80014d2:	bf04      	itt	eq
 80014d4:	6819      	ldreq	r1, [r3, #0]
 80014d6:	685b      	ldreq	r3, [r3, #4]
 80014d8:	6063      	str	r3, [r4, #4]
 80014da:	bf04      	itt	eq
 80014dc:	1949      	addeq	r1, r1, r5
 80014de:	6021      	streq	r1, [r4, #0]
 80014e0:	6054      	str	r4, [r2, #4]
 80014e2:	e7c7      	b.n	8001474 <_free_r+0x28>
 80014e4:	b003      	add	sp, #12
 80014e6:	bd30      	pop	{r4, r5, pc}
 80014e8:	20000084 	.word	0x20000084

080014ec <_read_r>:
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	4d07      	ldr	r5, [pc, #28]	; (800150c <_read_r+0x20>)
 80014f0:	4604      	mov	r4, r0
 80014f2:	4608      	mov	r0, r1
 80014f4:	4611      	mov	r1, r2
 80014f6:	2200      	movs	r2, #0
 80014f8:	602a      	str	r2, [r5, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f7fe ff44 	bl	8000388 <_read>
 8001500:	1c43      	adds	r3, r0, #1
 8001502:	d102      	bne.n	800150a <_read_r+0x1e>
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	b103      	cbz	r3, 800150a <_read_r+0x1e>
 8001508:	6023      	str	r3, [r4, #0]
 800150a:	bd38      	pop	{r3, r4, r5, pc}
 800150c:	20000098 	.word	0x20000098

08001510 <_fstat_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	4d07      	ldr	r5, [pc, #28]	; (8001530 <_fstat_r+0x20>)
 8001514:	2300      	movs	r3, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	602b      	str	r3, [r5, #0]
 800151e:	f7fe ff78 	bl	8000412 <_fstat>
 8001522:	1c43      	adds	r3, r0, #1
 8001524:	d102      	bne.n	800152c <_fstat_r+0x1c>
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	b103      	cbz	r3, 800152c <_fstat_r+0x1c>
 800152a:	6023      	str	r3, [r4, #0]
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	20000098 	.word	0x20000098

08001534 <_isatty_r>:
 8001534:	b538      	push	{r3, r4, r5, lr}
 8001536:	4d06      	ldr	r5, [pc, #24]	; (8001550 <_isatty_r+0x1c>)
 8001538:	2300      	movs	r3, #0
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	602b      	str	r3, [r5, #0]
 8001540:	f7fe ff77 	bl	8000432 <_isatty>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_isatty_r+0x1a>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_isatty_r+0x1a>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	20000098 	.word	0x20000098

08001554 <_init>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr

08001560 <_fini>:
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	bf00      	nop
 8001564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001566:	bc08      	pop	{r3}
 8001568:	469e      	mov	lr, r3
 800156a:	4770      	bx	lr
