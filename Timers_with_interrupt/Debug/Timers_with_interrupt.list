
Timers_with_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000410  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000410  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017ea  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000466  00000000  00000000  00011c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00012090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00012140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cdeb  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001141  00000000  00000000  0001efa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045b7e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00065c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  00065cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080003f0 	.word	0x080003f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080003f0 	.word	0x080003f0

08000208 <Encoder_mode_TIM1>:
return (TIM1->CNT);
}


void Encoder_mode_TIM1(void)
   {/*enable clock acess to GPIOA*/
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=(1U<<0);
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <Encoder_mode_TIM1+0xa0>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <Encoder_mode_TIM1+0xa0>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PA8 AND PA9 TO alternate func*/
	GPIOA->MODER|=(1U<<17);
 8000218:	4b24      	ldr	r3, [pc, #144]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 800021e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=(1U<<19);
 8000224:	4b21      	ldr	r3, [pc, #132]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 800022a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800022e:	6013      	str	r3, [r2, #0]
	/*Set PA8 and PA9 alternate func to AF1*/
	GPIOA->AFR[1]|=(1U<<0);
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1]|=(1U<<4);
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 800023e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <Encoder_mode_TIM1+0xa4>)
 8000242:	f043 0310 	orr.w	r3, r3, #16
 8000246:	6253      	str	r3, [r2, #36]	; 0x24

	/*enable clock access to timer*/
		RCC->APB2ENR|=(1U<<0);
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <Encoder_mode_TIM1+0xa0>)
 800024a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <Encoder_mode_TIM1+0xa0>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6453      	str	r3, [r2, #68]	; 0x44




	/*Set the channels menish fehem barsha chyaamel lhak*/
	TIM1->CCMR1|=(1U<<8);
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800025a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1|=(1U<<0);
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6193      	str	r3, [r2, #24]
	/*set both channels to input*/

	/*Set encoder mode*/
	TIM1->SMCR|=(1U<<0);
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6093      	str	r3, [r2, #8]
	TIM1->SMCR|=(1U<<1);
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6093      	str	r3, [r2, #8]
	/*Set ARR Value*/
	LPTIM1->ARR=0xFFFF;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <Encoder_mode_TIM1+0xac>)
 8000286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800028a:	619a      	str	r2, [r3, #24]

	/*enable timer*/
	TIM1->CR1|=(1U<<0);
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
	/*Clear Timer*/
	TIM1->CNT=0;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <Encoder_mode_TIM1+0xa8>)
 800029a:	2200      	movs	r2, #0
 800029c:	625a      	str	r2, [r3, #36]	; 0x24




	}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40010000 	.word	0x40010000
 80002b4:	40002400 	.word	0x40002400

080002b8 <main>:


                          }

                 int main(void)
{                    Encoder_mode_TIM1();
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	f7ff ffa4 	bl	8000208 <Encoder_mode_TIM1>
                	 Timerinit_interrupt();
 80002c0:	f000 f820 	bl	8000304 <Timerinit_interrupt>
while(1){}
 80002c4:	e7fe      	b.n	80002c4 <main+0xc>
	...

080002c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	db0b      	blt.n	80002f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f003 021f 	and.w	r2, r3, #31
 80002e0:	4907      	ldr	r1, [pc, #28]	; (8000300 <__NVIC_EnableIRQ+0x38>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	095b      	lsrs	r3, r3, #5
 80002e8:	2001      	movs	r0, #1
 80002ea:	fa00 f202 	lsl.w	r2, r0, r2
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000e100 	.word	0xe000e100

08000304 <Timerinit_interrupt>:
	/***********************ENABLE TIMER *****************************/
	TIM5->CR1|=CNTEN;

                         }

void Timerinit_interrupt(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	/***********************enable clock access to APB1	**************/
		RCC->APB1ENR|=Timer5EN;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <Timerinit_interrupt+0x48>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	4a0f      	ldr	r2, [pc, #60]	; (800034c <Timerinit_interrupt+0x48>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6413      	str	r3, [r2, #64]	; 0x40
	    /***********************Set prescaler*****************************/
		TIM5->PSC=1599; // 1600 -1
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <Timerinit_interrupt+0x4c>)
 8000316:	f240 623f 	movw	r2, #1599	; 0x63f
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
		/***********************SET ARR***********************************/
		TIM5->ARR=99; //10000-1  BECAUSE 16,000,000=1600*10000
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <Timerinit_interrupt+0x4c>)
 800031e:	2263      	movs	r2, #99	; 0x63
 8000320:	62da      	str	r2, [r3, #44]	; 0x2c
		/***********************Clear counter*****************************/
		TIM5->CNT=0;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <Timerinit_interrupt+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
		/***********************ENABLE TIMER *****************************/
		TIM5->CR1|=CNTEN;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <Timerinit_interrupt+0x4c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a08      	ldr	r2, [pc, #32]	; (8000350 <Timerinit_interrupt+0x4c>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
     	/*enable interruption*/
	    TIM5->DIER|=(1U<<0);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <Timerinit_interrupt+0x4c>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <Timerinit_interrupt+0x4c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	60d3      	str	r3, [r2, #12]
	    /*enable nvic interruption*/
	    NVIC_EnableIRQ(50);
 8000340:	2032      	movs	r0, #50	; 0x32
 8000342:	f7ff ffc1 	bl	80002c8 <__NVIC_EnableIRQ>

                         }
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40000c00 	.word	0x40000c00

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff97 	bl	80002b8 <main>

0800038a <LoopForever>:

LoopForever:
    b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
